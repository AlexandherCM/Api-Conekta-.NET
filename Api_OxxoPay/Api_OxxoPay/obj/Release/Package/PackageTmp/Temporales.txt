protected async void BtnSend_Click(object sender, EventArgs e)
        {
            // VARIABLES INICIALES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            DateTime expiresAtDateTime = DateTime.Now.AddDays(30); // Ejemplo: 30 días a partir de hoy
            long expiresAtUnix = ((DateTimeOffset)expiresAtDateTime).ToUnixTimeSeconds();

            string acceptLanguage = "en";
            Configuration configuration = new Configuration
            {
                AccessToken = "key_pq42sBrvzq9u0WnQ6aZvtrg"
            };

            var customerApi = new CustomersApi(configuration);
            var ordersApi = new OrdersApi(configuration);
            // VARIABLES INICIALES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            //create customer - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            //var customer = new Conekta.net.Model.Customer(
            //    name: "Alexandher Cordoba",
            //    phone: "+525591889796",
            //    email: "alexandhercordoba378@gmail.com"
            //);

            ////Suscribir al cliente
            //CustomerResponse customerResponse = await customerApi.CreateCustomerAsync(customer);
            //create customer - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            // Preparar los lineItems
            var lineItems = new List<Product>
            {
                new Product(
                    name: "Guías",
                    unitPrice: 1200*100, // El precio debe estar en centavos
                    quantity: 1
                )
            };
            // Calcular el total de los lineItems
            int totalOrderAmount = lineItems.Sum(item => item.UnitPrice * item.Quantity);

            var charges = new List<ChargeRequest>
            {
                new ChargeRequest(
                    amount: totalOrderAmount, // Asegurar que el monto coincide con el total de los lineItems
                    paymentMethod: new ChargeRequestPaymentMethod(
                        expiresAt: expiresAtUnix,
                        type: "oxxo_cash" // Especificar el tipo de método de pago como Oxxo Cash
                    )
                )
            };

            // Datos del cliente
            var UserInfo = new CustomerInfo(
                name: "Alexandher CM",
                phone: "+525591889796",
                email: "alexandhercordoba378@gmail.com"
            );

            var orderRequest = new OrderRequest(
                currency: "MXN",
                customerInfo: new OrderRequestCustomerInfo(UserInfo),
                lineItems: lineItems,
                charges: charges
            );

            // Intentar crear la orden
            try
            {
                // Procesar la respuesta, por ejemplo, mostrar el ID de la orden y otros detalles relevantes.
                OrderResponse response = await ordersApi.CreateOrderAsync(orderRequest, acceptLanguage);
                //customerApi.DeleteCustomerById(customerResponse.Id); 
            }
            catch (Exception ex)
            {
                // Manejar excepción, por ejemplo, registrando o mostrando el mensaje de error.
                Console.WriteLine(ex.Message);
            }
        }