<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Conekta.net</name>
    </assembly>
    <members>
        <member name="T:Conekta.net.Api.IAntifraudApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.CreateRuleBlacklist(Conekta.net.Model.CreateRiskRulesData,System.String,System.Int32)">
            <summary>
            Create blacklisted rule
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.CreateRuleBlacklistWithHttpInfo(Conekta.net.Model.CreateRiskRulesData,System.String,System.Int32)">
            <summary>
            Create blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.CreateRuleWhitelist(System.String,Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create whitelisted rule
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WhitelistlistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.CreateRuleWhitelistWithHttpInfo(System.String,Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WhitelistlistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.DeleteRuleBlacklist(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete blacklisted rule
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.DeleteRuleBlacklistWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.DeleteRuleWhitelist(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete whitelisted rule
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DeletedWhitelistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.DeleteRuleWhitelistWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DeletedWhitelistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.GetRuleBlacklist(System.String,System.Int32)">
            <summary>
            Get list of blacklisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.GetRuleBlacklistWithHttpInfo(System.String,System.Int32)">
            <summary>
            Get list of blacklisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.GetRuleWhitelist(System.String,System.Int32)">
            <summary>
            Get a list of whitelisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiSync.GetRuleWhitelistWithHttpInfo(System.String,System.Int32)">
            <summary>
            Get a list of whitelisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of RiskRulesList</returns>
        </member>
        <member name="T:Conekta.net.Api.IAntifraudApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.CreateRuleBlacklistAsync(Conekta.net.Model.CreateRiskRulesData,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.CreateRuleBlacklistWithHttpInfoAsync(Conekta.net.Model.CreateRiskRulesData,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (BlacklistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.CreateRuleWhitelistAsync(System.String,Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WhitelistlistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.CreateRuleWhitelistWithHttpInfoAsync(System.String,Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WhitelistlistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.DeleteRuleBlacklistAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.DeleteRuleBlacklistWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DeletedBlacklistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.DeleteRuleWhitelistAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DeletedWhitelistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.DeleteRuleWhitelistWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DeletedWhitelistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.GetRuleBlacklistAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of blacklisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.GetRuleBlacklistWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of blacklisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (RiskRulesList)</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.GetRuleWhitelistAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of whitelisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.IAntifraudApiAsync.GetRuleWhitelistWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of whitelisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (RiskRulesList)</returns>
        </member>
        <member name="T:Conekta.net.Api.IAntifraudApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.AntifraudApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.AntifraudApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.AntifraudApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.AntifraudApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.AntifraudApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.AntifraudApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.AntifraudApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.AntifraudApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.AntifraudApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.CreateRuleBlacklist(Conekta.net.Model.CreateRiskRulesData,System.String,System.Int32)">
            <summary>
            Create blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.CreateRuleBlacklistWithHttpInfo(Conekta.net.Model.CreateRiskRulesData,System.String,System.Int32)">
            <summary>
            Create blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.CreateRuleBlacklistAsync(Conekta.net.Model.CreateRiskRulesData,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.CreateRuleBlacklistWithHttpInfoAsync(Conekta.net.Model.CreateRiskRulesData,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (BlacklistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.CreateRuleWhitelist(System.String,Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WhitelistlistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.CreateRuleWhitelistWithHttpInfo(System.String,Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WhitelistlistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.CreateRuleWhitelistAsync(System.String,Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WhitelistlistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.CreateRuleWhitelistWithHttpInfoAsync(System.String,Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WhitelistlistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.DeleteRuleBlacklist(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.DeleteRuleBlacklistWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.DeleteRuleBlacklistAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.DeleteRuleBlacklistWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DeletedBlacklistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.DeleteRuleWhitelist(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DeletedWhitelistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.DeleteRuleWhitelistWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DeletedWhitelistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.DeleteRuleWhitelistAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DeletedWhitelistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.DeleteRuleWhitelistWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DeletedWhitelistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.GetRuleBlacklist(System.String,System.Int32)">
            <summary>
            Get list of blacklisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.GetRuleBlacklistWithHttpInfo(System.String,System.Int32)">
            <summary>
            Get list of blacklisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.GetRuleBlacklistAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of blacklisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.GetRuleBlacklistWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of blacklisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (RiskRulesList)</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.GetRuleWhitelist(System.String,System.Int32)">
            <summary>
            Get a list of whitelisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.GetRuleWhitelistWithHttpInfo(System.String,System.Int32)">
            <summary>
            Get a list of whitelisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.GetRuleWhitelistAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of whitelisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.AntifraudApi.GetRuleWhitelistWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of whitelisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (RiskRulesList)</returns>
        </member>
        <member name="T:Conekta.net.Api.IApiKeysApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.CreateApiKey(Conekta.net.Model.ApiKeyRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Api Key
            </summary>
            <remarks>
            Create a api key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="apiKeyRequest">requested field for a api keys</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.CreateApiKeyWithHttpInfo(Conekta.net.Model.ApiKeyRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Api Key
            </summary>
            <remarks>
            Create a api key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="apiKeyRequest">requested field for a api keys</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ApiKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.DeleteApiKey(System.String,System.String,System.Int32)">
            <summary>
            Delete Api Key
            </summary>
            <remarks>
            Deletes a api key that corresponds to a api key ID
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DeleteApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.DeleteApiKeyWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Delete Api Key
            </summary>
            <remarks>
            Deletes a api key that corresponds to a api key ID
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DeleteApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.GetApiKey(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Api Key
            </summary>
            <remarks>
            Gets a api key that corresponds to a api key ID
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.GetApiKeyWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Api Key
            </summary>
            <remarks>
            Gets a api key that corresponds to a api key ID
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.GetApiKeys(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get list of Api Keys
            </summary>
            <remarks>
            Consume the list of api keys you have
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General search, e.g. by id, description, prefix (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.GetApiKeysWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get list of Api Keys
            </summary>
            <remarks>
            Consume the list of api keys you have
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General search, e.g. by id, description, prefix (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.UpdateApiKey(System.String,System.String,Conekta.net.Model.ApiKeyUpdateRequest,System.Int32)">
            <summary>
            Update Api Key
            </summary>
            <remarks>
            Update an existing api key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="apiKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiSync.UpdateApiKeyWithHttpInfo(System.String,System.String,Conekta.net.Model.ApiKeyUpdateRequest,System.Int32)">
            <summary>
            Update Api Key
            </summary>
            <remarks>
            Update an existing api key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="apiKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ApiKeyResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IApiKeysApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.CreateApiKeyAsync(Conekta.net.Model.ApiKeyRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Api Key
            </summary>
            <remarks>
            Create a api key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="apiKeyRequest">requested field for a api keys</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.CreateApiKeyWithHttpInfoAsync(Conekta.net.Model.ApiKeyRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Api Key
            </summary>
            <remarks>
            Create a api key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="apiKeyRequest">requested field for a api keys</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ApiKeyCreateResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.DeleteApiKeyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Api Key
            </summary>
            <remarks>
            Deletes a api key that corresponds to a api key ID
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DeleteApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.DeleteApiKeyWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Api Key
            </summary>
            <remarks>
            Deletes a api key that corresponds to a api key ID
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DeleteApiKeysResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.GetApiKeyAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Api Key
            </summary>
            <remarks>
            Gets a api key that corresponds to a api key ID
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.GetApiKeyWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Api Key
            </summary>
            <remarks>
            Gets a api key that corresponds to a api key ID
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.GetApiKeysAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of Api Keys
            </summary>
            <remarks>
            Consume the list of api keys you have
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General search, e.g. by id, description, prefix (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.GetApiKeysWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of Api Keys
            </summary>
            <remarks>
            Consume the list of api keys you have
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General search, e.g. by id, description, prefix (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetApiKeysResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.UpdateApiKeyAsync(System.String,System.String,Conekta.net.Model.ApiKeyUpdateRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Api Key
            </summary>
            <remarks>
            Update an existing api key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="apiKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IApiKeysApiAsync.UpdateApiKeyWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.ApiKeyUpdateRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Api Key
            </summary>
            <remarks>
            Update an existing api key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="apiKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IApiKeysApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.ApiKeysApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ApiKeysApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ApiKeysApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ApiKeysApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ApiKeysApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.ApiKeysApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.ApiKeysApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.ApiKeysApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.ApiKeysApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.CreateApiKey(Conekta.net.Model.ApiKeyRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Api Key Create a api key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="apiKeyRequest">requested field for a api keys</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.CreateApiKeyWithHttpInfo(Conekta.net.Model.ApiKeyRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Api Key Create a api key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="apiKeyRequest">requested field for a api keys</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ApiKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.CreateApiKeyAsync(Conekta.net.Model.ApiKeyRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Api Key Create a api key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="apiKeyRequest">requested field for a api keys</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.CreateApiKeyWithHttpInfoAsync(Conekta.net.Model.ApiKeyRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Api Key Create a api key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="apiKeyRequest">requested field for a api keys</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ApiKeyCreateResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.DeleteApiKey(System.String,System.String,System.Int32)">
            <summary>
            Delete Api Key Deletes a api key that corresponds to a api key ID
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DeleteApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.DeleteApiKeyWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Delete Api Key Deletes a api key that corresponds to a api key ID
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DeleteApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.DeleteApiKeyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Api Key Deletes a api key that corresponds to a api key ID
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DeleteApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.DeleteApiKeyWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Api Key Deletes a api key that corresponds to a api key ID
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DeleteApiKeysResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.GetApiKey(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Api Key Gets a api key that corresponds to a api key ID
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.GetApiKeyWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Api Key Gets a api key that corresponds to a api key ID
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.GetApiKeyAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Api Key Gets a api key that corresponds to a api key ID
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.GetApiKeyWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Api Key Gets a api key that corresponds to a api key ID
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.GetApiKeys(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get list of Api Keys Consume the list of api keys you have
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General search, e.g. by id, description, prefix (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.GetApiKeysWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get list of Api Keys Consume the list of api keys you have
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General search, e.g. by id, description, prefix (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.GetApiKeysAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of Api Keys Consume the list of api keys you have
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General search, e.g. by id, description, prefix (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetApiKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.GetApiKeysWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of Api Keys Consume the list of api keys you have
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General search, e.g. by id, description, prefix (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetApiKeysResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.UpdateApiKey(System.String,System.String,Conekta.net.Model.ApiKeyUpdateRequest,System.Int32)">
            <summary>
            Update Api Key Update an existing api key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="apiKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.UpdateApiKeyWithHttpInfo(System.String,System.String,Conekta.net.Model.ApiKeyUpdateRequest,System.Int32)">
            <summary>
            Update Api Key Update an existing api key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="apiKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.UpdateApiKeyAsync(System.String,System.String,Conekta.net.Model.ApiKeyUpdateRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Api Key Update an existing api key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="apiKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ApiKeysApi.UpdateApiKeyWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.ApiKeyUpdateRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Api Key Update an existing api key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="apiKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IBalancesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IBalancesApiSync.GetBalance(System.String,System.Int32)">
            <summary>
            Get a company&#39;s balance
            </summary>
            <remarks>
            Get a company&#39;s balance
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>BalanceResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IBalancesApiSync.GetBalanceWithHttpInfo(System.String,System.Int32)">
            <summary>
            Get a company&#39;s balance
            </summary>
            <remarks>
            Get a company&#39;s balance
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of BalanceResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IBalancesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IBalancesApiAsync.GetBalanceAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a company&#39;s balance
            </summary>
            <remarks>
            Get a company&#39;s balance
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of BalanceResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IBalancesApiAsync.GetBalanceWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a company&#39;s balance
            </summary>
            <remarks>
            Get a company&#39;s balance
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (BalanceResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IBalancesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.BalancesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.BalancesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.BalancesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.BalancesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.BalancesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.BalancesApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.BalancesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.BalancesApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.BalancesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.BalancesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.BalancesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.BalancesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.BalancesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.BalancesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.BalancesApi.GetBalance(System.String,System.Int32)">
            <summary>
            Get a company&#39;s balance Get a company&#39;s balance
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>BalanceResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.BalancesApi.GetBalanceWithHttpInfo(System.String,System.Int32)">
            <summary>
            Get a company&#39;s balance Get a company&#39;s balance
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of BalanceResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.BalancesApi.GetBalanceAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a company&#39;s balance Get a company&#39;s balance
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of BalanceResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.BalancesApi.GetBalanceWithHttpInfoAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a company&#39;s balance Get a company&#39;s balance
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (BalanceResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IBlacklistApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiSync.CreateNewBlacklistRule(Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create a blacklisted rule
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiSync.CreateNewBlacklistRuleWithHttpInfo(Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create a blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiSync.DeleteBlacklistRule(System.Int32)">
            <summary>
            Delete a blacklisted rule
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiSync.DeleteBlacklistRuleWithHttpInfo(System.Int32)">
            <summary>
            Delete a blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiSync.GetBlacklist(System.Int32)">
            <summary>
            Get a list of blacklisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiSync.GetBlacklistWithHttpInfo(System.Int32)">
            <summary>
            Get a list of blacklisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of RiskRulesList</returns>
        </member>
        <member name="T:Conekta.net.Api.IBlacklistApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiAsync.CreateNewBlacklistRuleAsync(Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiAsync.CreateNewBlacklistRuleWithHttpInfoAsync(Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (BlacklistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiAsync.DeleteBlacklistRuleAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiAsync.DeleteBlacklistRuleWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a blacklisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DeletedBlacklistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiAsync.GetBlacklistAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of blacklisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.IBlacklistApiAsync.GetBlacklistWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of blacklisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (RiskRulesList)</returns>
        </member>
        <member name="T:Conekta.net.Api.IBlacklistApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.BlacklistApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.BlacklistApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.BlacklistApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.BlacklistApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.BlacklistApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.BlacklistApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.BlacklistApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.BlacklistApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.BlacklistApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.CreateNewBlacklistRule(Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create a blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.CreateNewBlacklistRuleWithHttpInfo(Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create a blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.CreateNewBlacklistRuleAsync(Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of BlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.CreateNewBlacklistRuleWithHttpInfoAsync(Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData">requested field for blacklist rule</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (BlacklistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.DeleteBlacklistRule(System.Int32)">
            <summary>
            Delete a blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.DeleteBlacklistRuleWithHttpInfo(System.Int32)">
            <summary>
            Delete a blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.DeleteBlacklistRuleAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DeletedBlacklistRuleResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.DeleteBlacklistRuleWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a blacklisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DeletedBlacklistRuleResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.GetBlacklist(System.Int32)">
            <summary>
            Get a list of blacklisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.GetBlacklistWithHttpInfo(System.Int32)">
            <summary>
            Get a list of blacklisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.GetBlacklistAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of blacklisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.BlacklistApi.GetBlacklistWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of blacklisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (RiskRulesList)</returns>
        </member>
        <member name="T:Conekta.net.Api.IChargesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiSync.GetCharges(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get A List of Charges
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetChargesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiSync.GetChargesWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get A List of Charges
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetChargesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiSync.OrdersCreateCharge(System.String,Conekta.net.Model.ChargeRequest,System.String,System.String,System.Int32)">
            <summary>
            Create charge
            </summary>
            <remarks>
            Create charge for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeRequest">requested field for a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ChargeOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiSync.OrdersCreateChargeWithHttpInfo(System.String,Conekta.net.Model.ChargeRequest,System.String,System.String,System.Int32)">
            <summary>
            Create charge
            </summary>
            <remarks>
            Create charge for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeRequest">requested field for a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ChargeOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiSync.UpdateCharge(System.String,Conekta.net.Model.ChargeUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update a charge
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeUpdateRequest">requested field for update a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ChargeResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiSync.UpdateChargeWithHttpInfo(System.String,Conekta.net.Model.ChargeUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update a charge
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeUpdateRequest">requested field for update a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ChargeResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IChargesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiAsync.GetChargesAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get A List of Charges
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetChargesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiAsync.GetChargesWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get A List of Charges
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetChargesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiAsync.OrdersCreateChargeAsync(System.String,Conekta.net.Model.ChargeRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create charge
            </summary>
            <remarks>
            Create charge for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeRequest">requested field for a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ChargeOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiAsync.OrdersCreateChargeWithHttpInfoAsync(System.String,Conekta.net.Model.ChargeRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create charge
            </summary>
            <remarks>
            Create charge for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeRequest">requested field for a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ChargeOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiAsync.UpdateChargeAsync(System.String,Conekta.net.Model.ChargeUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update a charge
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeUpdateRequest">requested field for update a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ChargeResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IChargesApiAsync.UpdateChargeWithHttpInfoAsync(System.String,Conekta.net.Model.ChargeUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update a charge
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeUpdateRequest">requested field for update a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ChargeResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IChargesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.ChargesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ChargesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ChargesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ChargesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ChargesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.ChargesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.ChargesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.ChargesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.ChargesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.GetCharges(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get A List of Charges 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetChargesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.GetChargesWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get A List of Charges 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetChargesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.GetChargesAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get A List of Charges 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetChargesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.GetChargesWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get A List of Charges 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetChargesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.OrdersCreateCharge(System.String,Conekta.net.Model.ChargeRequest,System.String,System.String,System.Int32)">
            <summary>
            Create charge Create charge for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeRequest">requested field for a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ChargeOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.OrdersCreateChargeWithHttpInfo(System.String,Conekta.net.Model.ChargeRequest,System.String,System.String,System.Int32)">
            <summary>
            Create charge Create charge for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeRequest">requested field for a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ChargeOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.OrdersCreateChargeAsync(System.String,Conekta.net.Model.ChargeRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create charge Create charge for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeRequest">requested field for a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ChargeOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.OrdersCreateChargeWithHttpInfoAsync(System.String,Conekta.net.Model.ChargeRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create charge Create charge for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeRequest">requested field for a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ChargeOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.UpdateCharge(System.String,Conekta.net.Model.ChargeUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update a charge 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeUpdateRequest">requested field for update a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ChargeResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.UpdateChargeWithHttpInfo(System.String,Conekta.net.Model.ChargeUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update a charge 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeUpdateRequest">requested field for update a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ChargeResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.UpdateChargeAsync(System.String,Conekta.net.Model.ChargeUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update a charge 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeUpdateRequest">requested field for update a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ChargeResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ChargesApi.UpdateChargeWithHttpInfoAsync(System.String,Conekta.net.Model.ChargeUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update a charge 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="chargeUpdateRequest">requested field for update a charge</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ChargeResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ICompaniesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ICompaniesApiSync.GetCompanies(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Companies
            </summary>
            <remarks>
            Consume the list of child companies.  This is used for holding companies with several child entities.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetCompaniesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICompaniesApiSync.GetCompaniesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Companies
            </summary>
            <remarks>
            Consume the list of child companies.  This is used for holding companies with several child entities.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetCompaniesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICompaniesApiSync.GetCompany(System.String,System.String,System.Int32)">
            <summary>
            Get Company
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CompanyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICompaniesApiSync.GetCompanyWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Get Company
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CompanyResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.ICompaniesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ICompaniesApiAsync.GetCompaniesAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Companies
            </summary>
            <remarks>
            Consume the list of child companies.  This is used for holding companies with several child entities.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetCompaniesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICompaniesApiAsync.GetCompaniesWithHttpInfoAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Companies
            </summary>
            <remarks>
            Consume the list of child companies.  This is used for holding companies with several child entities.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetCompaniesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ICompaniesApiAsync.GetCompanyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Company
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CompanyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICompaniesApiAsync.GetCompanyWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Company
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CompanyResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ICompaniesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.CompaniesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.CompaniesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.CompaniesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.CompaniesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.CompaniesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.CompaniesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.CompaniesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.CompaniesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.CompaniesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.GetCompanies(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Companies Consume the list of child companies.  This is used for holding companies with several child entities.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetCompaniesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.GetCompaniesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Companies Consume the list of child companies.  This is used for holding companies with several child entities.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetCompaniesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.GetCompaniesAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Companies Consume the list of child companies.  This is used for holding companies with several child entities.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetCompaniesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.GetCompaniesWithHttpInfoAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Companies Consume the list of child companies.  This is used for holding companies with several child entities.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetCompaniesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.GetCompany(System.String,System.String,System.Int32)">
            <summary>
            Get Company 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CompanyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.GetCompanyWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Get Company 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CompanyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.GetCompanyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Company 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CompanyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CompaniesApi.GetCompanyWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Company 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CompanyResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ICustomersApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.CreateCustomer(Conekta.net.Model.Customer,System.String,System.String,System.Int32)">
            <summary>
            Create customer
            </summary>
            <remarks>
            The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.CreateCustomerWithHttpInfo(Conekta.net.Model.Customer,System.String,System.String,System.Int32)">
            <summary>
            Create customer
            </summary>
            <remarks>
            The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.CreateCustomerFiscalEntities(System.String,Conekta.net.Model.CustomerFiscalEntitiesRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Fiscal Entity
            </summary>
            <remarks>
            Create Fiscal entity resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CreateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.CreateCustomerFiscalEntitiesWithHttpInfo(System.String,Conekta.net.Model.CustomerFiscalEntitiesRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Fiscal Entity
            </summary>
            <remarks>
            Create Fiscal entity resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CreateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.DeleteCustomerById(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Customer
            </summary>
            <remarks>
            Deleted a customer resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.DeleteCustomerByIdWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Customer
            </summary>
            <remarks>
            Deleted a customer resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.GetCustomerById(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Customer
            </summary>
            <remarks>
            Gets a customer resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.GetCustomerByIdWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Customer
            </summary>
            <remarks>
            Gets a customer resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.GetCustomers(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of customers
            </summary>
            <remarks>
            The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.GetCustomersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of customers
            </summary>
            <remarks>
            The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.UpdateCustomer(System.String,Conekta.net.Model.UpdateCustomer,System.String,System.String,System.Int32)">
            <summary>
            Update customer
            </summary>
            <remarks>
            You can update customer-related data
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="updateCustomer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.UpdateCustomerWithHttpInfo(System.String,Conekta.net.Model.UpdateCustomer,System.String,System.String,System.Int32)">
            <summary>
            Update customer
            </summary>
            <remarks>
            You can update customer-related data
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="updateCustomer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.UpdateCustomerFiscalEntities(System.String,System.String,Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest,System.String,System.String,System.Int32)">
            <summary>
            Update  Fiscal Entity
            </summary>
            <remarks>
            Update Fiscal Entity resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="fiscalEntitiesId">identifier</param>
            <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiSync.UpdateCustomerFiscalEntitiesWithHttpInfo(System.String,System.String,Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest,System.String,System.String,System.Int32)">
            <summary>
            Update  Fiscal Entity
            </summary>
            <remarks>
            Update Fiscal Entity resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="fiscalEntitiesId">identifier</param>
            <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.ICustomersApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.CreateCustomerAsync(Conekta.net.Model.Customer,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create customer
            </summary>
            <remarks>
            The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.CreateCustomerWithHttpInfoAsync(Conekta.net.Model.Customer,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create customer
            </summary>
            <remarks>
            The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.CreateCustomerFiscalEntitiesAsync(System.String,Conekta.net.Model.CustomerFiscalEntitiesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Fiscal Entity
            </summary>
            <remarks>
            Create Fiscal entity resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CreateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.CreateCustomerFiscalEntitiesWithHttpInfoAsync(System.String,Conekta.net.Model.CustomerFiscalEntitiesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Fiscal Entity
            </summary>
            <remarks>
            Create Fiscal entity resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CreateCustomerFiscalEntitiesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.DeleteCustomerByIdAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Customer
            </summary>
            <remarks>
            Deleted a customer resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.DeleteCustomerByIdWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Customer
            </summary>
            <remarks>
            Deleted a customer resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.GetCustomerByIdAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Customer
            </summary>
            <remarks>
            Gets a customer resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.GetCustomerByIdWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Customer
            </summary>
            <remarks>
            Gets a customer resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.GetCustomersAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of customers
            </summary>
            <remarks>
            The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.GetCustomersWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of customers
            </summary>
            <remarks>
            The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomersResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.UpdateCustomerAsync(System.String,Conekta.net.Model.UpdateCustomer,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update customer
            </summary>
            <remarks>
            You can update customer-related data
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="updateCustomer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.UpdateCustomerWithHttpInfoAsync(System.String,Conekta.net.Model.UpdateCustomer,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update customer
            </summary>
            <remarks>
            You can update customer-related data
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="updateCustomer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.UpdateCustomerFiscalEntitiesAsync(System.String,System.String,Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update  Fiscal Entity
            </summary>
            <remarks>
            Update Fiscal Entity resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="fiscalEntitiesId">identifier</param>
            <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ICustomersApiAsync.UpdateCustomerFiscalEntitiesWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update  Fiscal Entity
            </summary>
            <remarks>
            Update Fiscal Entity resource that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="fiscalEntitiesId">identifier</param>
            <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateCustomerFiscalEntitiesResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ICustomersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.CustomersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.CustomersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.CustomersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.CustomersApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.CustomersApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.CustomersApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.CustomersApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.CustomersApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.CustomersApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.CreateCustomer(Conekta.net.Model.Customer,System.String,System.String,System.Int32)">
            <summary>
            Create customer The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.CreateCustomerWithHttpInfo(Conekta.net.Model.Customer,System.String,System.String,System.Int32)">
            <summary>
            Create customer The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.CreateCustomerAsync(Conekta.net.Model.Customer,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create customer The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.CreateCustomerWithHttpInfoAsync(Conekta.net.Model.Customer,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create customer The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="customer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.CreateCustomerFiscalEntities(System.String,Conekta.net.Model.CustomerFiscalEntitiesRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Fiscal Entity Create Fiscal entity resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CreateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.CreateCustomerFiscalEntitiesWithHttpInfo(System.String,Conekta.net.Model.CustomerFiscalEntitiesRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Fiscal Entity Create Fiscal entity resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CreateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.CreateCustomerFiscalEntitiesAsync(System.String,Conekta.net.Model.CustomerFiscalEntitiesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Fiscal Entity Create Fiscal entity resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CreateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.CreateCustomerFiscalEntitiesWithHttpInfoAsync(System.String,Conekta.net.Model.CustomerFiscalEntitiesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Fiscal Entity Create Fiscal entity resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CreateCustomerFiscalEntitiesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.DeleteCustomerById(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Customer Deleted a customer resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.DeleteCustomerByIdWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Customer Deleted a customer resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.DeleteCustomerByIdAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Customer Deleted a customer resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.DeleteCustomerByIdWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Customer Deleted a customer resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.GetCustomerById(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Customer Gets a customer resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.GetCustomerByIdWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Customer Gets a customer resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.GetCustomerByIdAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Customer Gets a customer resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.GetCustomerByIdWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Customer Gets a customer resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.GetCustomers(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of customers The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.GetCustomersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of customers The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.GetCustomersAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of customers The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.GetCustomersWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of customers The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomersResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.UpdateCustomer(System.String,Conekta.net.Model.UpdateCustomer,System.String,System.String,System.Int32)">
            <summary>
            Update customer You can update customer-related data
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="updateCustomer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.UpdateCustomerWithHttpInfo(System.String,Conekta.net.Model.UpdateCustomer,System.String,System.String,System.Int32)">
            <summary>
            Update customer You can update customer-related data
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="updateCustomer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.UpdateCustomerAsync(System.String,Conekta.net.Model.UpdateCustomer,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update customer You can update customer-related data
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="updateCustomer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.UpdateCustomerWithHttpInfoAsync(System.String,Conekta.net.Model.UpdateCustomer,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update customer You can update customer-related data
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="updateCustomer">requested field for customer</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.UpdateCustomerFiscalEntities(System.String,System.String,Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest,System.String,System.String,System.Int32)">
            <summary>
            Update  Fiscal Entity Update Fiscal Entity resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="fiscalEntitiesId">identifier</param>
            <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.UpdateCustomerFiscalEntitiesWithHttpInfo(System.String,System.String,Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest,System.String,System.String,System.Int32)">
            <summary>
            Update  Fiscal Entity Update Fiscal Entity resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="fiscalEntitiesId">identifier</param>
            <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.UpdateCustomerFiscalEntitiesAsync(System.String,System.String,Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update  Fiscal Entity Update Fiscal Entity resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="fiscalEntitiesId">identifier</param>
            <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateCustomerFiscalEntitiesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.CustomersApi.UpdateCustomerFiscalEntitiesWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update  Fiscal Entity Update Fiscal Entity resource that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="fiscalEntitiesId">identifier</param>
            <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateCustomerFiscalEntitiesResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IDiscountsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersCreateDiscountLine(System.String,Conekta.net.Model.OrderDiscountLinesRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Discount
            </summary>
            <remarks>
            Create discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersCreateDiscountLineWithHttpInfo(System.String,Conekta.net.Model.OrderDiscountLinesRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Discount
            </summary>
            <remarks>
            Create discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersDeleteDiscountLines(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Discount
            </summary>
            <remarks>
            Delete an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersDeleteDiscountLinesWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Discount
            </summary>
            <remarks>
            Delete an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersGetDiscountLine(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Discount
            </summary>
            <remarks>
            Get an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersGetDiscountLineWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Discount
            </summary>
            <remarks>
            Get an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersGetDiscountLines(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a List of Discount
            </summary>
            <remarks>
            Get discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetOrderDiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersGetDiscountLinesWithHttpInfo(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a List of Discount
            </summary>
            <remarks>
            Get discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetOrderDiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersUpdateDiscountLines(System.String,System.String,Conekta.net.Model.UpdateOrderDiscountLinesRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Discount
            </summary>
            <remarks>
            Update an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="updateOrderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiSync.OrdersUpdateDiscountLinesWithHttpInfo(System.String,System.String,Conekta.net.Model.UpdateOrderDiscountLinesRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Discount
            </summary>
            <remarks>
            Update an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="updateOrderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DiscountLinesResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IDiscountsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersCreateDiscountLineAsync(System.String,Conekta.net.Model.OrderDiscountLinesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Discount
            </summary>
            <remarks>
            Create discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersCreateDiscountLineWithHttpInfoAsync(System.String,Conekta.net.Model.OrderDiscountLinesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Discount
            </summary>
            <remarks>
            Create discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DiscountLinesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersDeleteDiscountLinesAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Discount
            </summary>
            <remarks>
            Delete an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersDeleteDiscountLinesWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Discount
            </summary>
            <remarks>
            Delete an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DiscountLinesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersGetDiscountLineAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Discount
            </summary>
            <remarks>
            Get an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersGetDiscountLineWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Discount
            </summary>
            <remarks>
            Get an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DiscountLinesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersGetDiscountLinesAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a List of Discount
            </summary>
            <remarks>
            Get discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetOrderDiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersGetDiscountLinesWithHttpInfoAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a List of Discount
            </summary>
            <remarks>
            Get discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetOrderDiscountLinesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersUpdateDiscountLinesAsync(System.String,System.String,Conekta.net.Model.UpdateOrderDiscountLinesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Discount
            </summary>
            <remarks>
            Update an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="updateOrderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IDiscountsApiAsync.OrdersUpdateDiscountLinesWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.UpdateOrderDiscountLinesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Discount
            </summary>
            <remarks>
            Update an existing discount lines for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="updateOrderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DiscountLinesResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IDiscountsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.DiscountsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.DiscountsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.DiscountsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.DiscountsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.DiscountsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.DiscountsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.DiscountsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.DiscountsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.DiscountsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersCreateDiscountLine(System.String,Conekta.net.Model.OrderDiscountLinesRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Discount Create discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersCreateDiscountLineWithHttpInfo(System.String,Conekta.net.Model.OrderDiscountLinesRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Discount Create discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersCreateDiscountLineAsync(System.String,Conekta.net.Model.OrderDiscountLinesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Discount Create discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersCreateDiscountLineWithHttpInfoAsync(System.String,Conekta.net.Model.OrderDiscountLinesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Discount Create discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DiscountLinesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersDeleteDiscountLines(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Discount Delete an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersDeleteDiscountLinesWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Discount Delete an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersDeleteDiscountLinesAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Discount Delete an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersDeleteDiscountLinesWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Discount Delete an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DiscountLinesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersGetDiscountLine(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Discount Get an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersGetDiscountLineWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Discount Get an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersGetDiscountLineAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Discount Get an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersGetDiscountLineWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Discount Get an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DiscountLinesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersGetDiscountLines(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a List of Discount Get discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetOrderDiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersGetDiscountLinesWithHttpInfo(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a List of Discount Get discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetOrderDiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersGetDiscountLinesAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a List of Discount Get discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetOrderDiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersGetDiscountLinesWithHttpInfoAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a List of Discount Get discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetOrderDiscountLinesResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersUpdateDiscountLines(System.String,System.String,Conekta.net.Model.UpdateOrderDiscountLinesRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Discount Update an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="updateOrderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersUpdateDiscountLinesWithHttpInfo(System.String,System.String,Conekta.net.Model.UpdateOrderDiscountLinesRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Discount Update an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="updateOrderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersUpdateDiscountLinesAsync(System.String,System.String,Conekta.net.Model.UpdateOrderDiscountLinesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Discount Update an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="updateOrderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of DiscountLinesResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.DiscountsApi.OrdersUpdateDiscountLinesWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.UpdateOrderDiscountLinesRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Discount Update an existing discount lines for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="discountLinesId">discount line id identifier</param>
            <param name="updateOrderDiscountLinesRequest">requested field for a discount lines</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (DiscountLinesResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IEventsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiSync.GetEvent(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Event
            </summary>
            <remarks>
            Returns a single event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>EventResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiSync.GetEventWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Event
            </summary>
            <remarks>
            Returns a single event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of EventResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiSync.GetEvents(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get list of Events
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiSync.GetEventsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get list of Events
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiSync.ResendEvent(System.String,System.String,System.String,System.Int32)">
            <summary>
            Resend Event
            </summary>
            <remarks>
            Try to send an event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="eventId">event identifier</param>
            <param name="webhookLogId">webhook log identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>EventsResendResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiSync.ResendEventWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Resend Event
            </summary>
            <remarks>
            Try to send an event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="eventId">event identifier</param>
            <param name="webhookLogId">webhook log identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of EventsResendResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IEventsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiAsync.GetEventAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Event
            </summary>
            <remarks>
            Returns a single event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of EventResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiAsync.GetEventWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Event
            </summary>
            <remarks>
            Returns a single event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (EventResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiAsync.GetEventsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of Events
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiAsync.GetEventsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of Events
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetEventsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiAsync.ResendEventAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resend Event
            </summary>
            <remarks>
            Try to send an event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="eventId">event identifier</param>
            <param name="webhookLogId">webhook log identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of EventsResendResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IEventsApiAsync.ResendEventWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resend Event
            </summary>
            <remarks>
            Try to send an event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="eventId">event identifier</param>
            <param name="webhookLogId">webhook log identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (EventsResendResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IEventsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.EventsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.EventsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.EventsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.EventsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.EventsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.EventsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.EventsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.EventsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.EventsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.GetEvent(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Event Returns a single event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>EventResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.GetEventWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Event Returns a single event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of EventResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.GetEventAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Event Returns a single event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of EventResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.GetEventWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Event Returns a single event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (EventResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.GetEvents(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get list of Events 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.GetEventsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get list of Events 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.GetEventsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of Events 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.GetEventsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get list of Events 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetEventsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.ResendEvent(System.String,System.String,System.String,System.Int32)">
            <summary>
            Resend Event Try to send an event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="eventId">event identifier</param>
            <param name="webhookLogId">webhook log identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>EventsResendResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.ResendEventWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Resend Event Try to send an event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="eventId">event identifier</param>
            <param name="webhookLogId">webhook log identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of EventsResendResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.ResendEventAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resend Event Try to send an event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="eventId">event identifier</param>
            <param name="webhookLogId">webhook log identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of EventsResendResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.EventsApi.ResendEventWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resend Event Try to send an event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="eventId">event identifier</param>
            <param name="webhookLogId">webhook log identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (EventsResendResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ILogsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ILogsApiSync.GetLogById(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Log
            </summary>
            <remarks>
            Get the details of a specific log
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>LogResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ILogsApiSync.GetLogByIdWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Log
            </summary>
            <remarks>
            Get the details of a specific log
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of LogResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ILogsApiSync.GetLogs(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List Of Logs
            </summary>
            <remarks>
            Get log details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>LogsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ILogsApiSync.GetLogsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List Of Logs
            </summary>
            <remarks>
            Get log details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of LogsResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.ILogsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ILogsApiAsync.GetLogByIdAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Log
            </summary>
            <remarks>
            Get the details of a specific log
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of LogResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ILogsApiAsync.GetLogByIdWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Log
            </summary>
            <remarks>
            Get the details of a specific log
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (LogResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ILogsApiAsync.GetLogsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List Of Logs
            </summary>
            <remarks>
            Get log details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of LogsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ILogsApiAsync.GetLogsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List Of Logs
            </summary>
            <remarks>
            Get log details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (LogsResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ILogsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.LogsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.LogsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.LogsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.LogsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.LogsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.LogsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.LogsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.LogsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.LogsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.GetLogById(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Log Get the details of a specific log
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>LogResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.GetLogByIdWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Log Get the details of a specific log
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of LogResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.GetLogByIdAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Log Get the details of a specific log
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of LogResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.GetLogByIdWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Log Get the details of a specific log
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (LogResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.GetLogs(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List Of Logs Get log details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>LogsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.GetLogsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List Of Logs Get log details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of LogsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.GetLogsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List Of Logs Get log details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of LogsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.LogsApi.GetLogsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List Of Logs Get log details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (LogsResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IOrdersApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.CancelOrder(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Order
            </summary>
            <remarks>
            Cancel an order that has been previously created.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.CancelOrderWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Order
            </summary>
            <remarks>
            Cancel an order that has been previously created.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.CreateOrder(Conekta.net.Model.OrderRequest,System.String,System.String,System.Int32)">
            <summary>
            Create order
            </summary>
            <remarks>
            Create a new order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="orderRequest">requested field for order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.CreateOrderWithHttpInfo(Conekta.net.Model.OrderRequest,System.String,System.String,System.Int32)">
            <summary>
            Create order
            </summary>
            <remarks>
            Create a new order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="orderRequest">requested field for order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.GetOrderById(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Order
            </summary>
            <remarks>
            Info for a specific order
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.GetOrderByIdWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Order
            </summary>
            <remarks>
            Info for a specific order
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.GetOrders(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of Orders
            </summary>
            <remarks>
            Get order details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetOrdersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.GetOrdersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of Orders
            </summary>
            <remarks>
            Get order details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetOrdersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.OrderCancelRefund(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Refund
            </summary>
            <remarks>
            A refunded order describes the items, amount, and reason an order is being refunded.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="refundId">refund identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.OrderCancelRefundWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Refund
            </summary>
            <remarks>
            A refunded order describes the items, amount, and reason an order is being refunded.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="refundId">refund identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.OrderRefund(System.String,Conekta.net.Model.OrderRefundRequest,System.String,System.String,System.Int32)">
            <summary>
            Refund Order
            </summary>
            <remarks>
            A refunded order describes the items, amount, and reason an order is being refunded.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderRefundRequest">requested field for a refund</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.OrderRefundWithHttpInfo(System.String,Conekta.net.Model.OrderRefundRequest,System.String,System.String,System.Int32)">
            <summary>
            Refund Order
            </summary>
            <remarks>
            A refunded order describes the items, amount, and reason an order is being refunded.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderRefundRequest">requested field for a refund</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.OrdersCreateCapture(System.String,System.String,System.String,Conekta.net.Model.OrderCaptureRequest,System.Int32)">
            <summary>
            Capture Order
            </summary>
            <remarks>
            Processes an order that has been previously authorized.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="orderCaptureRequest">requested fields for capture order (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.OrdersCreateCaptureWithHttpInfo(System.String,System.String,System.String,Conekta.net.Model.OrderCaptureRequest,System.Int32)">
            <summary>
            Capture Order
            </summary>
            <remarks>
            Processes an order that has been previously authorized.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="orderCaptureRequest">requested fields for capture order (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.UpdateOrder(System.String,Conekta.net.Model.OrderUpdateRequest,System.String,System.Int32)">
            <summary>
            Update Order
            </summary>
            <remarks>
            Update an existing Order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderUpdateRequest">requested field for an order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiSync.UpdateOrderWithHttpInfo(System.String,Conekta.net.Model.OrderUpdateRequest,System.String,System.Int32)">
            <summary>
            Update Order
            </summary>
            <remarks>
            Update an existing Order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderUpdateRequest">requested field for an order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IOrdersApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.CancelOrderAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Order
            </summary>
            <remarks>
            Cancel an order that has been previously created.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.CancelOrderWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Order
            </summary>
            <remarks>
            Cancel an order that has been previously created.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.CreateOrderAsync(Conekta.net.Model.OrderRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create order
            </summary>
            <remarks>
            Create a new order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="orderRequest">requested field for order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.CreateOrderWithHttpInfoAsync(Conekta.net.Model.OrderRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create order
            </summary>
            <remarks>
            Create a new order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="orderRequest">requested field for order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.GetOrderByIdAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Order
            </summary>
            <remarks>
            Info for a specific order
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.GetOrderByIdWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Order
            </summary>
            <remarks>
            Info for a specific order
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.GetOrdersAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of Orders
            </summary>
            <remarks>
            Get order details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetOrdersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.GetOrdersWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of Orders
            </summary>
            <remarks>
            Get order details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetOrdersResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.OrderCancelRefundAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Refund
            </summary>
            <remarks>
            A refunded order describes the items, amount, and reason an order is being refunded.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="refundId">refund identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.OrderCancelRefundWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Refund
            </summary>
            <remarks>
            A refunded order describes the items, amount, and reason an order is being refunded.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="refundId">refund identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.OrderRefundAsync(System.String,Conekta.net.Model.OrderRefundRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Refund Order
            </summary>
            <remarks>
            A refunded order describes the items, amount, and reason an order is being refunded.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderRefundRequest">requested field for a refund</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.OrderRefundWithHttpInfoAsync(System.String,Conekta.net.Model.OrderRefundRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Refund Order
            </summary>
            <remarks>
            A refunded order describes the items, amount, and reason an order is being refunded.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderRefundRequest">requested field for a refund</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.OrdersCreateCaptureAsync(System.String,System.String,System.String,Conekta.net.Model.OrderCaptureRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Capture Order
            </summary>
            <remarks>
            Processes an order that has been previously authorized.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="orderCaptureRequest">requested fields for capture order (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.OrdersCreateCaptureWithHttpInfoAsync(System.String,System.String,System.String,Conekta.net.Model.OrderCaptureRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Capture Order
            </summary>
            <remarks>
            Processes an order that has been previously authorized.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="orderCaptureRequest">requested fields for capture order (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.UpdateOrderAsync(System.String,Conekta.net.Model.OrderUpdateRequest,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Order
            </summary>
            <remarks>
            Update an existing Order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderUpdateRequest">requested field for an order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IOrdersApiAsync.UpdateOrderWithHttpInfoAsync(System.String,Conekta.net.Model.OrderUpdateRequest,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Order
            </summary>
            <remarks>
            Update an existing Order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderUpdateRequest">requested field for an order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IOrdersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.OrdersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.OrdersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.OrdersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.OrdersApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.OrdersApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.OrdersApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.OrdersApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.OrdersApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.OrdersApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.CancelOrder(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Order Cancel an order that has been previously created.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.CancelOrderWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Order Cancel an order that has been previously created.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.CancelOrderAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Order Cancel an order that has been previously created.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.CancelOrderWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Order Cancel an order that has been previously created.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.CreateOrder(Conekta.net.Model.OrderRequest,System.String,System.String,System.Int32)">
            <summary>
            Create order Create a new order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="orderRequest">requested field for order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.CreateOrderWithHttpInfo(Conekta.net.Model.OrderRequest,System.String,System.String,System.Int32)">
            <summary>
            Create order Create a new order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="orderRequest">requested field for order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.CreateOrderAsync(Conekta.net.Model.OrderRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create order Create a new order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="orderRequest">requested field for order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.CreateOrderWithHttpInfoAsync(Conekta.net.Model.OrderRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create order Create a new order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="orderRequest">requested field for order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.GetOrderById(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Order Info for a specific order
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.GetOrderByIdWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Order Info for a specific order
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.GetOrderByIdAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Order Info for a specific order
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.GetOrderByIdWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Order Info for a specific order
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.GetOrders(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of Orders Get order details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetOrdersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.GetOrdersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of Orders Get order details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetOrdersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.GetOrdersAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of Orders Get order details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetOrdersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.GetOrdersWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of Orders Get order details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetOrdersResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrderCancelRefund(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Refund A refunded order describes the items, amount, and reason an order is being refunded.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="refundId">refund identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrderCancelRefundWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Refund A refunded order describes the items, amount, and reason an order is being refunded.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="refundId">refund identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrderCancelRefundAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Refund A refunded order describes the items, amount, and reason an order is being refunded.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="refundId">refund identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrderCancelRefundWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Refund A refunded order describes the items, amount, and reason an order is being refunded.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="refundId">refund identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrderRefund(System.String,Conekta.net.Model.OrderRefundRequest,System.String,System.String,System.Int32)">
            <summary>
            Refund Order A refunded order describes the items, amount, and reason an order is being refunded.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderRefundRequest">requested field for a refund</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrderRefundWithHttpInfo(System.String,Conekta.net.Model.OrderRefundRequest,System.String,System.String,System.Int32)">
            <summary>
            Refund Order A refunded order describes the items, amount, and reason an order is being refunded.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderRefundRequest">requested field for a refund</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrderRefundAsync(System.String,Conekta.net.Model.OrderRefundRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Refund Order A refunded order describes the items, amount, and reason an order is being refunded.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderRefundRequest">requested field for a refund</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrderRefundWithHttpInfoAsync(System.String,Conekta.net.Model.OrderRefundRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Refund Order A refunded order describes the items, amount, and reason an order is being refunded.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderRefundRequest">requested field for a refund</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrdersCreateCapture(System.String,System.String,System.String,Conekta.net.Model.OrderCaptureRequest,System.Int32)">
            <summary>
            Capture Order Processes an order that has been previously authorized.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="orderCaptureRequest">requested fields for capture order (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrdersCreateCaptureWithHttpInfo(System.String,System.String,System.String,Conekta.net.Model.OrderCaptureRequest,System.Int32)">
            <summary>
            Capture Order Processes an order that has been previously authorized.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="orderCaptureRequest">requested fields for capture order (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrdersCreateCaptureAsync(System.String,System.String,System.String,Conekta.net.Model.OrderCaptureRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Capture Order Processes an order that has been previously authorized.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="orderCaptureRequest">requested fields for capture order (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.OrdersCreateCaptureWithHttpInfoAsync(System.String,System.String,System.String,Conekta.net.Model.OrderCaptureRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Capture Order Processes an order that has been previously authorized.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="orderCaptureRequest">requested fields for capture order (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.UpdateOrder(System.String,Conekta.net.Model.OrderUpdateRequest,System.String,System.Int32)">
            <summary>
            Update Order Update an existing Order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderUpdateRequest">requested field for an order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.UpdateOrderWithHttpInfo(System.String,Conekta.net.Model.OrderUpdateRequest,System.String,System.Int32)">
            <summary>
            Update Order Update an existing Order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderUpdateRequest">requested field for an order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.UpdateOrderAsync(System.String,Conekta.net.Model.OrderUpdateRequest,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Order Update an existing Order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderUpdateRequest">requested field for an order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of OrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.OrdersApi.UpdateOrderWithHttpInfoAsync(System.String,Conekta.net.Model.OrderUpdateRequest,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Order Update an existing Order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderUpdateRequest">requested field for an order</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (OrderResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IPaymentLinkApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.CancelCheckout(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Payment Link
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.CancelCheckoutWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Payment Link
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.CreateCheckout(Conekta.net.Model.Checkout,System.String,System.String,System.Int32)">
            <summary>
            Create Unique Payment Link
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="checkout">requested field for checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.CreateCheckoutWithHttpInfo(Conekta.net.Model.Checkout,System.String,System.String,System.Int32)">
            <summary>
            Create Unique Payment Link
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="checkout">requested field for checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.EmailCheckout(System.String,Conekta.net.Model.EmailCheckoutRequest,System.String,System.String,System.Int32)">
            <summary>
            Send an email
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="emailCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.EmailCheckoutWithHttpInfo(System.String,Conekta.net.Model.EmailCheckoutRequest,System.String,System.String,System.Int32)">
            <summary>
            Send an email
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="emailCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.GetCheckout(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a payment link by ID
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.GetCheckoutWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a payment link by ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.GetCheckouts(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of payment links
            </summary>
            <remarks>
            Returns a list of links generated by the merchant
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.GetCheckoutsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of payment links
            </summary>
            <remarks>
            Returns a list of links generated by the merchant
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.SmsCheckout(System.String,Conekta.net.Model.SmsCheckoutRequest,System.String,System.String,System.Int32)">
            <summary>
            Send an sms
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="smsCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiSync.SmsCheckoutWithHttpInfo(System.String,Conekta.net.Model.SmsCheckoutRequest,System.String,System.String,System.Int32)">
            <summary>
            Send an sms
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="smsCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IPaymentLinkApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.CancelCheckoutAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Payment Link
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.CancelCheckoutWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Payment Link
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.CreateCheckoutAsync(Conekta.net.Model.Checkout,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Unique Payment Link
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="checkout">requested field for checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.CreateCheckoutWithHttpInfoAsync(Conekta.net.Model.Checkout,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Unique Payment Link
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="checkout">requested field for checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.EmailCheckoutAsync(System.String,Conekta.net.Model.EmailCheckoutRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send an email
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="emailCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.EmailCheckoutWithHttpInfoAsync(System.String,Conekta.net.Model.EmailCheckoutRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send an email
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="emailCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.GetCheckoutAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a payment link by ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.GetCheckoutWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a payment link by ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.GetCheckoutsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of payment links
            </summary>
            <remarks>
            Returns a list of links generated by the merchant
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.GetCheckoutsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of payment links
            </summary>
            <remarks>
            Returns a list of links generated by the merchant
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.SmsCheckoutAsync(System.String,Conekta.net.Model.SmsCheckoutRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send an sms
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="smsCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentLinkApiAsync.SmsCheckoutWithHttpInfoAsync(System.String,Conekta.net.Model.SmsCheckoutRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send an sms
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="smsCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IPaymentLinkApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.PaymentLinkApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PaymentLinkApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PaymentLinkApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PaymentLinkApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PaymentLinkApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.PaymentLinkApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.PaymentLinkApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.PaymentLinkApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.PaymentLinkApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.CancelCheckout(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Payment Link 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.CancelCheckoutWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Payment Link 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.CancelCheckoutAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Payment Link 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.CancelCheckoutWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Payment Link 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.CreateCheckout(Conekta.net.Model.Checkout,System.String,System.String,System.Int32)">
            <summary>
            Create Unique Payment Link 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="checkout">requested field for checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.CreateCheckoutWithHttpInfo(Conekta.net.Model.Checkout,System.String,System.String,System.Int32)">
            <summary>
            Create Unique Payment Link 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="checkout">requested field for checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.CreateCheckoutAsync(Conekta.net.Model.Checkout,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Unique Payment Link 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="checkout">requested field for checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.CreateCheckoutWithHttpInfoAsync(Conekta.net.Model.Checkout,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Unique Payment Link 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="checkout">requested field for checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.EmailCheckout(System.String,Conekta.net.Model.EmailCheckoutRequest,System.String,System.String,System.Int32)">
            <summary>
            Send an email 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="emailCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.EmailCheckoutWithHttpInfo(System.String,Conekta.net.Model.EmailCheckoutRequest,System.String,System.String,System.Int32)">
            <summary>
            Send an email 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="emailCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.EmailCheckoutAsync(System.String,Conekta.net.Model.EmailCheckoutRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send an email 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="emailCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.EmailCheckoutWithHttpInfoAsync(System.String,Conekta.net.Model.EmailCheckoutRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send an email 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="emailCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.GetCheckout(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a payment link by ID 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.GetCheckoutWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a payment link by ID 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.GetCheckoutAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a payment link by ID 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.GetCheckoutWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a payment link by ID 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.GetCheckouts(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of payment links Returns a list of links generated by the merchant
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.GetCheckoutsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of payment links Returns a list of links generated by the merchant
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.GetCheckoutsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of payment links Returns a list of links generated by the merchant
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.GetCheckoutsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of payment links Returns a list of links generated by the merchant
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.SmsCheckout(System.String,Conekta.net.Model.SmsCheckoutRequest,System.String,System.String,System.Int32)">
            <summary>
            Send an sms 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="smsCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.SmsCheckoutWithHttpInfo(System.String,Conekta.net.Model.SmsCheckoutRequest,System.String,System.String,System.Int32)">
            <summary>
            Send an sms 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="smsCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.SmsCheckoutAsync(System.String,Conekta.net.Model.SmsCheckoutRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send an sms 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="smsCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CheckoutResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentLinkApi.SmsCheckoutWithHttpInfoAsync(System.String,Conekta.net.Model.SmsCheckoutRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send an sms 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="smsCheckoutRequest">requested field for sms checkout</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CheckoutResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IPaymentMethodsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiSync.CreateCustomerPaymentMethods(System.String,Conekta.net.Model.CreateCustomerPaymentMethodsRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Payment Method
            </summary>
            <remarks>
            Create a payment method for a customer.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CreateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiSync.CreateCustomerPaymentMethodsWithHttpInfo(System.String,Conekta.net.Model.CreateCustomerPaymentMethodsRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Payment Method
            </summary>
            <remarks>
            Create a payment method for a customer.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CreateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiSync.DeleteCustomerPaymentMethods(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Payment Method
            </summary>
            <remarks>
            Delete an existing payment method
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiSync.DeleteCustomerPaymentMethodsWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Payment Method
            </summary>
            <remarks>
            Delete an existing payment method
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiSync.GetCustomerPaymentMethods(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Payment Methods
            </summary>
            <remarks>
            Get a list of Payment Methods
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetPaymentMethodResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiSync.GetCustomerPaymentMethodsWithHttpInfo(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Payment Methods
            </summary>
            <remarks>
            Get a list of Payment Methods
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetPaymentMethodResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiSync.UpdateCustomerPaymentMethods(System.String,System.String,Conekta.net.Model.UpdatePaymentMethods,System.String,System.String,System.Int32)">
            <summary>
            Update Payment Method
            </summary>
            <remarks>
            Gets a payment Method that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="updatePaymentMethods">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiSync.UpdateCustomerPaymentMethodsWithHttpInfo(System.String,System.String,Conekta.net.Model.UpdatePaymentMethods,System.String,System.String,System.Int32)">
            <summary>
            Update Payment Method
            </summary>
            <remarks>
            Gets a payment Method that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="updatePaymentMethods">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IPaymentMethodsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiAsync.CreateCustomerPaymentMethodsAsync(System.String,Conekta.net.Model.CreateCustomerPaymentMethodsRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Payment Method
            </summary>
            <remarks>
            Create a payment method for a customer.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CreateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiAsync.CreateCustomerPaymentMethodsWithHttpInfoAsync(System.String,Conekta.net.Model.CreateCustomerPaymentMethodsRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Payment Method
            </summary>
            <remarks>
            Create a payment method for a customer.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CreateCustomerPaymentMethodsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiAsync.DeleteCustomerPaymentMethodsAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Payment Method
            </summary>
            <remarks>
            Delete an existing payment method
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiAsync.DeleteCustomerPaymentMethodsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Payment Method
            </summary>
            <remarks>
            Delete an existing payment method
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateCustomerPaymentMethodsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiAsync.GetCustomerPaymentMethodsAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Payment Methods
            </summary>
            <remarks>
            Get a list of Payment Methods
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetPaymentMethodResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiAsync.GetCustomerPaymentMethodsWithHttpInfoAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Payment Methods
            </summary>
            <remarks>
            Get a list of Payment Methods
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetPaymentMethodResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiAsync.UpdateCustomerPaymentMethodsAsync(System.String,System.String,Conekta.net.Model.UpdatePaymentMethods,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Payment Method
            </summary>
            <remarks>
            Gets a payment Method that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="updatePaymentMethods">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPaymentMethodsApiAsync.UpdateCustomerPaymentMethodsWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.UpdatePaymentMethods,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Payment Method
            </summary>
            <remarks>
            Gets a payment Method that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="updatePaymentMethods">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateCustomerPaymentMethodsResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IPaymentMethodsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.PaymentMethodsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PaymentMethodsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PaymentMethodsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PaymentMethodsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PaymentMethodsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.PaymentMethodsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.PaymentMethodsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.PaymentMethodsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.PaymentMethodsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.CreateCustomerPaymentMethods(System.String,Conekta.net.Model.CreateCustomerPaymentMethodsRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Payment Method Create a payment method for a customer.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CreateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.CreateCustomerPaymentMethodsWithHttpInfo(System.String,Conekta.net.Model.CreateCustomerPaymentMethodsRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Payment Method Create a payment method for a customer.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CreateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.CreateCustomerPaymentMethodsAsync(System.String,Conekta.net.Model.CreateCustomerPaymentMethodsRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Payment Method Create a payment method for a customer.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CreateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.CreateCustomerPaymentMethodsWithHttpInfoAsync(System.String,Conekta.net.Model.CreateCustomerPaymentMethodsRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Payment Method Create a payment method for a customer.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="createCustomerPaymentMethodsRequest">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CreateCustomerPaymentMethodsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.DeleteCustomerPaymentMethods(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Payment Method Delete an existing payment method
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.DeleteCustomerPaymentMethodsWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Payment Method Delete an existing payment method
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.DeleteCustomerPaymentMethodsAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Payment Method Delete an existing payment method
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.DeleteCustomerPaymentMethodsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Payment Method Delete an existing payment method
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateCustomerPaymentMethodsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.GetCustomerPaymentMethods(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Payment Methods Get a list of Payment Methods
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetPaymentMethodResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.GetCustomerPaymentMethodsWithHttpInfo(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Payment Methods Get a list of Payment Methods
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetPaymentMethodResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.GetCustomerPaymentMethodsAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Payment Methods Get a list of Payment Methods
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetPaymentMethodResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.GetCustomerPaymentMethodsWithHttpInfoAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Payment Methods Get a list of Payment Methods
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetPaymentMethodResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.UpdateCustomerPaymentMethods(System.String,System.String,Conekta.net.Model.UpdatePaymentMethods,System.String,System.String,System.Int32)">
            <summary>
            Update Payment Method Gets a payment Method that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="updatePaymentMethods">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.UpdateCustomerPaymentMethodsWithHttpInfo(System.String,System.String,Conekta.net.Model.UpdatePaymentMethods,System.String,System.String,System.Int32)">
            <summary>
            Update Payment Method Gets a payment Method that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="updatePaymentMethods">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.UpdateCustomerPaymentMethodsAsync(System.String,System.String,Conekta.net.Model.UpdatePaymentMethods,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Payment Method Gets a payment Method that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="updatePaymentMethods">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PaymentMethodsApi.UpdateCustomerPaymentMethodsWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.UpdatePaymentMethods,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Payment Method Gets a payment Method that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="paymentMethodId">Identifier of the payment method</param>
            <param name="updatePaymentMethods">requested field for customer payment methods</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateCustomerPaymentMethodsResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IPlansApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.CreatePlan(Conekta.net.Model.PlanRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Plan
            </summary>
            <remarks>
            Create a new plan for an existing order
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="planRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.CreatePlanWithHttpInfo(Conekta.net.Model.PlanRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Plan
            </summary>
            <remarks>
            Create a new plan for an existing order
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="planRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.DeletePlan(System.String,System.String,System.Int32)">
            <summary>
            Delete Plan
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.DeletePlanWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Delete Plan
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.GetPlan(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Plan
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.GetPlanWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Plan
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.GetPlans(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get A List of Plans
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetPlansResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.GetPlansWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get A List of Plans
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetPlansResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.UpdatePlan(System.String,Conekta.net.Model.PlanUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Plan
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="planUpdateRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiSync.UpdatePlanWithHttpInfo(System.String,Conekta.net.Model.PlanUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Plan
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="planUpdateRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of PlanResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IPlansApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.CreatePlanAsync(Conekta.net.Model.PlanRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Plan
            </summary>
            <remarks>
            Create a new plan for an existing order
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="planRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.CreatePlanWithHttpInfoAsync(Conekta.net.Model.PlanRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Plan
            </summary>
            <remarks>
            Create a new plan for an existing order
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="planRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlanResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.DeletePlanAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Plan
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.DeletePlanWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Plan
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlanResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.GetPlanAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Plan
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.GetPlanWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Plan
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlanResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.GetPlansAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get A List of Plans
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetPlansResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.GetPlansWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get A List of Plans
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetPlansResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.UpdatePlanAsync(System.String,Conekta.net.Model.PlanUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Plan
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="planUpdateRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IPlansApiAsync.UpdatePlanWithHttpInfoAsync(System.String,Conekta.net.Model.PlanUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Plan
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="planUpdateRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlanResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IPlansApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.PlansApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PlansApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PlansApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PlansApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.PlansApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.PlansApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.PlansApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.PlansApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.PlansApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.CreatePlan(Conekta.net.Model.PlanRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Plan Create a new plan for an existing order
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="planRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.CreatePlanWithHttpInfo(Conekta.net.Model.PlanRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Plan Create a new plan for an existing order
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="planRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.CreatePlanAsync(Conekta.net.Model.PlanRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Plan Create a new plan for an existing order
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="planRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.CreatePlanWithHttpInfoAsync(Conekta.net.Model.PlanRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Plan Create a new plan for an existing order
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="planRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlanResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.DeletePlan(System.String,System.String,System.Int32)">
            <summary>
            Delete Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.DeletePlanWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Delete Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.DeletePlanAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.DeletePlanWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlanResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.GetPlan(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.GetPlanWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.GetPlanAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.GetPlanWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlanResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.GetPlans(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get A List of Plans 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetPlansResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.GetPlansWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get A List of Plans 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetPlansResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.GetPlansAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get A List of Plans 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetPlansResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.GetPlansWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get A List of Plans 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetPlansResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.UpdatePlan(System.String,Conekta.net.Model.PlanUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="planUpdateRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.UpdatePlanWithHttpInfo(System.String,Conekta.net.Model.PlanUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="planUpdateRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.UpdatePlanAsync(System.String,Conekta.net.Model.PlanUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="planUpdateRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of PlanResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.PlansApi.UpdatePlanWithHttpInfoAsync(System.String,Conekta.net.Model.PlanUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Plan 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="planUpdateRequest">requested field for plan</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (PlanResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IProductsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiSync.OrdersCreateProduct(System.String,Conekta.net.Model.Product,System.String,System.String,System.Int32)">
            <summary>
            Create Product
            </summary>
            <remarks>
            Create a new product for an existing order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="product">requested field for a product</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiSync.OrdersCreateProductWithHttpInfo(System.String,Conekta.net.Model.Product,System.String,System.String,System.Int32)">
            <summary>
            Create Product
            </summary>
            <remarks>
            Create a new product for an existing order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="product">requested field for a product</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiSync.OrdersDeleteProduct(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Product
            </summary>
            <remarks>
            Delete product for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiSync.OrdersDeleteProductWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Product
            </summary>
            <remarks>
            Delete product for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiSync.OrdersUpdateProduct(System.String,System.String,Conekta.net.Model.UpdateProduct,System.String,System.String,System.Int32)">
            <summary>
            Update Product
            </summary>
            <remarks>
            Update an existing product for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="updateProduct">requested field for products</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiSync.OrdersUpdateProductWithHttpInfo(System.String,System.String,Conekta.net.Model.UpdateProduct,System.String,System.String,System.Int32)">
            <summary>
            Update Product
            </summary>
            <remarks>
            Update an existing product for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="updateProduct">requested field for products</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ProductOrderResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IProductsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiAsync.OrdersCreateProductAsync(System.String,Conekta.net.Model.Product,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Product
            </summary>
            <remarks>
            Create a new product for an existing order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="product">requested field for a product</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiAsync.OrdersCreateProductWithHttpInfoAsync(System.String,Conekta.net.Model.Product,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Product
            </summary>
            <remarks>
            Create a new product for an existing order.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="product">requested field for a product</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ProductOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiAsync.OrdersDeleteProductAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Product
            </summary>
            <remarks>
            Delete product for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiAsync.OrdersDeleteProductWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Product
            </summary>
            <remarks>
            Delete product for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ProductOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiAsync.OrdersUpdateProductAsync(System.String,System.String,Conekta.net.Model.UpdateProduct,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Product
            </summary>
            <remarks>
            Update an existing product for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="updateProduct">requested field for products</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IProductsApiAsync.OrdersUpdateProductWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.UpdateProduct,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Product
            </summary>
            <remarks>
            Update an existing product for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="updateProduct">requested field for products</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ProductOrderResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IProductsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.ProductsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ProductsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ProductsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ProductsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ProductsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.ProductsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.ProductsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.ProductsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.ProductsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersCreateProduct(System.String,Conekta.net.Model.Product,System.String,System.String,System.Int32)">
            <summary>
            Create Product Create a new product for an existing order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="product">requested field for a product</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersCreateProductWithHttpInfo(System.String,Conekta.net.Model.Product,System.String,System.String,System.Int32)">
            <summary>
            Create Product Create a new product for an existing order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="product">requested field for a product</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersCreateProductAsync(System.String,Conekta.net.Model.Product,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Product Create a new product for an existing order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="product">requested field for a product</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersCreateProductWithHttpInfoAsync(System.String,Conekta.net.Model.Product,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Product Create a new product for an existing order.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="product">requested field for a product</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ProductOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersDeleteProduct(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Product Delete product for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersDeleteProductWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Product Delete product for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersDeleteProductAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Product Delete product for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersDeleteProductWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Product Delete product for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ProductOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersUpdateProduct(System.String,System.String,Conekta.net.Model.UpdateProduct,System.String,System.String,System.Int32)">
            <summary>
            Update Product Update an existing product for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="updateProduct">requested field for products</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersUpdateProductWithHttpInfo(System.String,System.String,Conekta.net.Model.UpdateProduct,System.String,System.String,System.Int32)">
            <summary>
            Update Product Update an existing product for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="updateProduct">requested field for products</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersUpdateProductAsync(System.String,System.String,Conekta.net.Model.UpdateProduct,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Product Update an existing product for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="updateProduct">requested field for products</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ProductOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ProductsApi.OrdersUpdateProductWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.UpdateProduct,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Product Update an existing product for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="lineItemId">identifier</param>
            <param name="updateProduct">requested field for products</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ProductOrderResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IShippingContactsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiSync.CreateCustomerShippingContacts(System.String,Conekta.net.Model.CustomerShippingContacts,System.String,System.String,System.Int32)">
            <summary>
            Create a shipping contacts
            </summary>
            <remarks>
            Create a shipping contacts for a customer.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerShippingContacts">requested field for customer shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiSync.CreateCustomerShippingContactsWithHttpInfo(System.String,Conekta.net.Model.CustomerShippingContacts,System.String,System.String,System.Int32)">
            <summary>
            Create a shipping contacts
            </summary>
            <remarks>
            Create a shipping contacts for a customer.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerShippingContacts">requested field for customer shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiSync.DeleteCustomerShippingContacts(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete shipping contacts
            </summary>
            <remarks>
            Delete shipping contact that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiSync.DeleteCustomerShippingContactsWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete shipping contacts
            </summary>
            <remarks>
            Delete shipping contact that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiSync.UpdateCustomerShippingContacts(System.String,System.String,Conekta.net.Model.CustomerUpdateShippingContacts,System.String,System.String,System.Int32)">
            <summary>
            Update shipping contacts
            </summary>
            <remarks>
            Update shipping contact that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="customerUpdateShippingContacts">requested field for customer update shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiSync.UpdateCustomerShippingContactsWithHttpInfo(System.String,System.String,Conekta.net.Model.CustomerUpdateShippingContacts,System.String,System.String,System.Int32)">
            <summary>
            Update shipping contacts
            </summary>
            <remarks>
            Update shipping contact that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="customerUpdateShippingContacts">requested field for customer update shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerShippingContactsResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IShippingContactsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiAsync.CreateCustomerShippingContactsAsync(System.String,Conekta.net.Model.CustomerShippingContacts,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a shipping contacts
            </summary>
            <remarks>
            Create a shipping contacts for a customer.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerShippingContacts">requested field for customer shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiAsync.CreateCustomerShippingContactsWithHttpInfoAsync(System.String,Conekta.net.Model.CustomerShippingContacts,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a shipping contacts
            </summary>
            <remarks>
            Create a shipping contacts for a customer.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerShippingContacts">requested field for customer shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerShippingContactsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiAsync.DeleteCustomerShippingContactsAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete shipping contacts
            </summary>
            <remarks>
            Delete shipping contact that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiAsync.DeleteCustomerShippingContactsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete shipping contacts
            </summary>
            <remarks>
            Delete shipping contact that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerShippingContactsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiAsync.UpdateCustomerShippingContactsAsync(System.String,System.String,Conekta.net.Model.CustomerUpdateShippingContacts,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update shipping contacts
            </summary>
            <remarks>
            Update shipping contact that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="customerUpdateShippingContacts">requested field for customer update shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingContactsApiAsync.UpdateCustomerShippingContactsWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.CustomerUpdateShippingContacts,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update shipping contacts
            </summary>
            <remarks>
            Update shipping contact that corresponds to a customer ID.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="customerUpdateShippingContacts">requested field for customer update shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerShippingContactsResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IShippingContactsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.ShippingContactsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ShippingContactsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ShippingContactsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ShippingContactsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ShippingContactsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.ShippingContactsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.ShippingContactsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.ShippingContactsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.ShippingContactsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.CreateCustomerShippingContacts(System.String,Conekta.net.Model.CustomerShippingContacts,System.String,System.String,System.Int32)">
            <summary>
            Create a shipping contacts Create a shipping contacts for a customer.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerShippingContacts">requested field for customer shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.CreateCustomerShippingContactsWithHttpInfo(System.String,Conekta.net.Model.CustomerShippingContacts,System.String,System.String,System.Int32)">
            <summary>
            Create a shipping contacts Create a shipping contacts for a customer.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerShippingContacts">requested field for customer shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.CreateCustomerShippingContactsAsync(System.String,Conekta.net.Model.CustomerShippingContacts,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a shipping contacts Create a shipping contacts for a customer.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerShippingContacts">requested field for customer shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.CreateCustomerShippingContactsWithHttpInfoAsync(System.String,Conekta.net.Model.CustomerShippingContacts,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a shipping contacts Create a shipping contacts for a customer.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="customerShippingContacts">requested field for customer shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerShippingContactsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.DeleteCustomerShippingContacts(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete shipping contacts Delete shipping contact that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.DeleteCustomerShippingContactsWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete shipping contacts Delete shipping contact that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.DeleteCustomerShippingContactsAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete shipping contacts Delete shipping contact that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.DeleteCustomerShippingContactsWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete shipping contacts Delete shipping contact that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerShippingContactsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.UpdateCustomerShippingContacts(System.String,System.String,Conekta.net.Model.CustomerUpdateShippingContacts,System.String,System.String,System.Int32)">
            <summary>
            Update shipping contacts Update shipping contact that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="customerUpdateShippingContacts">requested field for customer update shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.UpdateCustomerShippingContactsWithHttpInfo(System.String,System.String,Conekta.net.Model.CustomerUpdateShippingContacts,System.String,System.String,System.Int32)">
            <summary>
            Update shipping contacts Update shipping contact that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="customerUpdateShippingContacts">requested field for customer update shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.UpdateCustomerShippingContactsAsync(System.String,System.String,Conekta.net.Model.CustomerUpdateShippingContacts,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update shipping contacts Update shipping contact that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="customerUpdateShippingContacts">requested field for customer update shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of CustomerShippingContactsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingContactsApi.UpdateCustomerShippingContactsWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.CustomerUpdateShippingContacts,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update shipping contacts Update shipping contact that corresponds to a customer ID.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingContactsId">identifier</param>
            <param name="customerUpdateShippingContacts">requested field for customer update shippings contacts</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (CustomerShippingContactsResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IShippingsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiSync.OrdersCreateShipping(System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Shipping
            </summary>
            <remarks>
            Create new shipping for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiSync.OrdersCreateShippingWithHttpInfo(System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Shipping
            </summary>
            <remarks>
            Create new shipping for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiSync.OrdersDeleteShipping(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Shipping
            </summary>
            <remarks>
            Delete shipping
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiSync.OrdersDeleteShippingWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Shipping
            </summary>
            <remarks>
            Delete shipping
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiSync.OrdersUpdateShipping(System.String,System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Shipping
            </summary>
            <remarks>
            Update existing shipping for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiSync.OrdersUpdateShippingWithHttpInfo(System.String,System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Shipping
            </summary>
            <remarks>
            Update existing shipping for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ShippingOrderResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IShippingsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiAsync.OrdersCreateShippingAsync(System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Shipping
            </summary>
            <remarks>
            Create new shipping for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiAsync.OrdersCreateShippingWithHttpInfoAsync(System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Shipping
            </summary>
            <remarks>
            Create new shipping for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ShippingOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiAsync.OrdersDeleteShippingAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Shipping
            </summary>
            <remarks>
            Delete shipping
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiAsync.OrdersDeleteShippingWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Shipping
            </summary>
            <remarks>
            Delete shipping
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ShippingOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiAsync.OrdersUpdateShippingAsync(System.String,System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Shipping
            </summary>
            <remarks>
            Update existing shipping for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IShippingsApiAsync.OrdersUpdateShippingWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Shipping
            </summary>
            <remarks>
            Update existing shipping for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ShippingOrderResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IShippingsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.ShippingsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ShippingsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ShippingsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ShippingsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.ShippingsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.ShippingsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.ShippingsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.ShippingsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.ShippingsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersCreateShipping(System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Shipping Create new shipping for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersCreateShippingWithHttpInfo(System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Shipping Create new shipping for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersCreateShippingAsync(System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Shipping Create new shipping for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersCreateShippingWithHttpInfoAsync(System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Shipping Create new shipping for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ShippingOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersDeleteShipping(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Shipping Delete shipping
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersDeleteShippingWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Shipping Delete shipping
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersDeleteShippingAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Shipping Delete shipping
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersDeleteShippingWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Shipping Delete shipping
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ShippingOrderResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersUpdateShipping(System.String,System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Shipping Update existing shipping for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersUpdateShippingWithHttpInfo(System.String,System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Shipping Update existing shipping for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersUpdateShippingAsync(System.String,System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Shipping Update existing shipping for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ShippingOrderResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ShippingsApi.OrdersUpdateShippingWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.ShippingRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Shipping Update existing shipping for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="shippingId">identifier</param>
            <param name="shippingRequest">requested field for a shipping</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (ShippingOrderResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ISubscriptionsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.CancelSubscription(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Subscription
            </summary>
            <remarks>
            You can cancel the subscription to stop the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.CancelSubscriptionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Subscription
            </summary>
            <remarks>
            You can cancel the subscription to stop the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.CreateSubscription(System.String,Conekta.net.Model.SubscriptionRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Subscription
            </summary>
            <remarks>
            You can create the subscription to include the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionRequest">requested field for subscriptions</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.CreateSubscriptionWithHttpInfo(System.String,Conekta.net.Model.SubscriptionRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Subscription
            </summary>
            <remarks>
            You can create the subscription to include the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionRequest">requested field for subscriptions</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.GetAllEventsFromSubscription(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Events By Subscription
            </summary>
            <remarks>
            You can get the events of the subscription(s) of a client, with the customer id
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.GetAllEventsFromSubscriptionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Events By Subscription
            </summary>
            <remarks>
            You can get the events of the subscription(s) of a client, with the customer id
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.GetSubscription(System.String,System.String,System.Int32)">
            <summary>
            Get Subscription
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.GetSubscriptionWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Get Subscription
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.PauseSubscription(System.String,System.String,System.String,System.Int32)">
            <summary>
            Pause Subscription
            </summary>
            <remarks>
            You can pause the subscription to stop the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.PauseSubscriptionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Pause Subscription
            </summary>
            <remarks>
            You can pause the subscription to stop the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.ResumeSubscription(System.String,System.String,System.String,System.Int32)">
            <summary>
            Resume Subscription
            </summary>
            <remarks>
            You can resume the subscription to start the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.ResumeSubscriptionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Resume Subscription
            </summary>
            <remarks>
            You can resume the subscription to start the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.UpdateSubscription(System.String,Conekta.net.Model.SubscriptionUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Subscription
            </summary>
            <remarks>
            You can modify the subscription to change the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiSync.UpdateSubscriptionWithHttpInfo(System.String,Conekta.net.Model.SubscriptionUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Subscription
            </summary>
            <remarks>
            You can modify the subscription to change the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.ISubscriptionsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.CancelSubscriptionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Subscription
            </summary>
            <remarks>
            You can cancel the subscription to stop the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.CancelSubscriptionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Subscription
            </summary>
            <remarks>
            You can cancel the subscription to stop the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.CreateSubscriptionAsync(System.String,Conekta.net.Model.SubscriptionRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Subscription
            </summary>
            <remarks>
            You can create the subscription to include the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionRequest">requested field for subscriptions</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.CreateSubscriptionWithHttpInfoAsync(System.String,Conekta.net.Model.SubscriptionRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Subscription
            </summary>
            <remarks>
            You can create the subscription to include the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionRequest">requested field for subscriptions</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.GetAllEventsFromSubscriptionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Events By Subscription
            </summary>
            <remarks>
            You can get the events of the subscription(s) of a client, with the customer id
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.GetAllEventsFromSubscriptionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Events By Subscription
            </summary>
            <remarks>
            You can get the events of the subscription(s) of a client, with the customer id
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionEventsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.GetSubscriptionAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Subscription
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.GetSubscriptionWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Subscription
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.PauseSubscriptionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Pause Subscription
            </summary>
            <remarks>
            You can pause the subscription to stop the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.PauseSubscriptionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Pause Subscription
            </summary>
            <remarks>
            You can pause the subscription to stop the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.ResumeSubscriptionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resume Subscription
            </summary>
            <remarks>
            You can resume the subscription to start the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.ResumeSubscriptionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resume Subscription
            </summary>
            <remarks>
            You can resume the subscription to start the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.UpdateSubscriptionAsync(System.String,Conekta.net.Model.SubscriptionUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Subscription
            </summary>
            <remarks>
            You can modify the subscription to change the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ISubscriptionsApiAsync.UpdateSubscriptionWithHttpInfoAsync(System.String,Conekta.net.Model.SubscriptionUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Subscription
            </summary>
            <remarks>
            You can modify the subscription to change the plans that your customers consume
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ISubscriptionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.SubscriptionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.SubscriptionsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.SubscriptionsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.SubscriptionsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.SubscriptionsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.SubscriptionsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.SubscriptionsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.SubscriptionsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.SubscriptionsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.CancelSubscription(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Subscription You can cancel the subscription to stop the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.CancelSubscriptionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cancel Subscription You can cancel the subscription to stop the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.CancelSubscriptionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Subscription You can cancel the subscription to stop the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.CancelSubscriptionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancel Subscription You can cancel the subscription to stop the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.CreateSubscription(System.String,Conekta.net.Model.SubscriptionRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Subscription You can create the subscription to include the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionRequest">requested field for subscriptions</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.CreateSubscriptionWithHttpInfo(System.String,Conekta.net.Model.SubscriptionRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Subscription You can create the subscription to include the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionRequest">requested field for subscriptions</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.CreateSubscriptionAsync(System.String,Conekta.net.Model.SubscriptionRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Subscription You can create the subscription to include the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionRequest">requested field for subscriptions</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.CreateSubscriptionWithHttpInfoAsync(System.String,Conekta.net.Model.SubscriptionRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Subscription You can create the subscription to include the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionRequest">requested field for subscriptions</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.GetAllEventsFromSubscription(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Events By Subscription You can get the events of the subscription(s) of a client, with the customer id
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.GetAllEventsFromSubscriptionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Events By Subscription You can get the events of the subscription(s) of a client, with the customer id
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.GetAllEventsFromSubscriptionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Events By Subscription You can get the events of the subscription(s) of a client, with the customer id
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionEventsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.GetAllEventsFromSubscriptionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Events By Subscription You can get the events of the subscription(s) of a client, with the customer id
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionEventsResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.GetSubscription(System.String,System.String,System.Int32)">
            <summary>
            Get Subscription 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.GetSubscriptionWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Get Subscription 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.GetSubscriptionAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Subscription 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.GetSubscriptionWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Subscription 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.PauseSubscription(System.String,System.String,System.String,System.Int32)">
            <summary>
            Pause Subscription You can pause the subscription to stop the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.PauseSubscriptionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Pause Subscription You can pause the subscription to stop the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.PauseSubscriptionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Pause Subscription You can pause the subscription to stop the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.PauseSubscriptionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Pause Subscription You can pause the subscription to stop the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.ResumeSubscription(System.String,System.String,System.String,System.Int32)">
            <summary>
            Resume Subscription You can resume the subscription to start the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.ResumeSubscriptionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Resume Subscription You can resume the subscription to start the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.ResumeSubscriptionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resume Subscription You can resume the subscription to start the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.ResumeSubscriptionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resume Subscription You can resume the subscription to start the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.UpdateSubscription(System.String,Conekta.net.Model.SubscriptionUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Subscription You can modify the subscription to change the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.UpdateSubscriptionWithHttpInfo(System.String,Conekta.net.Model.SubscriptionUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Subscription You can modify the subscription to change the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.UpdateSubscriptionAsync(System.String,Conekta.net.Model.SubscriptionUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Subscription You can modify the subscription to change the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of SubscriptionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.SubscriptionsApi.UpdateSubscriptionWithHttpInfoAsync(System.String,Conekta.net.Model.SubscriptionUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Subscription You can modify the subscription to change the plans that your customers consume
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="subscriptionUpdateRequest">requested field for update a subscription</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ITaxesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiSync.OrdersCreateTaxes(System.String,Conekta.net.Model.OrderTaxRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Tax
            </summary>
            <remarks>
            Create new taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderTaxRequest">requested field for a taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiSync.OrdersCreateTaxesWithHttpInfo(System.String,Conekta.net.Model.OrderTaxRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Tax
            </summary>
            <remarks>
            Create new taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderTaxRequest">requested field for a taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiSync.OrdersDeleteTaxes(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Tax
            </summary>
            <remarks>
            Delete taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiSync.OrdersDeleteTaxesWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Tax
            </summary>
            <remarks>
            Delete taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiSync.OrdersUpdateTaxes(System.String,System.String,Conekta.net.Model.UpdateOrderTaxRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Tax
            </summary>
            <remarks>
            Update taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="updateOrderTaxRequest">requested field for taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiSync.OrdersUpdateTaxesWithHttpInfo(System.String,System.String,Conekta.net.Model.UpdateOrderTaxRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Tax
            </summary>
            <remarks>
            Update taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="updateOrderTaxRequest">requested field for taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.ITaxesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiAsync.OrdersCreateTaxesAsync(System.String,Conekta.net.Model.OrderTaxRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Tax
            </summary>
            <remarks>
            Create new taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderTaxRequest">requested field for a taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiAsync.OrdersCreateTaxesWithHttpInfoAsync(System.String,Conekta.net.Model.OrderTaxRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Tax
            </summary>
            <remarks>
            Create new taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderTaxRequest">requested field for a taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiAsync.OrdersDeleteTaxesAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Tax
            </summary>
            <remarks>
            Delete taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiAsync.OrdersDeleteTaxesWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Tax
            </summary>
            <remarks>
            Delete taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiAsync.OrdersUpdateTaxesAsync(System.String,System.String,Conekta.net.Model.UpdateOrderTaxRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Tax
            </summary>
            <remarks>
            Update taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="updateOrderTaxRequest">requested field for taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITaxesApiAsync.OrdersUpdateTaxesWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.UpdateOrderTaxRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Tax
            </summary>
            <remarks>
            Update taxes for an existing orden
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="updateOrderTaxRequest">requested field for taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ITaxesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.TaxesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TaxesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TaxesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TaxesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TaxesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.TaxesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.TaxesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.TaxesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.TaxesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersCreateTaxes(System.String,Conekta.net.Model.OrderTaxRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Tax Create new taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderTaxRequest">requested field for a taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersCreateTaxesWithHttpInfo(System.String,Conekta.net.Model.OrderTaxRequest,System.String,System.String,System.Int32)">
            <summary>
            Create Tax Create new taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderTaxRequest">requested field for a taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersCreateTaxesAsync(System.String,Conekta.net.Model.OrderTaxRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Tax Create new taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderTaxRequest">requested field for a taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersCreateTaxesWithHttpInfoAsync(System.String,Conekta.net.Model.OrderTaxRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Tax Create new taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="orderTaxRequest">requested field for a taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersDeleteTaxes(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Tax Delete taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersDeleteTaxesWithHttpInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Delete Tax Delete taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersDeleteTaxesAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Tax Delete taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersDeleteTaxesWithHttpInfoAsync(System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Tax Delete taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersUpdateTaxes(System.String,System.String,Conekta.net.Model.UpdateOrderTaxRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Tax Update taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="updateOrderTaxRequest">requested field for taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersUpdateTaxesWithHttpInfo(System.String,System.String,Conekta.net.Model.UpdateOrderTaxRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Tax Update taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="updateOrderTaxRequest">requested field for taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersUpdateTaxesAsync(System.String,System.String,Conekta.net.Model.UpdateOrderTaxRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Tax Update taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="updateOrderTaxRequest">requested field for taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of UpdateOrderTaxResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TaxesApi.OrdersUpdateTaxesWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.UpdateOrderTaxRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Tax Update taxes for an existing orden
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="taxId">identifier</param>
            <param name="updateOrderTaxRequest">requested field for taxes</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ITokensApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ITokensApiSync.CreateToken(Conekta.net.Model.Token,System.String,System.Int32)">
            <summary>
            Create Token
            </summary>
            <remarks>
            Generate a payment token, to associate it with a card 
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="token">requested field for token</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>TokenResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITokensApiSync.CreateTokenWithHttpInfo(Conekta.net.Model.Token,System.String,System.Int32)">
            <summary>
            Create Token
            </summary>
            <remarks>
            Generate a payment token, to associate it with a card 
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="token">requested field for token</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of TokenResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.ITokensApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ITokensApiAsync.CreateTokenAsync(Conekta.net.Model.Token,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Token
            </summary>
            <remarks>
            Generate a payment token, to associate it with a card 
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="token">requested field for token</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of TokenResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITokensApiAsync.CreateTokenWithHttpInfoAsync(Conekta.net.Model.Token,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Token
            </summary>
            <remarks>
            Generate a payment token, to associate it with a card 
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="token">requested field for token</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (TokenResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ITokensApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.TokensApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TokensApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TokensApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TokensApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TokensApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TokensApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TokensApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TokensApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TokensApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.TokensApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.TokensApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TokensApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.TokensApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.TokensApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TokensApi.CreateToken(Conekta.net.Model.Token,System.String,System.Int32)">
            <summary>
            Create Token Generate a payment token, to associate it with a card 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="token">requested field for token</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>TokenResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TokensApi.CreateTokenWithHttpInfo(Conekta.net.Model.Token,System.String,System.Int32)">
            <summary>
            Create Token Generate a payment token, to associate it with a card 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="token">requested field for token</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of TokenResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TokensApi.CreateTokenAsync(Conekta.net.Model.Token,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Token Generate a payment token, to associate it with a card 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="token">requested field for token</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of TokenResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TokensApi.CreateTokenWithHttpInfoAsync(Conekta.net.Model.Token,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Token Generate a payment token, to associate it with a card 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="token">requested field for token</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (TokenResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ITransactionsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ITransactionsApiSync.GetTransaction(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get transaction
            </summary>
            <remarks>
            Get the details of a transaction
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>TransactionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransactionsApiSync.GetTransactionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get transaction
            </summary>
            <remarks>
            Get the details of a transaction
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of TransactionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransactionsApiSync.GetTransactions(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List transactions
            </summary>
            <remarks>
            Get transaction details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="id">id of the object to be retrieved (optional)</param>
            <param name="chargeId">id of the charge used for filtering (optional)</param>
            <param name="type">type of the object to be retrieved (optional)</param>
            <param name="currency">currency of the object to be retrieved (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetTransactionsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransactionsApiSync.GetTransactionsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List transactions
            </summary>
            <remarks>
            Get transaction details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="id">id of the object to be retrieved (optional)</param>
            <param name="chargeId">id of the charge used for filtering (optional)</param>
            <param name="type">type of the object to be retrieved (optional)</param>
            <param name="currency">currency of the object to be retrieved (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetTransactionsResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.ITransactionsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ITransactionsApiAsync.GetTransactionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get transaction
            </summary>
            <remarks>
            Get the details of a transaction
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of TransactionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransactionsApiAsync.GetTransactionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get transaction
            </summary>
            <remarks>
            Get the details of a transaction
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (TransactionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransactionsApiAsync.GetTransactionsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List transactions
            </summary>
            <remarks>
            Get transaction details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="id">id of the object to be retrieved (optional)</param>
            <param name="chargeId">id of the charge used for filtering (optional)</param>
            <param name="type">type of the object to be retrieved (optional)</param>
            <param name="currency">currency of the object to be retrieved (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetTransactionsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransactionsApiAsync.GetTransactionsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List transactions
            </summary>
            <remarks>
            Get transaction details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="id">id of the object to be retrieved (optional)</param>
            <param name="chargeId">id of the charge used for filtering (optional)</param>
            <param name="type">type of the object to be retrieved (optional)</param>
            <param name="currency">currency of the object to be retrieved (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetTransactionsResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ITransactionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.TransactionsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TransactionsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TransactionsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TransactionsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TransactionsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.TransactionsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.TransactionsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.TransactionsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.TransactionsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.GetTransaction(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get transaction Get the details of a transaction
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>TransactionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.GetTransactionWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get transaction Get the details of a transaction
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of TransactionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.GetTransactionAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get transaction Get the details of a transaction
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of TransactionResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.GetTransactionWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get transaction Get the details of a transaction
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (TransactionResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.GetTransactions(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List transactions Get transaction details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="id">id of the object to be retrieved (optional)</param>
            <param name="chargeId">id of the charge used for filtering (optional)</param>
            <param name="type">type of the object to be retrieved (optional)</param>
            <param name="currency">currency of the object to be retrieved (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetTransactionsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.GetTransactionsWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List transactions Get transaction details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="id">id of the object to be retrieved (optional)</param>
            <param name="chargeId">id of the charge used for filtering (optional)</param>
            <param name="type">type of the object to be retrieved (optional)</param>
            <param name="currency">currency of the object to be retrieved (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetTransactionsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.GetTransactionsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List transactions Get transaction details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="id">id of the object to be retrieved (optional)</param>
            <param name="chargeId">id of the charge used for filtering (optional)</param>
            <param name="type">type of the object to be retrieved (optional)</param>
            <param name="currency">currency of the object to be retrieved (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetTransactionsResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransactionsApi.GetTransactionsWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List transactions Get transaction details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="id">id of the object to be retrieved (optional)</param>
            <param name="chargeId">id of the charge used for filtering (optional)</param>
            <param name="type">type of the object to be retrieved (optional)</param>
            <param name="currency">currency of the object to be retrieved (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetTransactionsResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ITransfersApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ITransfersApiSync.GetTransfer(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Transfer
            </summary>
            <remarks>
            Get the details of a Transfer
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>TransferResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransfersApiSync.GetTransferWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Transfer
            </summary>
            <remarks>
            Get the details of a Transfer
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of TransferResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransfersApiSync.GetTransfers(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of transfers
            </summary>
            <remarks>
            Get transfers details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetTransfersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransfersApiSync.GetTransfersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of transfers
            </summary>
            <remarks>
            Get transfers details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetTransfersResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.ITransfersApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.ITransfersApiAsync.GetTransferAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Transfer
            </summary>
            <remarks>
            Get the details of a Transfer
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of TransferResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransfersApiAsync.GetTransferWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Transfer
            </summary>
            <remarks>
            Get the details of a Transfer
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (TransferResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransfersApiAsync.GetTransfersAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of transfers
            </summary>
            <remarks>
            Get transfers details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetTransfersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.ITransfersApiAsync.GetTransfersWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of transfers
            </summary>
            <remarks>
            Get transfers details in the form of a list
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetTransfersResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.ITransfersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.TransfersApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TransfersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TransfersApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TransfersApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.TransfersApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.TransfersApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.TransfersApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.TransfersApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.TransfersApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.GetTransfer(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Transfer Get the details of a Transfer
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>TransferResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.GetTransferWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Transfer Get the details of a Transfer
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of TransferResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.GetTransferAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Transfer Get the details of a Transfer
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of TransferResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.GetTransferWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Transfer Get the details of a Transfer
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (TransferResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.GetTransfers(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of transfers Get transfers details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetTransfersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.GetTransfersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get a list of transfers Get transfers details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetTransfersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.GetTransfersAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of transfers Get transfers details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetTransfersResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.TransfersApi.GetTransfersWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of transfers Get transfers details in the form of a list
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetTransfersResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IWebhookKeysApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.CreateWebhookKey(System.String,Conekta.net.Model.WebhookKeyRequest,System.Int32)">
            <summary>
            Create Webhook Key
            </summary>
            <remarks>
            Create a webhook key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.CreateWebhookKeyWithHttpInfo(System.String,Conekta.net.Model.WebhookKeyRequest,System.Int32)">
            <summary>
            Create Webhook Key
            </summary>
            <remarks>
            Create a webhook key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.DeleteWebhookKey(System.String,System.String,System.Int32)">
            <summary>
            Delete Webhook key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookKeyDeleteResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.DeleteWebhookKeyWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Delete Webhook key
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookKeyDeleteResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.GetWebhookKey(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Webhook Key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.GetWebhookKeyWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Webhook Key
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.GetWebhookKeys(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Webhook Keys
            </summary>
            <remarks>
            Consume the list of webhook keys you have
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetWebhookKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.GetWebhookKeysWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Webhook Keys
            </summary>
            <remarks>
            Consume the list of webhook keys you have
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetWebhookKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.UpdateWebhookKey(System.String,System.String,Conekta.net.Model.WebhookKeyUpdateRequest,System.Int32)">
            <summary>
            Update Webhook Key
            </summary>
            <remarks>
            updates an existing webhook key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiSync.UpdateWebhookKeyWithHttpInfo(System.String,System.String,Conekta.net.Model.WebhookKeyUpdateRequest,System.Int32)">
            <summary>
            Update Webhook Key
            </summary>
            <remarks>
            updates an existing webhook key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookKeyResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IWebhookKeysApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.CreateWebhookKeyAsync(System.String,Conekta.net.Model.WebhookKeyRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Webhook Key
            </summary>
            <remarks>
            Create a webhook key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.CreateWebhookKeyWithHttpInfoAsync(System.String,Conekta.net.Model.WebhookKeyRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Webhook Key
            </summary>
            <remarks>
            Create a webhook key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookKeyCreateResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.DeleteWebhookKeyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Webhook key
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookKeyDeleteResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.DeleteWebhookKeyWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Webhook key
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookKeyDeleteResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.GetWebhookKeyAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Webhook Key
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.GetWebhookKeyWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Webhook Key
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookKeyResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.GetWebhookKeysAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Webhook Keys
            </summary>
            <remarks>
            Consume the list of webhook keys you have
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetWebhookKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.GetWebhookKeysWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Webhook Keys
            </summary>
            <remarks>
            Consume the list of webhook keys you have
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetWebhookKeysResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.UpdateWebhookKeyAsync(System.String,System.String,Conekta.net.Model.WebhookKeyUpdateRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Webhook Key
            </summary>
            <remarks>
            updates an existing webhook key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhookKeysApiAsync.UpdateWebhookKeyWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.WebhookKeyUpdateRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Webhook Key
            </summary>
            <remarks>
            updates an existing webhook key
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookKeyResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IWebhookKeysApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.WebhookKeysApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WebhookKeysApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WebhookKeysApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WebhookKeysApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WebhookKeysApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.WebhookKeysApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.WebhookKeysApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.WebhookKeysApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.WebhookKeysApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.CreateWebhookKey(System.String,Conekta.net.Model.WebhookKeyRequest,System.Int32)">
            <summary>
            Create Webhook Key Create a webhook key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.CreateWebhookKeyWithHttpInfo(System.String,Conekta.net.Model.WebhookKeyRequest,System.Int32)">
            <summary>
            Create Webhook Key Create a webhook key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.CreateWebhookKeyAsync(System.String,Conekta.net.Model.WebhookKeyRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Webhook Key Create a webhook key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookKeyCreateResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.CreateWebhookKeyWithHttpInfoAsync(System.String,Conekta.net.Model.WebhookKeyRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Webhook Key Create a webhook key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookKeyCreateResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.DeleteWebhookKey(System.String,System.String,System.Int32)">
            <summary>
            Delete Webhook key 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookKeyDeleteResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.DeleteWebhookKeyWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Delete Webhook key 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookKeyDeleteResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.DeleteWebhookKeyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Webhook key 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookKeyDeleteResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.DeleteWebhookKeyWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Webhook key 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookKeyDeleteResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.GetWebhookKey(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Webhook Key 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.GetWebhookKeyWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Webhook Key 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.GetWebhookKeyAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Webhook Key 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.GetWebhookKeyWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Webhook Key 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookKeyResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.GetWebhookKeys(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Webhook Keys Consume the list of webhook keys you have
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetWebhookKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.GetWebhookKeysWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Webhook Keys Consume the list of webhook keys you have
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetWebhookKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.GetWebhookKeysAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Webhook Keys Consume the list of webhook keys you have
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetWebhookKeysResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.GetWebhookKeysWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Webhook Keys Consume the list of webhook keys you have
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetWebhookKeysResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.UpdateWebhookKey(System.String,System.String,Conekta.net.Model.WebhookKeyUpdateRequest,System.Int32)">
            <summary>
            Update Webhook Key updates an existing webhook key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.UpdateWebhookKeyWithHttpInfo(System.String,System.String,Conekta.net.Model.WebhookKeyUpdateRequest,System.Int32)">
            <summary>
            Update Webhook Key updates an existing webhook key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.UpdateWebhookKeyAsync(System.String,System.String,Conekta.net.Model.WebhookKeyUpdateRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Webhook Key updates an existing webhook key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookKeyResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhookKeysApi.UpdateWebhookKeyWithHttpInfoAsync(System.String,System.String,Conekta.net.Model.WebhookKeyUpdateRequest,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Webhook Key updates an existing webhook key
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="webhookKeyUpdateRequest"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookKeyResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IWebhooksApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.CreateWebhook(Conekta.net.Model.WebhookRequest,System.String,System.Int32)">
            <summary>
            Create Webhook
            </summary>
            <remarks>
            What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="webhookRequest">requested field for webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.CreateWebhookWithHttpInfo(Conekta.net.Model.WebhookRequest,System.String,System.Int32)">
            <summary>
            Create Webhook
            </summary>
            <remarks>
            What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="webhookRequest">requested field for webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.DeleteWebhook(System.String,System.String,System.Int32)">
            <summary>
            Delete Webhook
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.DeleteWebhookWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Delete Webhook
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.GetWebhook(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Webhook
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.GetWebhookWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Webhook
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.GetWebhooks(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Webhooks
            </summary>
            <remarks>
            Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetWebhooksResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.GetWebhooksWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Webhooks
            </summary>
            <remarks>
            Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetWebhooksResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.TestWebhook(System.String,System.String,System.Int32)">
            <summary>
            Test Webhook
            </summary>
            <remarks>
            Send a webhook.ping event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.TestWebhookWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Test Webhook
            </summary>
            <remarks>
            Send a webhook.ping event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.UpdateWebhook(System.String,Conekta.net.Model.WebhookUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Webhook
            </summary>
            <remarks>
            updates an existing webhook
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="webhookUpdateRequest">requested fields in order to update a webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiSync.UpdateWebhookWithHttpInfo(System.String,Conekta.net.Model.WebhookUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Webhook
            </summary>
            <remarks>
            updates an existing webhook
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="webhookUpdateRequest">requested fields in order to update a webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="T:Conekta.net.Api.IWebhooksApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.CreateWebhookAsync(Conekta.net.Model.WebhookRequest,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Webhook
            </summary>
            <remarks>
            What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="webhookRequest">requested field for webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.CreateWebhookWithHttpInfoAsync(Conekta.net.Model.WebhookRequest,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Webhook
            </summary>
            <remarks>
            What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="webhookRequest">requested field for webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.DeleteWebhookAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Webhook
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.DeleteWebhookWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Webhook
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.GetWebhookAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Webhook
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.GetWebhookWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Webhook
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.GetWebhooksAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Webhooks
            </summary>
            <remarks>
            Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetWebhooksResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.GetWebhooksWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Webhooks
            </summary>
            <remarks>
            Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetWebhooksResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.TestWebhookAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Test Webhook
            </summary>
            <remarks>
            Send a webhook.ping event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.TestWebhookWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Test Webhook
            </summary>
            <remarks>
            Send a webhook.ping event
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.UpdateWebhookAsync(System.String,Conekta.net.Model.WebhookUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Webhook
            </summary>
            <remarks>
            updates an existing webhook
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="webhookUpdateRequest">requested fields in order to update a webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWebhooksApiAsync.UpdateWebhookWithHttpInfoAsync(System.String,Conekta.net.Model.WebhookUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Webhook
            </summary>
            <remarks>
            updates an existing webhook
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="webhookUpdateRequest">requested fields in order to update a webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IWebhooksApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.WebhooksApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WebhooksApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WebhooksApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WebhooksApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WebhooksApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.WebhooksApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.WebhooksApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.WebhooksApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.WebhooksApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.CreateWebhook(Conekta.net.Model.WebhookRequest,System.String,System.Int32)">
            <summary>
            Create Webhook What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="webhookRequest">requested field for webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.CreateWebhookWithHttpInfo(Conekta.net.Model.WebhookRequest,System.String,System.Int32)">
            <summary>
            Create Webhook What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="webhookRequest">requested field for webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.CreateWebhookAsync(Conekta.net.Model.WebhookRequest,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Webhook What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="webhookRequest">requested field for webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.CreateWebhookWithHttpInfoAsync(Conekta.net.Model.WebhookRequest,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create Webhook What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="webhookRequest">requested field for webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.DeleteWebhook(System.String,System.String,System.Int32)">
            <summary>
            Delete Webhook 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.DeleteWebhookWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Delete Webhook 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.DeleteWebhookAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Webhook 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.DeleteWebhookWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete Webhook 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.GetWebhook(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Webhook 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.GetWebhookWithHttpInfo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Webhook 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.GetWebhookAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Webhook 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.GetWebhookWithHttpInfoAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Webhook 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.GetWebhooks(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Webhooks Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>GetWebhooksResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.GetWebhooksWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32)">
            <summary>
            Get List of Webhooks Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of GetWebhooksResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.GetWebhooksAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Webhooks Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of GetWebhooksResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.GetWebhooksWithHttpInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get List of Webhooks Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
            <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
            <param name="next">next page (optional)</param>
            <param name="previous">previous page (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (GetWebhooksResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.TestWebhook(System.String,System.String,System.Int32)">
            <summary>
            Test Webhook Send a webhook.ping event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.TestWebhookWithHttpInfo(System.String,System.String,System.Int32)">
            <summary>
            Test Webhook Send a webhook.ping event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.TestWebhookAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Test Webhook Send a webhook.ping event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.TestWebhookWithHttpInfoAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Test Webhook Send a webhook.ping event
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.UpdateWebhook(System.String,Conekta.net.Model.WebhookUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Webhook updates an existing webhook
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="webhookUpdateRequest">requested fields in order to update a webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.UpdateWebhookWithHttpInfo(System.String,Conekta.net.Model.WebhookUpdateRequest,System.String,System.String,System.Int32)">
            <summary>
            Update Webhook updates an existing webhook
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="webhookUpdateRequest">requested fields in order to update a webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.UpdateWebhookAsync(System.String,Conekta.net.Model.WebhookUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Webhook updates an existing webhook
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="webhookUpdateRequest">requested fields in order to update a webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of WebhookResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WebhooksApi.UpdateWebhookWithHttpInfoAsync(System.String,Conekta.net.Model.WebhookUpdateRequest,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Update Webhook updates an existing webhook
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id">Identifier of the resource</param>
            <param name="webhookUpdateRequest">requested fields in order to update a webhook</param>
            <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
            <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (WebhookResponse)</returns>
        </member>
        <member name="T:Conekta.net.Api.IWhitelistsApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiSync.CreateNewRuleWhitelist(Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create a whitelisted rule
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiSync.CreateNewRuleWhitelistWithHttpInfo(Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create a whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiSync.DeleteRuleWhitelist(System.Int32)">
            <summary>
            Delete a whitelisted rule
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiSync.DeleteRuleWhitelistWithHttpInfo(System.Int32)">
            <summary>
            Delete a whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiSync.GetWhiteList(System.Int32)">
            <summary>
            Get a list of whitelisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiSync.GetWhiteListWithHttpInfo(System.Int32)">
            <summary>
            Get a list of whitelisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of RiskRulesList</returns>
        </member>
        <member name="T:Conekta.net.Api.IWhitelistsApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiAsync.CreateNewRuleWhitelistAsync(Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiAsync.CreateNewRuleWhitelistWithHttpInfoAsync(Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiAsync.DeleteRuleWhitelistAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiAsync.DeleteRuleWhitelistWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a whitelisted rule
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiAsync.GetWhiteListAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of whitelisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.IWhitelistsApiAsync.GetWhiteListWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of whitelisted rules
            </summary>
            <remarks>
            Return all rules
            </remarks>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (RiskRulesList)</returns>
        </member>
        <member name="T:Conekta.net.Api.IWhitelistsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:Conekta.net.Api.WhitelistsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WhitelistsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WhitelistsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.#ctor(Conekta.net.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WhitelistsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.#ctor(Conekta.net.Client.ISynchronousClient,Conekta.net.Client.IAsynchronousClient,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Api.WhitelistsApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:Conekta.net.Api.WhitelistsApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:Conekta.net.Api.WhitelistsApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Api.WhitelistsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Conekta.net.Api.WhitelistsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.CreateNewRuleWhitelist(Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create a whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.CreateNewRuleWhitelistWithHttpInfo(Conekta.net.Model.CreateRiskRulesData,System.Int32)">
            <summary>
            Create a whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.CreateNewRuleWhitelistAsync(Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.CreateNewRuleWhitelistWithHttpInfoAsync(Conekta.net.Model.CreateRiskRulesData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create a whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="createRiskRulesData"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.DeleteRuleWhitelist(System.Int32)">
            <summary>
            Delete a whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.DeleteRuleWhitelistWithHttpInfo(System.Int32)">
            <summary>
            Delete a whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.DeleteRuleWhitelistAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.DeleteRuleWhitelistWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a whitelisted rule 
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.GetWhiteList(System.Int32)">
            <summary>
            Get a list of whitelisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.GetWhiteListWithHttpInfo(System.Int32)">
            <summary>
            Get a list of whitelisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.GetWhiteListAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of whitelisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of RiskRulesList</returns>
        </member>
        <member name="M:Conekta.net.Api.WhitelistsApi.GetWhiteListWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a list of whitelisted rules Return all rules
            </summary>
            <exception cref="T:Conekta.net.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (RiskRulesList)</returns>
        </member>
        <member name="T:Conekta.net.Client.CustomJsonCodec">
            <summary>
            Allows RestSharp to Serialize/Deserialize JSON using our custom logic, but only when ContentType is JSON.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.CustomJsonCodec.Serialize(System.Object)">
            <summary>
            Serialize the object into a JSON string.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns>A JSON string.</returns>
        </member>
        <member name="M:Conekta.net.Client.CustomJsonCodec.Deserialize(RestSharp.RestResponse,System.Type)">
            <summary>
            Deserialize the JSON string into a proper object.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="type">Object type.</param>
            <returns>Object representation of the JSON string.</returns>
        </member>
        <member name="T:Conekta.net.Client.ApiClient">
            <summary>
            Provides a default implementation of an Api client (both synchronous and asynchronous implementations),
            encapsulating general REST accessor use cases.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.ApiClient.SerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            These settings can be adjusted to accommodate custom serialization rules.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.ApiClient" />, defaulting to the global configurations' base url.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.ApiClient" />
            </summary>
            <param name="basePath">The target service's base path in URL format.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.Method(Conekta.net.Client.HttpMethod)">
            <summary>
            Constructs the RestSharp version of an http method
            </summary>
            <param name="method">Swagger Client Custom HttpMethod</param>
            <returns>RestSharp's HttpMethod instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.NewRequest(Conekta.net.Client.HttpMethod,System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Provides all logic for constructing a new RestSharp <see cref="T:RestSharp.RestRequest"/>.
            At this point, all information for querying the service is known. Here, it is simply
            mapped into the RestSharp request.
            </summary>
            <param name="method">The http verb.</param>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>[private] A new RestRequest instance.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.GetAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP GET request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.PostAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP POST request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.PutAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP PUT request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.DeleteAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP DELETE request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.HeadAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP HEAD request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.OptionsAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP OPTION request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.PatchAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP PATCH request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.Get``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP GET request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.Post``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP POST request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.Put``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PUT request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.Delete``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP DELETE request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.Head``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP HEAD request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.Options``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP OPTION request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:Conekta.net.Client.ApiClient.Patch``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PATCH request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="T:Conekta.net.Client.ApiException">
            <summary>
            API Exception
            </summary>
        </member>
        <member name="P:Conekta.net.Client.ApiException.ErrorCode">
            <summary>
            Gets or sets the error code (HTTP status code)
            </summary>
            <value>The error code (HTTP status code).</value>
        </member>
        <member name="P:Conekta.net.Client.ApiException.ErrorContent">
            <summary>
            Gets or sets the error content (body json object)
            </summary>
            <value>The error content (Http response body).</value>
        </member>
        <member name="P:Conekta.net.Client.ApiException.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="M:Conekta.net.Client.ApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.ApiException"/> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.ApiException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Conekta.net.Client.ApiException.#ctor(System.Int32,System.String,System.Object,Conekta.net.Client.Multimap{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
            <param name="headers">HTTP Headers.</param>
        </member>
        <member name="T:Conekta.net.Client.IApiResponse">
            <summary>
            Provides a non-generic contract for the ApiResponse wrapper.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.IApiResponse.ResponseType">
            <summary>
            The data type of <see cref="P:Conekta.net.Client.IApiResponse.Content"/>
            </summary>
        </member>
        <member name="P:Conekta.net.Client.IApiResponse.Content">
            <summary>
            The content of this response
            </summary>
        </member>
        <member name="P:Conekta.net.Client.IApiResponse.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Conekta.net.Client.IApiResponse.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:Conekta.net.Client.IApiResponse.ErrorText">
            <summary>
            Gets or sets any error text defined by the calling client.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.IApiResponse.Cookies">
            <summary>
            Gets or sets any cookies passed along on the response.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.IApiResponse.RawContent">
            <summary>
            The raw content of this response
            </summary>
        </member>
        <member name="T:Conekta.net.Client.ApiResponse`1">
            <summary>
            API Response
            </summary>
        </member>
        <member name="P:Conekta.net.Client.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Conekta.net.Client.ApiResponse`1.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:Conekta.net.Client.ApiResponse`1.Data">
            <summary>
            Gets or sets the data (parsed HTTP body)
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Conekta.net.Client.ApiResponse`1.ErrorText">
            <summary>
            Gets or sets any error text defined by the calling client.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.ApiResponse`1.Cookies">
            <summary>
            Gets or sets any cookies passed along on the response.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.ApiResponse`1.ResponseType">
            <summary>
            The content of this response
            </summary>
        </member>
        <member name="P:Conekta.net.Client.ApiResponse`1.Content">
            <summary>
            The data type of <see cref="P:Conekta.net.Client.ApiResponse`1.Content"/>
            </summary>
        </member>
        <member name="P:Conekta.net.Client.ApiResponse`1.RawContent">
            <summary>
            The raw content
            </summary>
        </member>
        <member name="M:Conekta.net.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,Conekta.net.Client.Multimap{System.String,System.String},`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
            <param name="rawContent">Raw content.</param>
        </member>
        <member name="M:Conekta.net.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,Conekta.net.Client.Multimap{System.String,System.String},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="M:Conekta.net.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="data">Data (parsed HTTP body)</param>
            <param name="rawContent">Raw content.</param>
        </member>
        <member name="M:Conekta.net.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="T:Conekta.net.Client.ClientUtils">
            <summary>
            Utility functions providing some benefit to API client consumers.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.SanitizeFilename(System.String)">
            <summary>
            Sanitize filename by removing the path
            </summary>
            <param name="filename">Filename</param>
            <returns>Filename</returns>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.ParameterToMultiMap(System.String,System.String,System.Object)">
            <summary>
            Convert params to key/value pairs.
            Use collectionFormat to properly format lists and collections.
            </summary>
            <param name="collectionFormat">The swagger-supported collection format, one of: csv, tsv, ssv, pipes, multi</param>
            <param name="name">Key name.</param>
            <param name="value">Value object.</param>
            <returns>A multimap of keys with 1..n associated values.</returns>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.ParameterToString(System.Object,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
            If parameter is a list, join the list with ",".
            Otherwise just return the string.
            </summary>
            <param name="obj">The parameter (header, path, query, form).</param>
            <param name="configuration">An optional configuration instance, providing formatting options used in processing.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.Serialize(System.Object)">
            <summary>
            Serializes the given object when not null. Otherwise return null.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>Serialized string.</returns>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.Base64Encode(System.String)">
            <summary>
            Encode string in base64 format.
            </summary>
            <param name="text">string to be encoded.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.ReadAsBytes(System.IO.Stream)">
            <summary>
            Convert stream to byte array
            </summary>
            <param name="inputStream">Input stream to be converted</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.SelectHeaderContentType(System.String[])">
            <summary>
            Select the Content-Type header's value from the given content-type array:
            if JSON type exists in the given array, use it;
            otherwise use the first one defined in 'consumes'
            </summary>
            <param name="contentTypes">The Content-Type array to select from.</param>
            <returns>The Content-Type header to use.</returns>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.SelectHeaderAccept(System.String[])">
            <summary>
            Select the Accept header's value from the given accepts array:
            if JSON exists in the given array, use it;
            otherwise use all of them (joining into a string)
            </summary>
            <param name="accepts">The accepts array to select from.</param>
            <returns>The Accept header to use.</returns>
        </member>
        <member name="F:Conekta.net.Client.ClientUtils.JsonRegex">
            <summary>
            Provides a case-insensitive check that a provided content type is a known JSON-like content type.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.IsJsonMime(System.String)">
            <summary>
            Check if the given MIME is a JSON MIME.
            JSON MIME examples:
               application/json
               application/json; charset=UTF8
               APPLICATION/JSON
               application/vnd.company+json
            </summary>
            <param name="mime">MIME</param>
            <returns>Returns True if MIME type is json.</returns>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.HasEnumMemberAttrValue(System.Object)">
            <summary>
            Is the Enum decorated with EnumMember Attribute
            </summary>
            <param name="enumVal"></param>
            <returns>true if found</returns>
        </member>
        <member name="M:Conekta.net.Client.ClientUtils.GetEnumMemberAttrValue(System.Object)">
            <summary>
            Get the EnumMember value
            </summary>
            <param name="enumVal"></param>
            <returns>EnumMember value as string otherwise null</returns>
        </member>
        <member name="T:Conekta.net.Client.Configuration">
            <summary>
            Represents a set of configuration settings
            </summary>
        </member>
        <member name="F:Conekta.net.Client.Configuration.Version">
            <summary>
            Version of the package.
            </summary>
            <value>Version of the package.</value>
        </member>
        <member name="F:Conekta.net.Client.Configuration.ISO8601_DATETIME_FORMAT">
            <summary>
            Identifier for ISO 8601 DateTime Format
            </summary>
            <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        </member>
        <member name="F:Conekta.net.Client.Configuration.DefaultExceptionFactory">
            <summary>
            Default creation of exceptions for a given method name and response object
            </summary>
        </member>
        <member name="F:Conekta.net.Client.Configuration._basePath">
            <summary>
            Defines the base path of the target API server.
            Example: http://localhost:3000/v1/
            </summary>
        </member>
        <member name="F:Conekta.net.Client.Configuration._apiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            This is the key and value comprising the "secret" for accessing an API.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="F:Conekta.net.Client.Configuration._apiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="F:Conekta.net.Client.Configuration._servers">
            <summary>
            Gets or sets the servers defined in the OpenAPI spec.
            </summary>
            <value>The servers</value>
        </member>
        <member name="F:Conekta.net.Client.Configuration._operationServers">
            <summary>
            Gets or sets the operation servers defined in the OpenAPI spec.
            </summary>
            <value>The operation servers</value>
        </member>
        <member name="M:Conekta.net.Client.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.Configuration" /> class
            </summary>
        </member>
        <member name="M:Conekta.net.Client.Configuration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.Configuration" /> class
            </summary>
        </member>
        <member name="P:Conekta.net.Client.Configuration.BasePath">
            <summary>
            Gets or sets the base path for API access.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.Configuration.UseDefaultCredentials">
            <summary>
            Determine whether or not the "default credentials" (e.g. the user account under which the current process is running) will be sent along to the server. The default is false.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.Configuration.DefaultHeader">
            <summary>
            Gets or sets the default header.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.Configuration.DefaultHeaders">
            <summary>
            Gets or sets the default headers.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.Configuration.Timeout">
            <summary>
            Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.Configuration.Proxy">
            <summary>
            Gets or sets the proxy
            </summary>
            <value>Proxy.</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.UserAgent">
            <summary>
            Gets or sets the HTTP user agent.
            </summary>
            <value>Http user agent.</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.Username">
            <summary>
            Gets or sets the username (HTTP basic authentication).
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.Password">
            <summary>
            Gets or sets the password (HTTP basic authentication).
            </summary>
            <value>The password.</value>
        </member>
        <member name="M:Conekta.net.Client.Configuration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:Conekta.net.Client.Configuration.ClientCertificates">
            <summary>
            Gets or sets certificate collection to be sent with requests.
            </summary>
            <value>X509 Certificate collection.</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.AccessToken">
             <summary>
             Gets or sets the access token for OAuth2 authentication.
            
             This helper property simplifies code generation.
             </summary>
             <value>The access token.</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.TempFolderPath">
            <summary>
            Gets or sets the temporary folder path to store the files downloaded from the server.
            </summary>
            <value>Folder path.</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when serializing in the ApiClient
            By default, it's set to ISO 8601 - "o", for others see:
            https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
            and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
            No validation is done to ensure that the string you're providing is valid
            </summary>
            <value>The DateTimeFormat string</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.ApiKeyPrefix">
             <summary>
             Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            
             Whatever you set here will be prepended to the value defined in AddApiKey.
            
             An example invocation here might be:
             <example>
             ApiKeyPrefix["Authorization"] = "Bearer";
             </example>
             … where ApiKey["Authorization"] would then be used to set the value of your bearer token.
            
             <remarks>
             OAuth2 workflows should set tokens via AccessToken.
             </remarks>
             </summary>
             <value>The prefix of the API key.</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.ApiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.Servers">
            <summary>
            Gets or sets the servers.
            </summary>
            <value>The servers.</value>
        </member>
        <member name="P:Conekta.net.Client.Configuration.OperationServers">
            <summary>
            Gets or sets the operation servers.
            </summary>
            <value>The operation servers.</value>
        </member>
        <member name="M:Conekta.net.Client.Configuration.GetServerUrl(System.Int32)">
            <summary>
            Returns URL based on server settings without providing values
            for the variables
            </summary>
            <param name="index">Array index of the server settings.</param>
            <return>The server URL.</return>
        </member>
        <member name="M:Conekta.net.Client.Configuration.GetServerUrl(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns URL based on server settings.
            </summary>
            <param name="index">Array index of the server settings.</param>
            <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
            <return>The server URL.</return>
        </member>
        <member name="M:Conekta.net.Client.Configuration.GetOperationServerUrl(System.String,System.Int32)">
            <summary>
            Returns URL based on operation server settings.
            </summary>
            <param name="operation">Operation associated with the request path.</param>
            <param name="index">Array index of the server settings.</param>
            <return>The operation server URL.</return>
        </member>
        <member name="M:Conekta.net.Client.Configuration.GetOperationServerUrl(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns URL based on operation server settings.
            </summary>
            <param name="operation">Operation associated with the request path.</param>
            <param name="index">Array index of the server settings.</param>
            <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
            <return>The operation server URL.</return>
        </member>
        <member name="M:Conekta.net.Client.Configuration.GetServerUrl(System.Collections.Generic.IList{System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}},System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns URL based on server settings.
            </summary>
            <param name="servers">Dictionary of server settings.</param>
            <param name="index">Array index of the server settings.</param>
            <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
            <return>The server URL.</return>
        </member>
        <member name="P:Conekta.net.Client.Configuration.RemoteCertificateValidationCallback">
            <summary>
            Gets and Sets the RemoteCertificateValidationCallback
            </summary>
        </member>
        <member name="M:Conekta.net.Client.Configuration.ToDebugReport">
            <summary>
            Returns a string with essential information for debugging.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.Configuration.AddApiKey(System.String,System.String)">
            <summary>
            Add Api Key Header.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
            <returns></returns>
        </member>
        <member name="M:Conekta.net.Client.Configuration.AddApiKeyPrefix(System.String,System.String)">
            <summary>
            Sets the API key prefix.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
        </member>
        <member name="M:Conekta.net.Client.Configuration.MergeConfigurations(Conekta.net.Client.IReadableConfiguration,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Merge configurations.
            </summary>
            <param name="first">First configuration.</param>
            <param name="second">Second configuration.</param>
            <return>Merged configuration.</return>
        </member>
        <member name="T:Conekta.net.Client.ExceptionFactory">
            <summary>
            A delegate to ExceptionFactory method
            </summary>
            <param name="methodName">Method name</param>
            <param name="response">Response</param>
            <returns>Exceptions</returns>
        </member>
        <member name="T:Conekta.net.Client.GlobalConfiguration">
            <summary>
            <see cref="T:Conekta.net.Client.GlobalConfiguration"/> provides a compile-time extension point for globally configuring
            API Clients.
            </summary>
            <remarks>
            A customized implementation via partial class may reside in another file and may
            be excluded from automatic generation via a .openapi-generator-ignore file.
            </remarks>
        </member>
        <member name="M:Conekta.net.Client.GlobalConfiguration.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Conekta.net.Client.GlobalConfiguration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="P:Conekta.net.Client.GlobalConfiguration.Instance">
            <summary>
            Gets or sets the default Configuration.
            </summary>
            <value>Configuration.</value>
        </member>
        <member name="T:Conekta.net.Client.HttpMethod">
            <summary>
            Http methods supported by swagger
            </summary>
        </member>
        <member name="F:Conekta.net.Client.HttpMethod.Get">
            <summary>HTTP GET request.</summary>
        </member>
        <member name="F:Conekta.net.Client.HttpMethod.Post">
            <summary>HTTP POST request.</summary>
        </member>
        <member name="F:Conekta.net.Client.HttpMethod.Put">
            <summary>HTTP PUT request.</summary>
        </member>
        <member name="F:Conekta.net.Client.HttpMethod.Delete">
            <summary>HTTP DELETE request.</summary>
        </member>
        <member name="F:Conekta.net.Client.HttpMethod.Head">
            <summary>HTTP HEAD request.</summary>
        </member>
        <member name="F:Conekta.net.Client.HttpMethod.Options">
            <summary>HTTP OPTIONS request.</summary>
        </member>
        <member name="F:Conekta.net.Client.HttpMethod.Patch">
            <summary>HTTP PATCH request.</summary>
        </member>
        <member name="T:Conekta.net.Client.IApiAccessor">
            <summary>
            Represents configuration aspects required to interact with the API endpoints.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.IApiAccessor.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="M:Conekta.net.Client.IApiAccessor.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Conekta.net.Client.IApiAccessor.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Conekta.net.Client.IAsynchronousClient">
             <summary>
             Contract for Asynchronous RESTful API interactions.
            
             This interface allows consumers to provide a custom API accessor client.
             </summary>
        </member>
        <member name="M:Conekta.net.Client.IAsynchronousClient.GetAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the GET http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.IAsynchronousClient.PostAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the POST http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.IAsynchronousClient.PutAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the PUT http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.IAsynchronousClient.DeleteAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the DELETE http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.IAsynchronousClient.HeadAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the HEAD http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.IAsynchronousClient.OptionsAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the OPTIONS http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.IAsynchronousClient.PatchAsync``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the PATCH http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="T:Conekta.net.Client.IReadableConfiguration">
            <summary>
            Represents a readable-only configuration contract.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>Access token.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.ApiKey">
            <summary>
            Gets the API key.
            </summary>
            <value>API key.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.ApiKeyPrefix">
            <summary>
            Gets the API key prefix.
            </summary>
            <value>API key prefix.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>Base path.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>Date time format.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <value>Default header.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.DefaultHeaders">
            <summary>
            Gets the default headers.
            </summary>
            <value>Default headers.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.TempFolderPath">
            <summary>
            Gets the temp folder path.
            </summary>
            <value>Temp folder path.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.Timeout">
            <summary>
            Gets the HTTP connection timeout (in milliseconds)
            </summary>
            <value>HTTP connection timeout.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.Proxy">
            <summary>
            Gets the proxy.
            </summary>
            <value>Proxy.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <value>User agent.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
            <value>Username.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
            <value>Password.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.UseDefaultCredentials">
            <summary>
            Determine whether or not the "default credentials" (e.g. the user account under which the current process is running) will be sent along to the server. The default is false.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.OperationServers">
            <summary>
            Get the servers associated with the operation.
            </summary>
            <value>Operation servers.</value>
        </member>
        <member name="M:Conekta.net.Client.IReadableConfiguration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="M:Conekta.net.Client.IReadableConfiguration.GetOperationServerUrl(System.String,System.Int32)">
            <summary>
            Gets the Operation server url at the provided index.
            </summary>
            <param name="operation">Operation server name.</param>
            <param name="index">Index of the operation server settings.</param>
            <returns></returns>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.ClientCertificates">
            <summary>
            Gets certificate collection to be sent with requests.
            </summary>
            <value>X509 Certificate collection.</value>
        </member>
        <member name="P:Conekta.net.Client.IReadableConfiguration.RemoteCertificateValidationCallback">
            <summary>
            Callback function for handling the validation of remote certificates. Useful for certificate pinning and
            overriding certificate errors in the scope of a request.
            </summary>
        </member>
        <member name="T:Conekta.net.Client.ISynchronousClient">
             <summary>
             Contract for Synchronous RESTful API interactions.
            
             This interface allows consumers to provide a custom API accessor client.
             </summary>
        </member>
        <member name="M:Conekta.net.Client.ISynchronousClient.Get``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the GET http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.ISynchronousClient.Post``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the POST http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.ISynchronousClient.Put``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the PUT http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.ISynchronousClient.Delete``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the DELETE http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.ISynchronousClient.Head``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the HEAD http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.ISynchronousClient.Options``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the OPTIONS http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:Conekta.net.Client.ISynchronousClient.Patch``1(System.String,Conekta.net.Client.RequestOptions,Conekta.net.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the PATCH http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:Conekta.net.Client.ApiResponse`1"/></returns>
        </member>
        <member name="T:Conekta.net.Client.Multimap`2">
            <summary>
            A dictionary in which one key has many associated values.
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value associated with the key.</typeparam>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.#ctor">
            <summary>
            Empty Constructor.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor with comparer.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.GetEnumerator">
            <summary>
            To get the enumerator.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            To get the enumerator.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Add values to Multimap
            </summary>
            <param name="item">Key value pair</param>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.Add(Conekta.net.Client.Multimap{`0,`1})">
            <summary>
            Add Multimap to Multimap
            </summary>
            <param name="multimap">Multimap</param>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.Clear">
            <summary>
            Clear Multimap
            </summary>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Determines whether Multimap contains the specified item.
            </summary>
            <param name="item">Key value pair</param>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
            <returns>true if the Multimap contains the item; otherwise, false.</returns>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <summary>
             Copy items of the Multimap to an array,
                starting at a particular array index.
            </summary>
            <param name="array">The array that is the destination of the items copied
                from Multimap. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Removes the specified item from the Multimap.
            </summary>
            <param name="item">Key value pair</param>
            <returns>true if the item is successfully removed; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
        </member>
        <member name="P:Conekta.net.Client.Multimap`2.Count">
            <summary>
            Gets the number of items contained in the Multimap.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.Multimap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the Multimap is read-only.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Adds an item with the provided key and value to the Multimap.
            </summary>
            <param name="key">The object to use as the key of the item to add.</param>
            <param name="value">The object to use as the value of the item to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when couldn't add the value to Multimap.</exception>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.ContainsKey(`0)">
            <summary>
            Determines whether the Multimap contains an item with the specified key.
            </summary>
            <param name="key">The key to locate in the Multimap.</param>
            <returns>true if the Multimap contains an item with
                the key; otherwise, false.</returns>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.Remove(`0)">
            <summary>
            Removes item with the specified key from the Multimap.
            </summary>
            <param name="key">The key to locate in the Multimap.</param>
            <returns>true if the item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the
                key is found; otherwise, the default value for the type of the value parameter.
                This parameter is passed uninitialized.</param>
            <returns> true if the object that implements Multimap contains
                an item with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:Conekta.net.Client.Multimap`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <param name="key">The key of the item to get or set.</param>
            <returns>The value of the specified key.</returns>
        </member>
        <member name="P:Conekta.net.Client.Multimap`2.Keys">
            <summary>
            Gets a System.Collections.Generic.ICollection containing the keys of the Multimap.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.Multimap`2.Values">
            <summary>
            Gets a System.Collections.Generic.ICollection containing the values of the Multimap.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.CopyTo(System.Array,System.Int32)">
            <summary>
             Copy the items of the Multimap to an System.Array,
                starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the items copied
                from Multimap. The System.Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.Add(`0,`1)">
            <summary>
            Adds an item with the provided key and value to the Multimap.
            </summary>
            <param name="key">The object to use as the key of the item to add.</param>
            <param name="value">The object to use as the value of the item to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when couldn't add value to Multimap.</exception>
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.TryRemove(`0,System.Collections.Generic.IList{`1}@)">
            Helper method to encapsulate generator differences between dictionary types.
        </member>
        <member name="M:Conekta.net.Client.Multimap`2.TryAdd(`0,System.Collections.Generic.IList{`1})">
            Helper method to encapsulate generator differences between dictionary types.
        </member>
        <member name="T:Conekta.net.Client.OpenAPIDateConverter">
            <summary>
            Formatter for 'date' openapi formats ss defined by full-date - RFC3339
            see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
            </summary>
        </member>
        <member name="M:Conekta.net.Client.OpenAPIDateConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Client.OpenAPIDateConverter" /> class.
            </summary>
        </member>
        <member name="T:Conekta.net.Client.RequestOptions">
            <summary>
            A container for generalized request inputs. This type allows consumers to extend the request functionality
            by abstracting away from the default (built-in) request framework (e.g. RestSharp).
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RequestOptions.PathParameters">
            <summary>
            Parameters to be bound to path parts of the Request's URL
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RequestOptions.QueryParameters">
            <summary>
            Query parameters to be applied to the request.
            Keys may have 1 or more values associated.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RequestOptions.HeaderParameters">
            <summary>
            Header parameters to be applied to the request.
            Keys may have 1 or more values associated.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RequestOptions.FormParameters">
            <summary>
            Form parameters to be sent along with the request.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RequestOptions.FileParameters">
            <summary>
            File parameters to be sent along with the request.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RequestOptions.Cookies">
            <summary>
            Cookies to be sent along with the request.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RequestOptions.Operation">
            <summary>
            Operation associated with the request path.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RequestOptions.OperationIndex">
            <summary>
            Index associated with the operation.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RequestOptions.Data">
            <summary>
            Any data associated with a request body.
            </summary>
        </member>
        <member name="M:Conekta.net.Client.RequestOptions.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Conekta.net.Client.RequestOptions"/>
            </summary>
        </member>
        <member name="T:Conekta.net.Client.RetryConfiguration">
            <summary>
            Configuration class to set the polly retry policies to be applied to the requests.
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RetryConfiguration.RetryPolicy">
            <summary>
            Retry policy
            </summary>
        </member>
        <member name="P:Conekta.net.Client.RetryConfiguration.AsyncRetryPolicy">
            <summary>
            Async retry policy
            </summary>
        </member>
        <member name="T:Conekta.net.Model.AbstractOpenAPISchema">
            <summary>
             Abstract base class for oneOf, anyOf schemas in the OpenAPI specification
            </summary>
        </member>
        <member name="F:Conekta.net.Model.AbstractOpenAPISchema.SerializerSettings">
            <summary>
             Custom JSON serializer
            </summary>
        </member>
        <member name="F:Conekta.net.Model.AbstractOpenAPISchema.AdditionalPropertiesSerializerSettings">
            <summary>
             Custom JSON serializer for objects with additional properties
            </summary>
        </member>
        <member name="P:Conekta.net.Model.AbstractOpenAPISchema.ActualInstance">
            <summary>
            Gets or Sets the actual instance
            </summary>
        </member>
        <member name="P:Conekta.net.Model.AbstractOpenAPISchema.IsNullable">
            <summary>
            Gets or Sets IsNullable to indicate whether the instance is nullable
            </summary>
        </member>
        <member name="P:Conekta.net.Model.AbstractOpenAPISchema.SchemaType">
            <summary>
            Gets or Sets the schema type, which can be either `oneOf` or `anyOf`
            </summary>
        </member>
        <member name="M:Conekta.net.Model.AbstractOpenAPISchema.ToJson">
            <summary>
            Converts the instance into JSON string.
            </summary>
        </member>
        <member name="T:Conekta.net.Model.ApiKeyCreateResponse">
            <summary>
            ApiKeyCreateResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponse.#ctor(System.String,System.Boolean,System.Int64,System.Int64,System.Nullable{System.Int64},System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ApiKeyCreateResponse" /> class.
            </summary>
            <param name="authenticationToken">It is occupied as a user when authenticated with basic authentication, with a blank password. This value will only appear once, in the request to create a new key. Copy and save it in a safe place..</param>
            <param name="active">Indicates if the api key is active.</param>
            <param name="createdAt">Unix timestamp in seconds of when the api key was created.</param>
            <param name="updatedAt">Unix timestamp in seconds of when the api key was last updated.</param>
            <param name="deactivatedAt">Unix timestamp in seconds of when the api key was deleted.</param>
            <param name="description">A name or brief explanation of what this api key is used for.</param>
            <param name="id">Unique identifier of the api key.</param>
            <param name="livemode">Indicates if the api key is in production.</param>
            <param name="deleted">Indicates if the api key was deleted.</param>
            <param name="varObject">Object name, value is &#39;api_key&#39;.</param>
            <param name="prefix">The first few characters of the authentication_token.</param>
            <param name="role">Indicates if the api key is private or public.</param>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.AuthenticationToken">
            <summary>
            It is occupied as a user when authenticated with basic authentication, with a blank password. This value will only appear once, in the request to create a new key. Copy and save it in a safe place.
            </summary>
            <value>It is occupied as a user when authenticated with basic authentication, with a blank password. This value will only appear once, in the request to create a new key. Copy and save it in a safe place.</value>
            <example>key_rpHzxufNgjFCdprEEFZRTKi</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.Active">
            <summary>
            Indicates if the api key is active
            </summary>
            <value>Indicates if the api key is active</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.CreatedAt">
            <summary>
            Unix timestamp in seconds of when the api key was created
            </summary>
            <value>Unix timestamp in seconds of when the api key was created</value>
            <example>1684167881</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.UpdatedAt">
            <summary>
            Unix timestamp in seconds of when the api key was last updated
            </summary>
            <value>Unix timestamp in seconds of when the api key was last updated</value>
            <example>1684167923</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.DeactivatedAt">
            <summary>
            Unix timestamp in seconds of when the api key was deleted
            </summary>
            <value>Unix timestamp in seconds of when the api key was deleted</value>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.Description">
            <summary>
            A name or brief explanation of what this api key is used for
            </summary>
            <value>A name or brief explanation of what this api key is used for</value>
            <example>online store</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.Id">
            <summary>
            Unique identifier of the api key
            </summary>
            <value>Unique identifier of the api key</value>
            <example>64625cc9f3e02c00163f5e4d</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.Livemode">
            <summary>
            Indicates if the api key is in production
            </summary>
            <value>Indicates if the api key is in production</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.Deleted">
            <summary>
            Indicates if the api key was deleted
            </summary>
            <value>Indicates if the api key was deleted</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.VarObject">
            <summary>
            Object name, value is &#39;api_key&#39;
            </summary>
            <value>Object name, value is &#39;api_key&#39;</value>
            <example>api_key</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.Prefix">
            <summary>
            The first few characters of the authentication_token
            </summary>
            <value>The first few characters of the authentication_token</value>
            <example>key_rp</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponse.Role">
            <summary>
            Indicates if the api key is private or public
            </summary>
            <value>Indicates if the api key is private or public</value>
            <example>private</example>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponse.Equals(Conekta.net.Model.ApiKeyCreateResponse)">
            <summary>
            Returns true if ApiKeyCreateResponse instances are equal
            </summary>
            <param name="input">Instance of ApiKeyCreateResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ApiKeyCreateResponseAllOf">
            <summary>
            ApiKeyCreateResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponseAllOf.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ApiKeyCreateResponseAllOf" /> class.
            </summary>
            <param name="authenticationToken">It is occupied as a user when authenticated with basic authentication, with a blank password. This value will only appear once, in the request to create a new key. Copy and save it in a safe place..</param>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyCreateResponseAllOf.AuthenticationToken">
            <summary>
            It is occupied as a user when authenticated with basic authentication, with a blank password. This value will only appear once, in the request to create a new key. Copy and save it in a safe place.
            </summary>
            <value>It is occupied as a user when authenticated with basic authentication, with a blank password. This value will only appear once, in the request to create a new key. Copy and save it in a safe place.</value>
            <example>key_rpHzxufNgjFCdprEEFZRTKi</example>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponseAllOf.Equals(Conekta.net.Model.ApiKeyCreateResponseAllOf)">
            <summary>
            Returns true if ApiKeyCreateResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of ApiKeyCreateResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyCreateResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ApiKeyRequest">
            <summary>
            ApiKeyRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ApiKeyRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ApiKeyRequest" /> class.
            </summary>
            <param name="description">A name or brief explanation of what this api key is used for.</param>
            <param name="role">role (required).</param>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyRequest.Description">
            <summary>
            A name or brief explanation of what this api key is used for
            </summary>
            <value>A name or brief explanation of what this api key is used for</value>
            <example>online store</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyRequest.Role">
            <summary>
            Gets or Sets Role
            </summary>
            <example>private</example>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyRequest.Equals(Conekta.net.Model.ApiKeyRequest)">
            <summary>
            Returns true if ApiKeyRequest instances are equal
            </summary>
            <param name="input">Instance of ApiKeyRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ApiKeyResponse">
            <summary>
            api keys model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponse.#ctor(System.Boolean,System.Int64,System.Int64,System.Nullable{System.Int64},System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ApiKeyResponse" /> class.
            </summary>
            <param name="active">Indicates if the api key is active.</param>
            <param name="createdAt">Unix timestamp in seconds of when the api key was created.</param>
            <param name="updatedAt">Unix timestamp in seconds of when the api key was last updated.</param>
            <param name="deactivatedAt">Unix timestamp in seconds of when the api key was deleted.</param>
            <param name="description">A name or brief explanation of what this api key is used for.</param>
            <param name="id">Unique identifier of the api key.</param>
            <param name="livemode">Indicates if the api key is in production.</param>
            <param name="deleted">Indicates if the api key was deleted.</param>
            <param name="varObject">Object name, value is &#39;api_key&#39;.</param>
            <param name="prefix">The first few characters of the authentication_token.</param>
            <param name="role">Indicates if the api key is private or public.</param>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.Active">
            <summary>
            Indicates if the api key is active
            </summary>
            <value>Indicates if the api key is active</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.CreatedAt">
            <summary>
            Unix timestamp in seconds of when the api key was created
            </summary>
            <value>Unix timestamp in seconds of when the api key was created</value>
            <example>1684167881</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.UpdatedAt">
            <summary>
            Unix timestamp in seconds of when the api key was last updated
            </summary>
            <value>Unix timestamp in seconds of when the api key was last updated</value>
            <example>1684167923</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.DeactivatedAt">
            <summary>
            Unix timestamp in seconds of when the api key was deleted
            </summary>
            <value>Unix timestamp in seconds of when the api key was deleted</value>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.Description">
            <summary>
            A name or brief explanation of what this api key is used for
            </summary>
            <value>A name or brief explanation of what this api key is used for</value>
            <example>online store</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.Id">
            <summary>
            Unique identifier of the api key
            </summary>
            <value>Unique identifier of the api key</value>
            <example>64625cc9f3e02c00163f5e4d</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.Livemode">
            <summary>
            Indicates if the api key is in production
            </summary>
            <value>Indicates if the api key is in production</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.Deleted">
            <summary>
            Indicates if the api key was deleted
            </summary>
            <value>Indicates if the api key was deleted</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.VarObject">
            <summary>
            Object name, value is &#39;api_key&#39;
            </summary>
            <value>Object name, value is &#39;api_key&#39;</value>
            <example>api_key</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.Prefix">
            <summary>
            The first few characters of the authentication_token
            </summary>
            <value>The first few characters of the authentication_token</value>
            <example>key_rp</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponse.Role">
            <summary>
            Indicates if the api key is private or public
            </summary>
            <value>Indicates if the api key is private or public</value>
            <example>private</example>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponse.Equals(Conekta.net.Model.ApiKeyResponse)">
            <summary>
            Returns true if ApiKeyResponse instances are equal
            </summary>
            <param name="input">Instance of ApiKeyResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ApiKeyResponseOnDelete">
            <summary>
            api keys model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponseOnDelete.#ctor(System.Boolean,System.Int64,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ApiKeyResponseOnDelete" /> class.
            </summary>
            <param name="active">Indicates if the api key is active.</param>
            <param name="createdAt">Unix timestamp in seconds of when the api key was created.</param>
            <param name="description">A name or brief explanation of what this api key is used for.</param>
            <param name="livemode">Indicates if the api key is in production.</param>
            <param name="prefix">The first few characters of the authentication_token.</param>
            <param name="id">Unique identifier of the api key.</param>
            <param name="varObject">Object name, value is &#39;api_key&#39;.</param>
            <param name="deleted">Indicates if the api key was deleted.</param>
            <param name="role">Indicates if the api key is private or public.</param>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponseOnDelete.Active">
            <summary>
            Indicates if the api key is active
            </summary>
            <value>Indicates if the api key is active</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponseOnDelete.CreatedAt">
            <summary>
            Unix timestamp in seconds of when the api key was created
            </summary>
            <value>Unix timestamp in seconds of when the api key was created</value>
            <example>1684167881</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponseOnDelete.Description">
            <summary>
            A name or brief explanation of what this api key is used for
            </summary>
            <value>A name or brief explanation of what this api key is used for</value>
            <example>online store</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponseOnDelete.Livemode">
            <summary>
            Indicates if the api key is in production
            </summary>
            <value>Indicates if the api key is in production</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponseOnDelete.Prefix">
            <summary>
            The first few characters of the authentication_token
            </summary>
            <value>The first few characters of the authentication_token</value>
            <example>key_rp</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponseOnDelete.Id">
            <summary>
            Unique identifier of the api key
            </summary>
            <value>Unique identifier of the api key</value>
            <example>64625cc9f3e02c00163f5e4d</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponseOnDelete.VarObject">
            <summary>
            Object name, value is &#39;api_key&#39;
            </summary>
            <value>Object name, value is &#39;api_key&#39;</value>
            <example>api_key</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponseOnDelete.Deleted">
            <summary>
            Indicates if the api key was deleted
            </summary>
            <value>Indicates if the api key was deleted</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyResponseOnDelete.Role">
            <summary>
            Indicates if the api key is private or public
            </summary>
            <value>Indicates if the api key is private or public</value>
            <example>private</example>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponseOnDelete.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponseOnDelete.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponseOnDelete.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponseOnDelete.Equals(Conekta.net.Model.ApiKeyResponseOnDelete)">
            <summary>
            Returns true if ApiKeyResponseOnDelete instances are equal
            </summary>
            <param name="input">Instance of ApiKeyResponseOnDelete to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponseOnDelete.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyResponseOnDelete.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ApiKeyUpdateRequest">
            <summary>
            ApiKeyUpdateRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyUpdateRequest.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ApiKeyUpdateRequest" /> class.
            </summary>
            <param name="active">Indicates if the webhook key is active.</param>
            <param name="description">A name or brief explanation of what this api key is used for.</param>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyUpdateRequest.Active">
            <summary>
            Indicates if the webhook key is active
            </summary>
            <value>Indicates if the webhook key is active</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.ApiKeyUpdateRequest.Description">
            <summary>
            A name or brief explanation of what this api key is used for
            </summary>
            <value>A name or brief explanation of what this api key is used for</value>
            <example>online store</example>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyUpdateRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyUpdateRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyUpdateRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyUpdateRequest.Equals(Conekta.net.Model.ApiKeyUpdateRequest)">
            <summary>
            Returns true if ApiKeyUpdateRequest instances are equal
            </summary>
            <param name="input">Instance of ApiKeyUpdateRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyUpdateRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ApiKeyUpdateRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.BalanceCommonField">
            <summary>
            balance common fields model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.BalanceCommonField.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.BalanceCommonField" /> class.
            </summary>
            <param name="amount">The balance&#39;s amount.</param>
            <param name="currency">The balance&#39;s currency.</param>
        </member>
        <member name="P:Conekta.net.Model.BalanceCommonField.Amount">
            <summary>
            The balance&#39;s amount
            </summary>
            <value>The balance&#39;s amount</value>
            <example>100</example>
        </member>
        <member name="P:Conekta.net.Model.BalanceCommonField.Currency">
            <summary>
            The balance&#39;s currency
            </summary>
            <value>The balance&#39;s currency</value>
            <example>MXN</example>
        </member>
        <member name="M:Conekta.net.Model.BalanceCommonField.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceCommonField.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceCommonField.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceCommonField.Equals(Conekta.net.Model.BalanceCommonField)">
            <summary>
            Returns true if BalanceCommonField instances are equal
            </summary>
            <param name="input">Instance of BalanceCommonField to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceCommonField.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceCommonField.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.BalanceResponse">
            <summary>
            balance model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.BalanceResponse.#ctor(System.Collections.Generic.List{Conekta.net.Model.BalanceCommonField},System.Collections.Generic.List{Conekta.net.Model.BalanceCommonField},System.Collections.Generic.List{Conekta.net.Model.BalanceCommonField},System.Collections.Generic.List{Conekta.net.Model.BalanceCommonField},System.Collections.Generic.List{Conekta.net.Model.BalanceCommonField},System.Collections.Generic.List{Conekta.net.Model.BalanceCommonField},System.Collections.Generic.List{Conekta.net.Model.BalanceCommonField},System.Object,System.Collections.Generic.List{Conekta.net.Model.BalanceCommonField},System.Collections.Generic.List{Conekta.net.Model.BalanceCommonField})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.BalanceResponse" /> class.
            </summary>
            <param name="available">The balance&#39;s available.</param>
            <param name="cashoutRetentionAmount">The balance&#39;s cashout retention amount.</param>
            <param name="conektaRetention">The balance&#39;s conekta retention.</param>
            <param name="gateway">The balance&#39;s gateway.</param>
            <param name="pending">The balance&#39;s pending.</param>
            <param name="retained">The balance&#39;s retained.</param>
            <param name="retentionAmount">The balance&#39;s retention amount.</param>
            <param name="targetCollateralAmount">The balance&#39;s target collateral amount.</param>
            <param name="targetRetentionAmount">The balance&#39;s target retention amount.</param>
            <param name="temporarilyRetained">The balance&#39;s temporarily retained.</param>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.Available">
            <summary>
            The balance&#39;s available
            </summary>
            <value>The balance&#39;s available</value>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.CashoutRetentionAmount">
            <summary>
            The balance&#39;s cashout retention amount
            </summary>
            <value>The balance&#39;s cashout retention amount</value>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.ConektaRetention">
            <summary>
            The balance&#39;s conekta retention
            </summary>
            <value>The balance&#39;s conekta retention</value>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.Gateway">
            <summary>
            The balance&#39;s gateway
            </summary>
            <value>The balance&#39;s gateway</value>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.Pending">
            <summary>
            The balance&#39;s pending
            </summary>
            <value>The balance&#39;s pending</value>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.Retained">
            <summary>
            The balance&#39;s retained
            </summary>
            <value>The balance&#39;s retained</value>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.RetentionAmount">
            <summary>
            The balance&#39;s retention amount
            </summary>
            <value>The balance&#39;s retention amount</value>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.TargetCollateralAmount">
            <summary>
            The balance&#39;s target collateral amount
            </summary>
            <value>The balance&#39;s target collateral amount</value>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.TargetRetentionAmount">
            <summary>
            The balance&#39;s target retention amount
            </summary>
            <value>The balance&#39;s target retention amount</value>
        </member>
        <member name="P:Conekta.net.Model.BalanceResponse.TemporarilyRetained">
            <summary>
            The balance&#39;s temporarily retained
            </summary>
            <value>The balance&#39;s temporarily retained</value>
        </member>
        <member name="M:Conekta.net.Model.BalanceResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceResponse.Equals(Conekta.net.Model.BalanceResponse)">
            <summary>
            Returns true if BalanceResponse instances are equal
            </summary>
            <param name="input">Instance of BalanceResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.BalanceResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.BlacklistRuleResponse">
            <summary>
            BlacklistRuleResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.BlacklistRuleResponse.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.BlacklistRuleResponse" /> class.
            </summary>
            <param name="id">Blacklist rule id.</param>
            <param name="field">field used for blacklists rule.</param>
            <param name="value">value used for blacklists rule.</param>
            <param name="description">use an description for blacklisted rule.</param>
        </member>
        <member name="P:Conekta.net.Model.BlacklistRuleResponse.Id">
            <summary>
            Blacklist rule id
            </summary>
            <value>Blacklist rule id</value>
            <example>2fw8EWJusiRrxdPzT</example>
        </member>
        <member name="P:Conekta.net.Model.BlacklistRuleResponse.Field">
            <summary>
            field used for blacklists rule
            </summary>
            <value>field used for blacklists rule</value>
            <example>email</example>
        </member>
        <member name="P:Conekta.net.Model.BlacklistRuleResponse.Value">
            <summary>
            value used for blacklists rule
            </summary>
            <value>value used for blacklists rule</value>
            <example>email@example.com</example>
        </member>
        <member name="P:Conekta.net.Model.BlacklistRuleResponse.Description">
            <summary>
            use an description for blacklisted rule
            </summary>
            <value>use an description for blacklisted rule</value>
            <example>secure customer example@example.com</example>
        </member>
        <member name="M:Conekta.net.Model.BlacklistRuleResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.BlacklistRuleResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.BlacklistRuleResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.BlacklistRuleResponse.Equals(Conekta.net.Model.BlacklistRuleResponse)">
            <summary>
            Returns true if BlacklistRuleResponse instances are equal
            </summary>
            <param name="input">Instance of BlacklistRuleResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.BlacklistRuleResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.BlacklistRuleResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse">
            <summary>
            use for bank transfer responses
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.Int64,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Object},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse" /> class.
            </summary>
            <param name="bank">bank.</param>
            <param name="clabe">clabe.</param>
            <param name="description">description.</param>
            <param name="executedAt">executedAt.</param>
            <param name="expiresAt">expiresAt.</param>
            <param name="issuingAccountBank">issuingAccountBank.</param>
            <param name="issuingAccountNumber">issuingAccountNumber.</param>
            <param name="issuingAccountHolderName">issuingAccountHolderName.</param>
            <param name="issuingAccountTaxId">issuingAccountTaxId.</param>
            <param name="paymentAttempts">paymentAttempts.</param>
            <param name="receivingAccountHolderName">receivingAccountHolderName.</param>
            <param name="receivingAccountNumber">receivingAccountNumber.</param>
            <param name="receivingAccountBank">receivingAccountBank.</param>
            <param name="receivingAccountTaxId">receivingAccountTaxId.</param>
            <param name="referenceNumber">referenceNumber.</param>
            <param name="trackingCode">trackingCode.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.Bank">
            <summary>
            Gets or Sets Bank
            </summary>
            <example>STP</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.Clabe">
            <summary>
            Gets or Sets Clabe
            </summary>
            <example>646180111805034237</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.ExecutedAt">
            <summary>
            Gets or Sets ExecutedAt
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>1683053729</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.IssuingAccountBank">
            <summary>
            Gets or Sets IssuingAccountBank
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.IssuingAccountNumber">
            <summary>
            Gets or Sets IssuingAccountNumber
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.IssuingAccountHolderName">
            <summary>
            Gets or Sets IssuingAccountHolderName
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.IssuingAccountTaxId">
            <summary>
            Gets or Sets IssuingAccountTaxId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.PaymentAttempts">
            <summary>
            Gets or Sets PaymentAttempts
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.ReceivingAccountHolderName">
            <summary>
            Gets or Sets ReceivingAccountHolderName
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.ReceivingAccountNumber">
            <summary>
            Gets or Sets ReceivingAccountNumber
            </summary>
            <example>646180111805034237</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.ReceivingAccountBank">
            <summary>
            Gets or Sets ReceivingAccountBank
            </summary>
            <example>STP</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.ReceivingAccountTaxId">
            <summary>
            Gets or Sets ReceivingAccountTaxId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.ReferenceNumber">
            <summary>
            Gets or Sets ReferenceNumber
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.TrackingCode">
            <summary>
            Gets or Sets TrackingCode
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.Equals(Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse)">
            <summary>
            Returns true if ChargeDataPaymentMethodBankTransferResponse instances are equal
            </summary>
            <param name="input">Instance of ChargeDataPaymentMethodBankTransferResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodBankTransferResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeDataPaymentMethodCardResponse">
            <summary>
            use for card responses
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Object},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeDataPaymentMethodCardResponse" /> class.
            </summary>
            <param name="accountType">accountType.</param>
            <param name="authCode">authCode.</param>
            <param name="brand">brand.</param>
            <param name="contractId">Id sent for recurrent charges..</param>
            <param name="country">country.</param>
            <param name="expMonth">expMonth.</param>
            <param name="expYear">expYear.</param>
            <param name="fraudIndicators">fraudIndicators.</param>
            <param name="issuer">issuer.</param>
            <param name="last4">last4.</param>
            <param name="name">name.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.AccountType">
            <summary>
            Gets or Sets AccountType
            </summary>
            <example>Credit</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.AuthCode">
            <summary>
            Gets or Sets AuthCode
            </summary>
            <example>867372</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.Brand">
            <summary>
            Gets or Sets Brand
            </summary>
            <example>visa</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.ContractId">
            <summary>
            Id sent for recurrent charges.
            </summary>
            <value>Id sent for recurrent charges.</value>
            <example>S781317595</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.Country">
            <summary>
            Gets or Sets Country
            </summary>
            <example>MX</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.ExpMonth">
            <summary>
            Gets or Sets ExpMonth
            </summary>
            <example>02</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.ExpYear">
            <summary>
            Gets or Sets ExpYear
            </summary>
            <example>30</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.FraudIndicators">
            <summary>
            Gets or Sets FraudIndicators
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.Issuer">
            <summary>
            Gets or Sets Issuer
            </summary>
            <example>BANAMEX</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.Last4">
            <summary>
            Gets or Sets Last4
            </summary>
            <example>4242</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>Fulanito Perez</example>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.Equals(Conekta.net.Model.ChargeDataPaymentMethodCardResponse)">
            <summary>
            Returns true if ChargeDataPaymentMethodCardResponse instances are equal
            </summary>
            <param name="input">Instance of ChargeDataPaymentMethodCardResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCardResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeDataPaymentMethodCashResponse">
            <summary>
            use for cash responses
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.#ctor(System.Nullable{System.Int32},System.String,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeDataPaymentMethodCashResponse" /> class.
            </summary>
            <param name="authCode">authCode.</param>
            <param name="cashierId">cashierId.</param>
            <param name="reference">reference.</param>
            <param name="barcodeUrl">barcodeUrl.</param>
            <param name="expiresAt">expiresAt.</param>
            <param name="serviceName">serviceName.</param>
            <param name="store">store.</param>
            <param name="storeName">storeName.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.AuthCode">
            <summary>
            Gets or Sets AuthCode
            </summary>
            <example>542563</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.CashierId">
            <summary>
            Gets or Sets CashierId
            </summary>
            <example>OINM01010</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.Reference">
            <summary>
            Gets or Sets Reference
            </summary>
            <example>93000262276908</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.BarcodeUrl">
            <summary>
            Gets or Sets BarcodeUrl
            </summary>
            <example>https://pt-common-s3-stg.s3.amazonaws.com/644ebf80f2243197aad6cd8810375b905b613dbe.png?X-Amz-Algorithm&#x3D;AWS4-HMAC-SHA256&amp;X-Amz-Credential&#x3D;ASIA3UN6375MP4SLLCWV%2F20230203%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date&#x3D;20230203T215750Z&amp;X-Amz-Expires&#x3D;604800&amp;X-Amz-Security-Token&#x3D;IQoJb3JpZ2luX2VjEH4aCXVzLWVhc3QtMSJGMEQCICd79cu7DYu%2F4%2B3HnVVswydgU9yHcE9kmQIIk2TLoZJrAiBVZ0HxVSeboK5lhdQSqADjwQF62XX35jhC%2F2riB0M8uCqQBAj2%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDc5OTgwMTA4MTY4OCIMXWZds9ZI5hzUdbeGKuQDFreMyeWnWWPqDuGZ2%2BHk6usCr%2Fl096%2FNJh9xtf8htLu56K%2FhWUTx%2BjiqFWM2O%2FF5zTS%2BIV6TqkLDZ%2BQ5Jo1miQrRmR57YDz6uP2Yd1mNZ1ouq5ipnNjUuu5UWCCBAmqyZQsrVmeMQpSV2IB%2BTERCCcW2SukFEYU%2F20%2Fzy5orsoZ8DxOW460IymR3cWBk5u3Xh2cV6Y1RdPEwDEThhqYEF5w%2ByKbLENloMsI%2FUm6sG5PPrO3yQOAP9aK2muLJs9lXQRU%2FL%2FSsmS4FKSUFOqlN6YU%2Bi2Y%2FyGIKAJT2VDkngvz5Sl%2Fadj0j%2BPKftVRV5FcEhySB6Rl%2BSkPN7kVQMJp6pS8hMJ6JCyEA%2BA3eWYdIfKgQhWVXAR4oCBfJ62DH8FU3a7WfSjjpTwfVkiReWen3GGCYfUWETTVKp46MKnJ9PG0CD3KzxKV8VfmEGc5krK%2FI%2F%2BDV2wtSa%2F9qf1%2BK1YYJIK9qZGb25ljUiGhTB4T%2BMUOSQFjetiWUoOJc5Q3Jz%2FXJbiTAMTST39MhdbCgiMgfrc8OGKN5DOVbex33Z7dn0xf%2FOCkSqurhLaG08efKQBdhLNS0RlE9hbg9yZ2ywwtQIF39fI6A7eeH0T11a5HMlvm51u4rAffPHRuEJfwJoIuj%2F2s3QzDg7%2FWeBjqmAbnPOlGfysjrDdvHyG7HVnaX02kdG%2BI3Q4PFOO4Mjaa3ocpjcfPT70%2BZ5a%2FSv5vP0jDLGrLToeM9%2BAUlNepptICRu23a1tLGW4ri0twPA%2FZ4JDTtUUUgdblyG8bKpcUTNp4oOsdmLLBz3FVyr4c2xQbDZSu2zYOtoOxB18W0AC6kIbsMWVU55Bf0mBhPeBWxGrtM4Kw1SgHHlt%2F8vetQi2OwtUcg08c%3D&amp;X-Amz-SignedHeaders&#x3D;host&amp;X-Amz-Signature&#x3D;d06dfa41550003359f2aabc8006063a80dfd806a13a54d244024946a76aa9abc</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.ServiceName">
            <summary>
            Gets or Sets ServiceName
            </summary>
            <example>OxxoPay</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.Store">
            <summary>
            Gets or Sets Store
            </summary>
            <example>10MON50EDI</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.StoreName">
            <summary>
            Gets or Sets StoreName
            </summary>
            <example>OXXO</example>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.Equals(Conekta.net.Model.ChargeDataPaymentMethodCashResponse)">
            <summary>
            Returns true if ChargeDataPaymentMethodCashResponse instances are equal
            </summary>
            <param name="input">Instance of ChargeDataPaymentMethodCashResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeDataPaymentMethodCashResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeOrderResponse">
            <summary>
            ChargeOrderResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponse.#ctor(System.Int32,Conekta.net.Model.ChargeResponseChannel,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},Conekta.net.Model.ChargeOrderResponsePaymentMethod,System.String,System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeOrderResponse" /> class.
            </summary>
            <param name="amount">amount.</param>
            <param name="channel">channel.</param>
            <param name="createdAt">createdAt.</param>
            <param name="currency">currency.</param>
            <param name="customerId">customerId.</param>
            <param name="description">description.</param>
            <param name="deviceFingerprint">deviceFingerprint.</param>
            <param name="failureCode">failureCode.</param>
            <param name="failureMessage">failureMessage.</param>
            <param name="id">id.</param>
            <param name="livemode">livemode.</param>
            <param name="monthlyInstallments">monthlyInstallments.</param>
            <param name="varObject">varObject.</param>
            <param name="orderId">orderId.</param>
            <param name="paidAt">paidAt.</param>
            <param name="paymentMethod">paymentMethod.</param>
            <param name="referenceId">Reference ID of the charge.</param>
            <param name="refunds">refunds.</param>
            <param name="status">status.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
            <example>4321</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.Channel">
            <summary>
            Gets or Sets Channel
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1676386026</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.Currency">
            <summary>
            Gets or Sets Currency
            </summary>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.CustomerId">
            <summary>
            Gets or Sets CustomerId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.Description">
            <summary>
            Gets or Sets Description
            </summary>
            <example>Payment from order</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.DeviceFingerprint">
            <summary>
            Gets or Sets DeviceFingerprint
            </summary>
            <example>6FR3chaU4Y1nGAW5NAGd1rcjAKa142Ba</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.FailureCode">
            <summary>
            Gets or Sets FailureCode
            </summary>
            <example>suspected_fraud</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.FailureMessage">
            <summary>
            Gets or Sets FailureMessage
            </summary>
            <example>Este cargo ha sido declinado porque el comportamiento del comprador es sospechoso.</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>63efa757cf65380001aec040</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.MonthlyInstallments">
            <summary>
            Gets or Sets MonthlyInstallments
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.OrderId">
            <summary>
            Gets or Sets OrderId
            </summary>
            <example>ord_2tN73UdUSNrYRPD9r</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.PaidAt">
            <summary>
            Gets or Sets PaidAt
            </summary>
            <example>1676390742</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.PaymentMethod">
            <summary>
            Gets or Sets PaymentMethod
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.ReferenceId">
            <summary>
            Reference ID of the charge
            </summary>
            <value>Reference ID of the charge</value>
            <example>ref_2tN73UdUSNrYRPD9r</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.Refunds">
            <summary>
            Gets or Sets Refunds
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponse.Status">
            <summary>
            Gets or Sets Status
            </summary>
            <example>pending_payment</example>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponse.Equals(Conekta.net.Model.ChargeOrderResponse)">
            <summary>
            Returns true if ChargeOrderResponse instances are equal
            </summary>
            <param name="input">Instance of ChargeOrderResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeOrderResponsePaymentMethod">
            <summary>
            ChargeOrderResponsePaymentMethod
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.#ctor(Conekta.net.Model.PaymentMethodCash)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeOrderResponsePaymentMethod" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCash" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCash.</param>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.#ctor(Conekta.net.Model.PaymentMethodCard)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeOrderResponsePaymentMethod" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCard" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCard.</param>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.#ctor(Conekta.net.Model.PaymentMethodBankTransfer)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeOrderResponsePaymentMethod" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodBankTransfer" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodBankTransfer.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeOrderResponsePaymentMethod.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.GetPaymentMethodCash">
            <summary>
            Get the actual instance of `PaymentMethodCash`. If the actual instance is not `PaymentMethodCash`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCash</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.GetPaymentMethodCard">
            <summary>
            Get the actual instance of `PaymentMethodCard`. If the actual instance is not `PaymentMethodCard`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCard</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.GetPaymentMethodBankTransfer">
            <summary>
            Get the actual instance of `PaymentMethodBankTransfer`. If the actual instance is not `PaymentMethodBankTransfer`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodBankTransfer</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of ChargeOrderResponsePaymentMethod
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of ChargeOrderResponsePaymentMethod</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.Equals(Conekta.net.Model.ChargeOrderResponsePaymentMethod)">
            <summary>
            Returns true if ChargeOrderResponsePaymentMethod instances are equal
            </summary>
            <param name="input">Instance of ChargeOrderResponsePaymentMethod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeOrderResponsePaymentMethodJsonConverter">
            <summary>
            Custom JSON converter for ChargeOrderResponsePaymentMethod
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethodJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethodJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeOrderResponsePaymentMethodJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeRequest">
            <summary>
            The charges to be made
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequest.#ctor(System.Int32,Conekta.net.Model.ChargeRequestPaymentMethod,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeRequest" /> class.
            </summary>
            <param name="amount">amount.</param>
            <param name="paymentMethod">paymentMethod (required).</param>
            <param name="referenceId">Custom reference to add to the charge.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeRequest.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
            <example>40000</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeRequest.PaymentMethod">
            <summary>
            Gets or Sets PaymentMethod
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeRequest.ReferenceId">
            <summary>
            Custom reference to add to the charge
            </summary>
            <value>Custom reference to add to the charge</value>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequest.Equals(Conekta.net.Model.ChargeRequest)">
            <summary>
            Returns true if ChargeRequest instances are equal
            </summary>
            <param name="input">Instance of ChargeRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeRequestPaymentMethod">
            <summary>
            Payment method used in the charge. Go to the [payment methods](https://developers.conekta.com/reference/m%C3%A9todos-de-pago) section for more details 
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequestPaymentMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeRequestPaymentMethod" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequestPaymentMethod.#ctor(System.Int64,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeRequestPaymentMethod" /> class.
            </summary>
            <param name="expiresAt">Method expiration date as unix timestamp.</param>
            <param name="monthlyInstallments">How many months without interest to apply, it can be 3, 6, 9, 12 or 18.</param>
            <param name="type">type (required).</param>
            <param name="tokenId">tokenId.</param>
            <param name="paymentSourceId">paymentSourceId.</param>
            <param name="contractId">Optional id sent to indicate the bank contract for recurrent card charges..</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeRequestPaymentMethod.ExpiresAt">
            <summary>
            Method expiration date as unix timestamp
            </summary>
            <value>Method expiration date as unix timestamp</value>
            <example>1677196303</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeRequestPaymentMethod.MonthlyInstallments">
            <summary>
            How many months without interest to apply, it can be 3, 6, 9, 12 or 18
            </summary>
            <value>How many months without interest to apply, it can be 3, 6, 9, 12 or 18</value>
        </member>
        <member name="P:Conekta.net.Model.ChargeRequestPaymentMethod.Type">
            <summary>
            Gets or Sets Type
            </summary>
            <example>card</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeRequestPaymentMethod.TokenId">
            <summary>
            Gets or Sets TokenId
            </summary>
            <example>tok_2897348234</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeRequestPaymentMethod.PaymentSourceId">
            <summary>
            Gets or Sets PaymentSourceId
            </summary>
            <example>src_2tLkkyfMPh6v7pFry</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeRequestPaymentMethod.ContractId">
            <summary>
            Optional id sent to indicate the bank contract for recurrent card charges.
            </summary>
            <value>Optional id sent to indicate the bank contract for recurrent card charges.</value>
            <example>S781317595</example>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequestPaymentMethod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequestPaymentMethod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequestPaymentMethod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequestPaymentMethod.Equals(Conekta.net.Model.ChargeRequestPaymentMethod)">
            <summary>
            Returns true if ChargeRequestPaymentMethod instances are equal
            </summary>
            <param name="input">Instance of ChargeRequestPaymentMethod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequestPaymentMethod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeRequestPaymentMethod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeResponse">
            <summary>
            ChargeResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponse.#ctor(System.Int32,Conekta.net.Model.ChargeResponseChannel,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Nullable{System.Int32},Conekta.net.Model.ChargeResponsePaymentMethod,System.String,Conekta.net.Model.ChargeResponseRefunds,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponse" /> class.
            </summary>
            <param name="amount">amount.</param>
            <param name="channel">channel.</param>
            <param name="createdAt">createdAt.</param>
            <param name="currency">currency.</param>
            <param name="customerId">customerId.</param>
            <param name="description">description.</param>
            <param name="deviceFingerprint">deviceFingerprint.</param>
            <param name="failureCode">failureCode.</param>
            <param name="failureMessage">failureMessage.</param>
            <param name="id">id.</param>
            <param name="livemode">livemode.</param>
            <param name="varObject">varObject.</param>
            <param name="orderId">orderId.</param>
            <param name="paidAt">paidAt.</param>
            <param name="paymentMethod">paymentMethod.</param>
            <param name="referenceId">Reference ID of the charge.</param>
            <param name="refunds">refunds.</param>
            <param name="status">status.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
            <example>4321</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.Channel">
            <summary>
            Gets or Sets Channel
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1676386026</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.Currency">
            <summary>
            Gets or Sets Currency
            </summary>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.CustomerId">
            <summary>
            Gets or Sets CustomerId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.Description">
            <summary>
            Gets or Sets Description
            </summary>
            <example>Payment from order</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.DeviceFingerprint">
            <summary>
            Gets or Sets DeviceFingerprint
            </summary>
            <example>6FR3chaU4Y1nGAW5NAGd1rcjAKa142Ba</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.FailureCode">
            <summary>
            Gets or Sets FailureCode
            </summary>
            <example>suspected_fraud</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.FailureMessage">
            <summary>
            Gets or Sets FailureMessage
            </summary>
            <example>Este cargo ha sido declinado porque el comportamiento del comprador es sospechoso.</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>63efa757cf65380001aec040</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.OrderId">
            <summary>
            Gets or Sets OrderId
            </summary>
            <example>ord_2tN73UdUSNrYRPD9r</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.PaidAt">
            <summary>
            Gets or Sets PaidAt
            </summary>
            <example>1676390742</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.PaymentMethod">
            <summary>
            Gets or Sets PaymentMethod
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.ReferenceId">
            <summary>
            Reference ID of the charge
            </summary>
            <value>Reference ID of the charge</value>
            <example>ref_2tN73UdUSNrYRPD9r</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.Refunds">
            <summary>
            Gets or Sets Refunds
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponse.Status">
            <summary>
            Gets or Sets Status
            </summary>
            <example>pending_payment</example>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponse.Equals(Conekta.net.Model.ChargeResponse)">
            <summary>
            Returns true if ChargeResponse instances are equal
            </summary>
            <param name="input">Instance of ChargeResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeResponseChannel">
            <summary>
            ChargeResponseChannel
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseChannel.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponseChannel" /> class.
            </summary>
            <param name="segment">segment.</param>
            <param name="checkoutRequestId">checkoutRequestId.</param>
            <param name="checkoutRequestType">checkoutRequestType.</param>
            <param name="id">id.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseChannel.Segment">
            <summary>
            Gets or Sets Segment
            </summary>
            <example>Checkout</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseChannel.CheckoutRequestId">
            <summary>
            Gets or Sets CheckoutRequestId
            </summary>
            <example>6fca054a-8519-4c43-971e-cea35cc519bb</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseChannel.CheckoutRequestType">
            <summary>
            Gets or Sets CheckoutRequestType
            </summary>
            <example>HostedPayment</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseChannel.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>channel_2tNDzhA4Akmzj11AU</example>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseChannel.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseChannel.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseChannel.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseChannel.Equals(Conekta.net.Model.ChargeResponseChannel)">
            <summary>
            Returns true if ChargeResponseChannel instances are equal
            </summary>
            <param name="input">Instance of ChargeResponseChannel to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseChannel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseChannel.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeResponsePaymentMethod">
            <summary>
            ChargeResponsePaymentMethod
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.#ctor(Conekta.net.Model.PaymentMethodCash)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponsePaymentMethod" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCash" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCash.</param>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.#ctor(Conekta.net.Model.PaymentMethodCard)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponsePaymentMethod" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCard" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCard.</param>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.#ctor(Conekta.net.Model.PaymentMethodBankTransfer)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponsePaymentMethod" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodBankTransfer" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodBankTransfer.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponsePaymentMethod.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.GetPaymentMethodCash">
            <summary>
            Get the actual instance of `PaymentMethodCash`. If the actual instance is not `PaymentMethodCash`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCash</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.GetPaymentMethodCard">
            <summary>
            Get the actual instance of `PaymentMethodCard`. If the actual instance is not `PaymentMethodCard`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCard</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.GetPaymentMethodBankTransfer">
            <summary>
            Get the actual instance of `PaymentMethodBankTransfer`. If the actual instance is not `PaymentMethodBankTransfer`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodBankTransfer</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of ChargeResponsePaymentMethod
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of ChargeResponsePaymentMethod</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.Equals(Conekta.net.Model.ChargeResponsePaymentMethod)">
            <summary>
            Returns true if ChargeResponsePaymentMethod instances are equal
            </summary>
            <param name="input">Instance of ChargeResponsePaymentMethod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeResponsePaymentMethodJsonConverter">
            <summary>
            Custom JSON converter for ChargeResponsePaymentMethod
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethodJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethodJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponsePaymentMethodJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeResponseRefunds">
            <summary>
            ChargeResponseRefunds
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefunds.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponseRefunds" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefunds.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.ChargeResponseRefundsData})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponseRefunds" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">refunds.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefunds.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefunds.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefunds.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefunds.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefunds.Data">
            <summary>
            refunds
            </summary>
            <value>refunds</value>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefunds.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefunds.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefunds.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefunds.Equals(Conekta.net.Model.ChargeResponseRefunds)">
            <summary>
            Returns true if ChargeResponseRefunds instances are equal
            </summary>
            <param name="input">Instance of ChargeResponseRefunds to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefunds.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefunds.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeResponseRefundsAllOf">
            <summary>
            ChargeResponseRefundsAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.ChargeResponseRefundsData})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponseRefundsAllOf" /> class.
            </summary>
            <param name="data">refunds.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefundsAllOf.Data">
            <summary>
            refunds
            </summary>
            <value>refunds</value>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsAllOf.Equals(Conekta.net.Model.ChargeResponseRefundsAllOf)">
            <summary>
            Returns true if ChargeResponseRefundsAllOf instances are equal
            </summary>
            <param name="input">Instance of ChargeResponseRefundsAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeResponseRefundsData">
            <summary>
            ChargeResponseRefundsData
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponseRefundsData" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsData.#ctor(System.Int64,System.String,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeResponseRefundsData" /> class.
            </summary>
            <param name="amount">amount (required).</param>
            <param name="authCode">authCode.</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="expiresAt">refund expiration date.</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="status">refund status.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefundsData.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
            <example>-15000</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefundsData.AuthCode">
            <summary>
            Gets or Sets AuthCode
            </summary>
            <example>867372</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefundsData.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1678226878</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefundsData.ExpiresAt">
            <summary>
            refund expiration date
            </summary>
            <value>refund expiration date</value>
            <example>1678226878</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefundsData.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>6407b5bee1329a000175ba11</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefundsData.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>refund</example>
        </member>
        <member name="P:Conekta.net.Model.ChargeResponseRefundsData.Status">
            <summary>
            refund status
            </summary>
            <value>refund status</value>
            <example>pending</example>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsData.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsData.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsData.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsData.Equals(Conekta.net.Model.ChargeResponseRefundsData)">
            <summary>
            Returns true if ChargeResponseRefundsData instances are equal
            </summary>
            <param name="input">Instance of ChargeResponseRefundsData to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeResponseRefundsData.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargesDataResponse">
            <summary>
            ChargesDataResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargesDataResponse.#ctor(System.Int32,Conekta.net.Model.ChargeResponseChannel,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Nullable{System.Int32},Conekta.net.Model.ChargeResponsePaymentMethod,System.String,Conekta.net.Model.ChargeResponseRefunds,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargesDataResponse" /> class.
            </summary>
            <param name="amount">amount.</param>
            <param name="channel">channel.</param>
            <param name="createdAt">createdAt.</param>
            <param name="currency">currency.</param>
            <param name="customerId">customerId.</param>
            <param name="description">description.</param>
            <param name="deviceFingerprint">deviceFingerprint.</param>
            <param name="failureCode">failureCode.</param>
            <param name="failureMessage">failureMessage.</param>
            <param name="id">id.</param>
            <param name="livemode">livemode.</param>
            <param name="varObject">varObject.</param>
            <param name="orderId">orderId.</param>
            <param name="paidAt">paidAt.</param>
            <param name="paymentMethod">paymentMethod.</param>
            <param name="referenceId">Reference ID of the charge.</param>
            <param name="refunds">refunds.</param>
            <param name="status">status.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
            <example>4321</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.Channel">
            <summary>
            Gets or Sets Channel
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1676386026</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.Currency">
            <summary>
            Gets or Sets Currency
            </summary>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.CustomerId">
            <summary>
            Gets or Sets CustomerId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.Description">
            <summary>
            Gets or Sets Description
            </summary>
            <example>Payment from order</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.DeviceFingerprint">
            <summary>
            Gets or Sets DeviceFingerprint
            </summary>
            <example>6FR3chaU4Y1nGAW5NAGd1rcjAKa142Ba</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.FailureCode">
            <summary>
            Gets or Sets FailureCode
            </summary>
            <example>suspected_fraud</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.FailureMessage">
            <summary>
            Gets or Sets FailureMessage
            </summary>
            <example>Este cargo ha sido declinado porque el comportamiento del comprador es sospechoso.</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>63efa757cf65380001aec040</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.OrderId">
            <summary>
            Gets or Sets OrderId
            </summary>
            <example>ord_2tN73UdUSNrYRPD9r</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.PaidAt">
            <summary>
            Gets or Sets PaidAt
            </summary>
            <example>1676390742</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.PaymentMethod">
            <summary>
            Gets or Sets PaymentMethod
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.ReferenceId">
            <summary>
            Reference ID of the charge
            </summary>
            <value>Reference ID of the charge</value>
            <example>ref_2tN73UdUSNrYRPD9r</example>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.Refunds">
            <summary>
            Gets or Sets Refunds
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ChargesDataResponse.Status">
            <summary>
            Gets or Sets Status
            </summary>
            <example>pending_payment</example>
        </member>
        <member name="M:Conekta.net.Model.ChargesDataResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargesDataResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargesDataResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargesDataResponse.Equals(Conekta.net.Model.ChargesDataResponse)">
            <summary>
            Returns true if ChargesDataResponse instances are equal
            </summary>
            <param name="input">Instance of ChargesDataResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargesDataResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargesDataResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ChargeUpdateRequest">
            <summary>
            requested field for update a charge
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ChargeUpdateRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ChargeUpdateRequest" /> class.
            </summary>
            <param name="referenceId">custom reference id.</param>
        </member>
        <member name="P:Conekta.net.Model.ChargeUpdateRequest.ReferenceId">
            <summary>
            custom reference id
            </summary>
            <value>custom reference id</value>
            <example>278482642</example>
        </member>
        <member name="M:Conekta.net.Model.ChargeUpdateRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeUpdateRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeUpdateRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeUpdateRequest.Equals(Conekta.net.Model.ChargeUpdateRequest)">
            <summary>
            Returns true if ChargeUpdateRequest instances are equal
            </summary>
            <param name="input">Instance of ChargeUpdateRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeUpdateRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ChargeUpdateRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.Checkout">
            <summary>
            It is a sub-resource of the Order model that can be stipulated in order to configure its corresponding checkout
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Checkout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Checkout" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Checkout.#ctor(System.Collections.Generic.List{System.String},System.Int64,System.Boolean,System.Collections.Generic.List{System.Int32},System.String,System.Boolean,System.Nullable{System.Boolean},Conekta.net.Model.CheckoutOrderTemplate,System.Int32,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Checkout" /> class.
            </summary>
            <param name="allowedPaymentMethods">Those are the payment methods that will be available for the link (required).</param>
            <param name="expiresAt">It is the time when the link will expire. It is expressed in seconds since the Unix epoch. The valid range is from 2 to 365 days (the valid range will be taken from the next day of the creation date at 00:01 hrs)  (required).</param>
            <param name="monthlyInstallmentsEnabled">This flag allows you to specify if months without interest will be active..</param>
            <param name="monthlyInstallmentsOptions">This field allows you to specify the number of months without interest..</param>
            <param name="name">Reason for charge (required).</param>
            <param name="needsShippingContact">This flag allows you to fill in the shipping information at checkout..</param>
            <param name="onDemandEnabled">This flag allows you to specify if the link will be on demand..</param>
            <param name="orderTemplate">orderTemplate (required).</param>
            <param name="paymentsLimitCount">It is the number of payments that can be made through the link..</param>
            <param name="recurrent">false: single use. true: multiple payments (required).</param>
            <param name="type">It is the type of link that will be created. It must be a valid type. (required).</param>
        </member>
        <member name="P:Conekta.net.Model.Checkout.AllowedPaymentMethods">
            <summary>
            Those are the payment methods that will be available for the link
            </summary>
            <value>Those are the payment methods that will be available for the link</value>
            <example>[&quot;cash&quot;,&quot;card&quot;,&quot;bank_transfer&quot;]</example>
        </member>
        <member name="P:Conekta.net.Model.Checkout.ExpiresAt">
            <summary>
            It is the time when the link will expire. It is expressed in seconds since the Unix epoch. The valid range is from 2 to 365 days (the valid range will be taken from the next day of the creation date at 00:01 hrs) 
            </summary>
            <value>It is the time when the link will expire. It is expressed in seconds since the Unix epoch. The valid range is from 2 to 365 days (the valid range will be taken from the next day of the creation date at 00:01 hrs) </value>
            <example>1680397724</example>
        </member>
        <member name="P:Conekta.net.Model.Checkout.MonthlyInstallmentsEnabled">
            <summary>
            This flag allows you to specify if months without interest will be active.
            </summary>
            <value>This flag allows you to specify if months without interest will be active.</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.Checkout.MonthlyInstallmentsOptions">
            <summary>
            This field allows you to specify the number of months without interest.
            </summary>
            <value>This field allows you to specify the number of months without interest.</value>
            <example>[3,6,12]</example>
        </member>
        <member name="P:Conekta.net.Model.Checkout.Name">
            <summary>
            Reason for charge
            </summary>
            <value>Reason for charge</value>
            <example>Payment Link Name 1594138857</example>
        </member>
        <member name="P:Conekta.net.Model.Checkout.NeedsShippingContact">
            <summary>
            This flag allows you to fill in the shipping information at checkout.
            </summary>
            <value>This flag allows you to fill in the shipping information at checkout.</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.Checkout.OnDemandEnabled">
            <summary>
            This flag allows you to specify if the link will be on demand.
            </summary>
            <value>This flag allows you to specify if the link will be on demand.</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.Checkout.OrderTemplate">
            <summary>
            Gets or Sets OrderTemplate
            </summary>
        </member>
        <member name="P:Conekta.net.Model.Checkout.PaymentsLimitCount">
            <summary>
            It is the number of payments that can be made through the link.
            </summary>
            <value>It is the number of payments that can be made through the link.</value>
            <example>5</example>
        </member>
        <member name="P:Conekta.net.Model.Checkout.Recurrent">
            <summary>
            false: single use. true: multiple payments
            </summary>
            <value>false: single use. true: multiple payments</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.Checkout.Type">
            <summary>
            It is the type of link that will be created. It must be a valid type.
            </summary>
            <value>It is the type of link that will be created. It must be a valid type.</value>
            <example>PaymentLink</example>
        </member>
        <member name="M:Conekta.net.Model.Checkout.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Checkout.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Checkout.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Checkout.Equals(Conekta.net.Model.Checkout)">
            <summary>
            Returns true if Checkout instances are equal
            </summary>
            <param name="input">Instance of Checkout to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Checkout.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.Checkout.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CheckoutOrderTemplate">
            <summary>
            It maintains the attributes with which the order will be created when receiving a new payment.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutOrderTemplate" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplate.#ctor(System.String,Conekta.net.Model.CheckoutOrderTemplateCustomerInfo,System.Collections.Generic.List{Conekta.net.Model.Product},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutOrderTemplate" /> class.
            </summary>
            <param name="currency">It is the currency in which the order will be created. It must be a valid ISO 4217 currency code. (required).</param>
            <param name="customerInfo">customerInfo.</param>
            <param name="lineItems">They are the products to buy. Each contains the \&quot;unit price\&quot; and \&quot;quantity\&quot; parameters that are used to calculate the total amount of the order. (required).</param>
            <param name="metadata">It is a set of key-value pairs that you can attach to the order. It can be used to store additional information about the order in a structured format..</param>
        </member>
        <member name="P:Conekta.net.Model.CheckoutOrderTemplate.Currency">
            <summary>
            It is the currency in which the order will be created. It must be a valid ISO 4217 currency code.
            </summary>
            <value>It is the currency in which the order will be created. It must be a valid ISO 4217 currency code.</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutOrderTemplate.CustomerInfo">
            <summary>
            Gets or Sets CustomerInfo
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CheckoutOrderTemplate.LineItems">
            <summary>
            They are the products to buy. Each contains the \&quot;unit price\&quot; and \&quot;quantity\&quot; parameters that are used to calculate the total amount of the order.
            </summary>
            <value>They are the products to buy. Each contains the \&quot;unit price\&quot; and \&quot;quantity\&quot; parameters that are used to calculate the total amount of the order.</value>
        </member>
        <member name="P:Conekta.net.Model.CheckoutOrderTemplate.Metadata">
            <summary>
            It is a set of key-value pairs that you can attach to the order. It can be used to store additional information about the order in a structured format.
            </summary>
            <value>It is a set of key-value pairs that you can attach to the order. It can be used to store additional information about the order in a structured format.</value>
            <example>{&quot;key&quot;:&quot;value&quot;}</example>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplate.Equals(Conekta.net.Model.CheckoutOrderTemplate)">
            <summary>
            Returns true if CheckoutOrderTemplate instances are equal
            </summary>
            <param name="input">Instance of CheckoutOrderTemplate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo">
            <summary>
            It is the information of the customer who will be created when receiving a new payment.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.#ctor(Conekta.net.Model.CustomerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo" /> class
            with the <see cref="T:Conekta.net.Model.CustomerInfo" /> class
            </summary>
            <param name="actualInstance">An instance of CustomerInfo.</param>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.#ctor(Conekta.net.Model.CustomerInfoJustCustomerId)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo" /> class
            with the <see cref="T:Conekta.net.Model.CustomerInfoJustCustomerId" /> class
            </summary>
            <param name="actualInstance">An instance of CustomerInfoJustCustomerId.</param>
        </member>
        <member name="P:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.GetCustomerInfo">
            <summary>
            Get the actual instance of `CustomerInfo`. If the actual instance is not `CustomerInfo`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of CustomerInfo</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.GetCustomerInfoJustCustomerId">
            <summary>
            Get the actual instance of `CustomerInfoJustCustomerId`. If the actual instance is not `CustomerInfoJustCustomerId`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of CustomerInfoJustCustomerId</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of CheckoutOrderTemplateCustomerInfo
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of CheckoutOrderTemplateCustomerInfo</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.Equals(Conekta.net.Model.CheckoutOrderTemplateCustomerInfo)">
            <summary>
            Returns true if CheckoutOrderTemplateCustomerInfo instances are equal
            </summary>
            <param name="input">Instance of CheckoutOrderTemplateCustomerInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CheckoutOrderTemplateCustomerInfoJsonConverter">
            <summary>
            Custom JSON converter for CheckoutOrderTemplateCustomerInfo
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfoJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfoJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutOrderTemplateCustomerInfoJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.CheckoutRequest">
            <summary>
            [Checkout](https://developers.conekta.com/v2.1.0/reference/payment-link) details 
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutRequest.#ctor(System.Collections.Generic.List{System.String},System.Int64,System.String,System.Boolean,System.Collections.Generic.List{System.Int32},System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutRequest" /> class.
            </summary>
            <param name="allowedPaymentMethods">Are the payment methods available for this link (required).</param>
            <param name="expiresAt">Unix timestamp of checkout expiration.</param>
            <param name="failureUrl">Redirection url back to the site in case of failed payment, applies only to HostedPayment..</param>
            <param name="monthlyInstallmentsEnabled">monthlyInstallmentsEnabled.</param>
            <param name="monthlyInstallmentsOptions">monthlyInstallmentsOptions.</param>
            <param name="name">Reason for payment.</param>
            <param name="onDemandEnabled">onDemandEnabled.</param>
            <param name="successUrl">Redirection url back to the site in case of successful payment, applies only to HostedPayment.</param>
            <param name="type">This field represents the type of checkout.</param>
        </member>
        <member name="P:Conekta.net.Model.CheckoutRequest.AllowedPaymentMethods">
            <summary>
            Are the payment methods available for this link
            </summary>
            <value>Are the payment methods available for this link</value>
            <example>[&quot;cash&quot;,&quot;card&quot;,&quot;bank_transfer&quot;]</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutRequest.ExpiresAt">
            <summary>
            Unix timestamp of checkout expiration
            </summary>
            <value>Unix timestamp of checkout expiration</value>
        </member>
        <member name="P:Conekta.net.Model.CheckoutRequest.FailureUrl">
            <summary>
            Redirection url back to the site in case of failed payment, applies only to HostedPayment.
            </summary>
            <value>Redirection url back to the site in case of failed payment, applies only to HostedPayment.</value>
        </member>
        <member name="P:Conekta.net.Model.CheckoutRequest.MonthlyInstallmentsEnabled">
            <summary>
            Gets or Sets MonthlyInstallmentsEnabled
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutRequest.MonthlyInstallmentsOptions">
            <summary>
            Gets or Sets MonthlyInstallmentsOptions
            </summary>
            <example>[3,6,12]</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutRequest.Name">
            <summary>
            Reason for payment
            </summary>
            <value>Reason for payment</value>
        </member>
        <member name="P:Conekta.net.Model.CheckoutRequest.OnDemandEnabled">
            <summary>
            Gets or Sets OnDemandEnabled
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutRequest.SuccessUrl">
            <summary>
            Redirection url back to the site in case of successful payment, applies only to HostedPayment
            </summary>
            <value>Redirection url back to the site in case of successful payment, applies only to HostedPayment</value>
        </member>
        <member name="P:Conekta.net.Model.CheckoutRequest.Type">
            <summary>
            This field represents the type of checkout
            </summary>
            <value>This field represents the type of checkout</value>
            <example>Integration</example>
        </member>
        <member name="M:Conekta.net.Model.CheckoutRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutRequest.Equals(Conekta.net.Model.CheckoutRequest)">
            <summary>
            Returns true if CheckoutRequest instances are equal
            </summary>
            <param name="input">Instance of CheckoutRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CheckoutResponse">
            <summary>
            checkout response
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutResponse.#ctor(System.Collections.Generic.List{System.String},System.Boolean,System.Int32,System.Collections.Generic.List{System.Object},System.Int64,System.String,System.Boolean,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Collections.Generic.List{System.Int32},System.String,System.Boolean,System.String,System.Int32,System.Nullable{System.Int32},System.Boolean,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutResponse" /> class.
            </summary>
            <param name="allowedPaymentMethods">allowedPaymentMethods.</param>
            <param name="canNotExpire">canNotExpire.</param>
            <param name="emailsSent">emailsSent.</param>
            <param name="excludeCardNetworks">excludeCardNetworks.</param>
            <param name="expiresAt">expiresAt.</param>
            <param name="failureUrl">failureUrl.</param>
            <param name="force3dsFlow">force3dsFlow.</param>
            <param name="id">id (required).</param>
            <param name="livemode">livemode (required).</param>
            <param name="metadata">metadata.</param>
            <param name="monthlyInstallmentsEnabled">monthlyInstallmentsEnabled.</param>
            <param name="monthlyInstallmentsOptions">monthlyInstallmentsOptions.</param>
            <param name="name">Reason for charge (required).</param>
            <param name="needsShippingContact">needsShippingContact.</param>
            <param name="varObject">varObject (required).</param>
            <param name="paidPaymentsCount">paidPaymentsCount.</param>
            <param name="paymentsLimitCount">paymentsLimitCount.</param>
            <param name="recurrent">recurrent.</param>
            <param name="slug">slug.</param>
            <param name="smsSent">smsSent.</param>
            <param name="startsAt">startsAt.</param>
            <param name="status">status.</param>
            <param name="successUrl">successUrl.</param>
            <param name="type">type.</param>
            <param name="url">url.</param>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.AllowedPaymentMethods">
            <summary>
            Gets or Sets AllowedPaymentMethods
            </summary>
            <example>[&quot;cash&quot;,&quot;card&quot;,&quot;bank_transfer&quot;]</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.CanNotExpire">
            <summary>
            Gets or Sets CanNotExpire
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.EmailsSent">
            <summary>
            Gets or Sets EmailsSent
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.ExcludeCardNetworks">
            <summary>
            Gets or Sets ExcludeCardNetworks
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>1680397724</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.FailureUrl">
            <summary>
            Gets or Sets FailureUrl
            </summary>
            <example>https://pay.conekta.com/failure</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Force3dsFlow">
            <summary>
            Gets or Sets Force3dsFlow
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>b0bf16c4-18b9-445e-ba24-01604f329dbf</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
            <example>{&quot;key&quot;:&quot;value&quot;}</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.MonthlyInstallmentsEnabled">
            <summary>
            Gets or Sets MonthlyInstallmentsEnabled
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.MonthlyInstallmentsOptions">
            <summary>
            Gets or Sets MonthlyInstallmentsOptions
            </summary>
            <example>[3,6,12]</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Name">
            <summary>
            Reason for charge
            </summary>
            <value>Reason for charge</value>
            <example>Payment Link Name 1594138857</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.NeedsShippingContact">
            <summary>
            Gets or Sets NeedsShippingContact
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>checkout</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.PaidPaymentsCount">
            <summary>
            Gets or Sets PaidPaymentsCount
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.PaymentsLimitCount">
            <summary>
            Gets or Sets PaymentsLimitCount
            </summary>
            <example>5</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Recurrent">
            <summary>
            Gets or Sets Recurrent
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Slug">
            <summary>
            Gets or Sets Slug
            </summary>
            <example>b0bf16c418b9445eba2401604f329dbf</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.SmsSent">
            <summary>
            Gets or Sets SmsSent
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.StartsAt">
            <summary>
            Gets or Sets StartsAt
            </summary>
            <example>1677650400</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Status">
            <summary>
            Gets or Sets Status
            </summary>
            <example>Issued</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.SuccessUrl">
            <summary>
            Gets or Sets SuccessUrl
            </summary>
            <example>https://pay.conekta.com/success</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Type">
            <summary>
            Gets or Sets Type
            </summary>
            <example>PaymentLink</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutResponse.Url">
            <summary>
            Gets or Sets Url
            </summary>
            <example>https://pay.conekta.com/link/b0bf16c418b9445eba2401604f329dbf</example>
        </member>
        <member name="M:Conekta.net.Model.CheckoutResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutResponse.Equals(Conekta.net.Model.CheckoutResponse)">
            <summary>
            Returns true if CheckoutResponse instances are equal
            </summary>
            <param name="input">Instance of CheckoutResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CheckoutsResponse">
            <summary>
            CheckoutsResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutsResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.CheckoutResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutsResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.CheckoutsResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutsResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutsResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutsResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.CheckoutsResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponse.Equals(Conekta.net.Model.CheckoutsResponse)">
            <summary>
            Returns true if CheckoutsResponse instances are equal
            </summary>
            <param name="input">Instance of CheckoutsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CheckoutsResponseAllOf">
            <summary>
            CheckoutsResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.CheckoutResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CheckoutsResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.CheckoutsResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponseAllOf.Equals(Conekta.net.Model.CheckoutsResponseAllOf)">
            <summary>
            Returns true if CheckoutsResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of CheckoutsResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CheckoutsResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CompanyFiscalInfoAddressResponse">
            <summary>
            Company fiscal info address model
            </summary>
        </member>
        <member name="T:Conekta.net.Model.CompanyFiscalInfoAddressResponse.ObjectEnum">
            <summary>
            The resource&#39;s type
            </summary>
            <value>The resource&#39;s type</value>
        </member>
        <member name="F:Conekta.net.Model.CompanyFiscalInfoAddressResponse.ObjectEnum.Address">
            <summary>
            Enum Address for value: address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoAddressResponse.VarObject">
            <summary>
            The resource&#39;s type
            </summary>
            <value>The resource&#39;s type</value>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoAddressResponse.#ctor(System.Nullable{Conekta.net.Model.CompanyFiscalInfoAddressResponse.ObjectEnum},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CompanyFiscalInfoAddressResponse" /> class.
            </summary>
            <param name="varObject">The resource&#39;s type.</param>
            <param name="street1">Street Address.</param>
            <param name="street2">Colonia.</param>
            <param name="city">City.</param>
            <param name="state">State.</param>
            <param name="country">Country.</param>
            <param name="postalCode">Postal code.</param>
            <param name="externalNumber">Street number.</param>
            <param name="internalNumber">Unit / apartment number.</param>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoAddressResponse.Street1">
            <summary>
            Street Address
            </summary>
            <value>Street Address</value>
            <example>Calle 13</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoAddressResponse.Street2">
            <summary>
            Colonia
            </summary>
            <value>Colonia</value>
            <example>Navarte</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoAddressResponse.City">
            <summary>
            City
            </summary>
            <value>City</value>
            <example>Cuauhtémoc</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoAddressResponse.State">
            <summary>
            State
            </summary>
            <value>State</value>
            <example>Ciudad de México</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoAddressResponse.Country">
            <summary>
            Country
            </summary>
            <value>Country</value>
            <example>MX</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoAddressResponse.PostalCode">
            <summary>
            Postal code
            </summary>
            <value>Postal code</value>
            <example>3072</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoAddressResponse.ExternalNumber">
            <summary>
            Street number
            </summary>
            <value>Street number</value>
            <example>123</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoAddressResponse.InternalNumber">
            <summary>
            Unit / apartment number
            </summary>
            <value>Unit / apartment number</value>
            <example>123</example>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoAddressResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoAddressResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoAddressResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoAddressResponse.Equals(Conekta.net.Model.CompanyFiscalInfoAddressResponse)">
            <summary>
            Returns true if CompanyFiscalInfoAddressResponse instances are equal
            </summary>
            <param name="input">Instance of CompanyFiscalInfoAddressResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoAddressResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoAddressResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CompanyFiscalInfoResponse">
            <summary>
            Company fiscal info model
            </summary>
        </member>
        <member name="T:Conekta.net.Model.CompanyFiscalInfoResponse.ObjectEnum">
            <summary>
            The resource&#39;s type
            </summary>
            <value>The resource&#39;s type</value>
        </member>
        <member name="F:Conekta.net.Model.CompanyFiscalInfoResponse.ObjectEnum.FiscalInfo">
            <summary>
            Enum FiscalInfo for value: fiscal_info
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoResponse.VarObject">
            <summary>
            The resource&#39;s type
            </summary>
            <value>The resource&#39;s type</value>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoResponse.#ctor(System.Nullable{Conekta.net.Model.CompanyFiscalInfoResponse.ObjectEnum},System.String,System.String,System.String,System.String,System.String,Conekta.net.Model.CompanyFiscalInfoAddressResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CompanyFiscalInfoResponse" /> class.
            </summary>
            <param name="varObject">The resource&#39;s type.</param>
            <param name="taxId">Tax ID of the company.</param>
            <param name="legalEntityName">Legal name of the company.</param>
            <param name="businessType">Business type of the company.</param>
            <param name="phone">Phone number of the company.</param>
            <param name="physicalPersonBusinessType">Business type if &#39;persona_fisica&#39;.</param>
            <param name="address">address.</param>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoResponse.TaxId">
            <summary>
            Tax ID of the company
            </summary>
            <value>Tax ID of the company</value>
            <example>XAXX010101000</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoResponse.LegalEntityName">
            <summary>
            Legal name of the company
            </summary>
            <value>Legal name of the company</value>
            <example>Child Company A</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoResponse.BusinessType">
            <summary>
            Business type of the company
            </summary>
            <value>Business type of the company</value>
            <example>persona_moral</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoResponse.Phone">
            <summary>
            Phone number of the company
            </summary>
            <value>Phone number of the company</value>
            <example>5555555555</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoResponse.PhysicalPersonBusinessType">
            <summary>
            Business type if &#39;persona_fisica&#39;
            </summary>
            <value>Business type if &#39;persona_fisica&#39;</value>
        </member>
        <member name="P:Conekta.net.Model.CompanyFiscalInfoResponse.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoResponse.Equals(Conekta.net.Model.CompanyFiscalInfoResponse)">
            <summary>
            Returns true if CompanyFiscalInfoResponse instances are equal
            </summary>
            <param name="input">Instance of CompanyFiscalInfoResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyFiscalInfoResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CompanyPayoutDestinationResponse">
            <summary>
            Company payout destination model
            </summary>
        </member>
        <member name="T:Conekta.net.Model.CompanyPayoutDestinationResponse.ObjectEnum">
            <summary>
            The resource&#39;s type
            </summary>
            <value>The resource&#39;s type</value>
        </member>
        <member name="F:Conekta.net.Model.CompanyPayoutDestinationResponse.ObjectEnum.PayoutDestination">
            <summary>
            Enum PayoutDestination for value: payout_destination
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CompanyPayoutDestinationResponse.VarObject">
            <summary>
            The resource&#39;s type
            </summary>
            <value>The resource&#39;s type</value>
        </member>
        <member name="T:Conekta.net.Model.CompanyPayoutDestinationResponse.TypeEnum">
            <summary>
            Type of the payout destination
            </summary>
            <value>Type of the payout destination</value>
        </member>
        <member name="F:Conekta.net.Model.CompanyPayoutDestinationResponse.TypeEnum.BankAccount">
            <summary>
            Enum BankAccount for value: bank_account
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CompanyPayoutDestinationResponse.Type">
            <summary>
            Type of the payout destination
            </summary>
            <value>Type of the payout destination</value>
        </member>
        <member name="M:Conekta.net.Model.CompanyPayoutDestinationResponse.#ctor(System.Nullable{Conekta.net.Model.CompanyPayoutDestinationResponse.ObjectEnum},System.String,System.String,System.String,System.Nullable{Conekta.net.Model.CompanyPayoutDestinationResponse.TypeEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CompanyPayoutDestinationResponse" /> class.
            </summary>
            <param name="varObject">The resource&#39;s type.</param>
            <param name="currency">currency of the receiving account.</param>
            <param name="accountHolderName">Name of the account holder.</param>
            <param name="bank">Name of the bank.</param>
            <param name="type">Type of the payout destination.</param>
            <param name="accountNumber">Account number of the receiving account.</param>
        </member>
        <member name="P:Conekta.net.Model.CompanyPayoutDestinationResponse.Currency">
            <summary>
            currency of the receiving account
            </summary>
            <value>currency of the receiving account</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyPayoutDestinationResponse.AccountHolderName">
            <summary>
            Name of the account holder
            </summary>
            <value>Name of the account holder</value>
            <example>Child Company A</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyPayoutDestinationResponse.Bank">
            <summary>
            Name of the bank
            </summary>
            <value>Name of the bank</value>
            <example>BBVA</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyPayoutDestinationResponse.AccountNumber">
            <summary>
            Account number of the receiving account
            </summary>
            <value>Account number of the receiving account</value>
            <example>123456789012345678</example>
        </member>
        <member name="M:Conekta.net.Model.CompanyPayoutDestinationResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyPayoutDestinationResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyPayoutDestinationResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyPayoutDestinationResponse.Equals(Conekta.net.Model.CompanyPayoutDestinationResponse)">
            <summary>
            Returns true if CompanyPayoutDestinationResponse instances are equal
            </summary>
            <param name="input">Instance of CompanyPayoutDestinationResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyPayoutDestinationResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyPayoutDestinationResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CompanyResponse">
            <summary>
            Company model
            </summary>
        </member>
        <member name="T:Conekta.net.Model.CompanyResponse.ObjectEnum">
            <summary>
            The resource&#39;s type
            </summary>
            <value>The resource&#39;s type</value>
        </member>
        <member name="F:Conekta.net.Model.CompanyResponse.ObjectEnum.Company">
            <summary>
            Enum Company for value: company
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CompanyResponse.VarObject">
            <summary>
            The resource&#39;s type
            </summary>
            <value>The resource&#39;s type</value>
        </member>
        <member name="M:Conekta.net.Model.CompanyResponse.#ctor(System.String,System.Int64,System.String,System.Nullable{Conekta.net.Model.CompanyResponse.ObjectEnum},System.String,System.Boolean,Conekta.net.Model.CompanyPayoutDestinationResponse,Conekta.net.Model.CompanyFiscalInfoResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CompanyResponse" /> class.
            </summary>
            <param name="id">The child company&#39;s unique identifier.</param>
            <param name="createdAt">The resource&#39;s creation date (unix timestamp).</param>
            <param name="name">The child company&#39;s name.</param>
            <param name="varObject">The resource&#39;s type.</param>
            <param name="parentCompanyId">Id of the parent company.</param>
            <param name="useParentFiscalData">Whether the parent company&#39;s fiscal data is to be used for liquidation and tax purposes.</param>
            <param name="payoutDestination">payoutDestination.</param>
            <param name="fiscalInfo">fiscalInfo.</param>
        </member>
        <member name="P:Conekta.net.Model.CompanyResponse.Id">
            <summary>
            The child company&#39;s unique identifier
            </summary>
            <value>The child company&#39;s unique identifier</value>
            <example>6441bb27659a060465da7335</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyResponse.CreatedAt">
            <summary>
            The resource&#39;s creation date (unix timestamp)
            </summary>
            <value>The resource&#39;s creation date (unix timestamp)</value>
            <example>1680397724</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyResponse.Name">
            <summary>
            The child company&#39;s name
            </summary>
            <value>The child company&#39;s name</value>
            <example>Child Company A</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyResponse.ParentCompanyId">
            <summary>
            Id of the parent company
            </summary>
            <value>Id of the parent company</value>
            <example>6441bb3c62db5812e7920c31</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyResponse.UseParentFiscalData">
            <summary>
            Whether the parent company&#39;s fiscal data is to be used for liquidation and tax purposes
            </summary>
            <value>Whether the parent company&#39;s fiscal data is to be used for liquidation and tax purposes</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CompanyResponse.PayoutDestination">
            <summary>
            Gets or Sets PayoutDestination
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CompanyResponse.FiscalInfo">
            <summary>
            Gets or Sets FiscalInfo
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CompanyResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyResponse.Equals(Conekta.net.Model.CompanyResponse)">
            <summary>
            Returns true if CompanyResponse instances are equal
            </summary>
            <param name="input">Instance of CompanyResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CompanyResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse">
            <summary>
            CreateCustomerFiscalEntitiesResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.#ctor(Conekta.net.Model.CustomerFiscalEntitiesRequestAddress,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Int64,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse" /> class.
            </summary>
            <param name="address">address (required).</param>
            <param name="taxId">taxId.</param>
            <param name="email">email.</param>
            <param name="phone">phone.</param>
            <param name="metadata">metadata.</param>
            <param name="companyName">companyName.</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.TaxId">
            <summary>
            Gets or Sets TaxId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.Email">
            <summary>
            Gets or Sets Email
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.CompanyName">
            <summary>
            Gets or Sets CompanyName
            </summary>
            <example>conekta</example>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>ship_cont_2tKZsTYcsryyu7Ah8</example>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>shipping_contact</example>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>cus_2tKcHxhTz7xU5SymF</example>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.Equals(Conekta.net.Model.CreateCustomerFiscalEntitiesResponse)">
            <summary>
            Returns true if CreateCustomerFiscalEntitiesResponse instances are equal
            </summary>
            <param name="input">Instance of CreateCustomerFiscalEntitiesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf">
            <summary>
            CreateCustomerFiscalEntitiesResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.#ctor(System.String,System.String,System.Int64,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf" /> class.
            </summary>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>ship_cont_2tKZsTYcsryyu7Ah8</example>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>shipping_contact</example>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>cus_2tKcHxhTz7xU5SymF</example>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.Equals(Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf)">
            <summary>
            Returns true if CreateCustomerFiscalEntitiesResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of CreateCustomerFiscalEntitiesResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerFiscalEntitiesResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CreateCustomerPaymentMethodsRequest">
            <summary>
            Contains details of the payment methods that the customer has active or has used in Conekta
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.#ctor(Conekta.net.Model.PaymentMethodCardRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerPaymentMethodsRequest" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCardRequest" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCardRequest.</param>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.#ctor(Conekta.net.Model.PaymentMethodCashRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerPaymentMethodsRequest" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCashRequest" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCashRequest.</param>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.#ctor(Conekta.net.Model.PaymentMethodSpeiRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerPaymentMethodsRequest" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRequest" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodSpeiRequest.</param>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.GetPaymentMethodCardRequest">
            <summary>
            Get the actual instance of `PaymentMethodCardRequest`. If the actual instance is not `PaymentMethodCardRequest`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCardRequest</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.GetPaymentMethodCashRequest">
            <summary>
            Get the actual instance of `PaymentMethodCashRequest`. If the actual instance is not `PaymentMethodCashRequest`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCashRequest</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.GetPaymentMethodSpeiRequest">
            <summary>
            Get the actual instance of `PaymentMethodSpeiRequest`. If the actual instance is not `PaymentMethodSpeiRequest`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodSpeiRequest</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of CreateCustomerPaymentMethodsRequest
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of CreateCustomerPaymentMethodsRequest</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.Equals(Conekta.net.Model.CreateCustomerPaymentMethodsRequest)">
            <summary>
            Returns true if CreateCustomerPaymentMethodsRequest instances are equal
            </summary>
            <param name="input">Instance of CreateCustomerPaymentMethodsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CreateCustomerPaymentMethodsRequestJsonConverter">
            <summary>
            Custom JSON converter for CreateCustomerPaymentMethodsRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequestJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequestJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsRequestJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.CreateCustomerPaymentMethodsResponse">
            <summary>
            CreateCustomerPaymentMethodsResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.#ctor(Conekta.net.Model.PaymentMethodCashResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerPaymentMethodsResponse" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCashResponse" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCashResponse.</param>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.#ctor(Conekta.net.Model.PaymentMethodCardResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerPaymentMethodsResponse" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCardResponse" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCardResponse.</param>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.#ctor(Conekta.net.Model.PaymentMethodSpeiRecurrent)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateCustomerPaymentMethodsResponse" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRecurrent" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodSpeiRecurrent.</param>
        </member>
        <member name="P:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.GetPaymentMethodCashResponse">
            <summary>
            Get the actual instance of `PaymentMethodCashResponse`. If the actual instance is not `PaymentMethodCashResponse`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCashResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.GetPaymentMethodCardResponse">
            <summary>
            Get the actual instance of `PaymentMethodCardResponse`. If the actual instance is not `PaymentMethodCardResponse`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCardResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.GetPaymentMethodSpeiRecurrent">
            <summary>
            Get the actual instance of `PaymentMethodSpeiRecurrent`. If the actual instance is not `PaymentMethodSpeiRecurrent`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodSpeiRecurrent</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of CreateCustomerPaymentMethodsResponse
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of CreateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.Equals(Conekta.net.Model.CreateCustomerPaymentMethodsResponse)">
            <summary>
            Returns true if CreateCustomerPaymentMethodsResponse instances are equal
            </summary>
            <param name="input">Instance of CreateCustomerPaymentMethodsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CreateCustomerPaymentMethodsResponseJsonConverter">
            <summary>
            Custom JSON converter for CreateCustomerPaymentMethodsResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponseJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponseJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateCustomerPaymentMethodsResponseJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.CreateRiskRulesData">
            <summary>
            CreateRiskRulesData
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateRiskRulesData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateRiskRulesData" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CreateRiskRulesData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CreateRiskRulesData" /> class.
            </summary>
            <param name="description">Description of the rule (required).</param>
            <param name="field">Field to be used for the rule (required).</param>
            <param name="value">Value to be used for the rule (required).</param>
        </member>
        <member name="P:Conekta.net.Model.CreateRiskRulesData.Description">
            <summary>
            Description of the rule
            </summary>
            <value>Description of the rule</value>
            <example>this client email was verified at 20/09/22 by internal process</example>
        </member>
        <member name="P:Conekta.net.Model.CreateRiskRulesData.Field">
            <summary>
            Field to be used for the rule
            </summary>
            <value>Field to be used for the rule</value>
            <example>email | phone | card_token</example>
        </member>
        <member name="P:Conekta.net.Model.CreateRiskRulesData.Value">
            <summary>
            Value to be used for the rule
            </summary>
            <value>Value to be used for the rule</value>
            <example>email@example.com | 818081808180 | src_2qUCNd5AyQqfPMBuV</example>
        </member>
        <member name="M:Conekta.net.Model.CreateRiskRulesData.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateRiskRulesData.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateRiskRulesData.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateRiskRulesData.Equals(Conekta.net.Model.CreateRiskRulesData)">
            <summary>
            Returns true if CreateRiskRulesData instances are equal
            </summary>
            <param name="input">Instance of CreateRiskRulesData to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateRiskRulesData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CreateRiskRulesData.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.Customer">
            <summary>
            a customer
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Customer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Customer" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Customer.#ctor(Conekta.net.Model.CustomerAntifraudInfo,System.Boolean,System.String,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.CustomerFiscalEntitiesRequest},System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Collections.Generic.List{Conekta.net.Model.CustomerPaymentMethodsRequest},System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.CustomerShippingContacts},Conekta.net.Model.SubscriptionRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Customer" /> class.
            </summary>
            <param name="antifraudInfo">antifraudInfo.</param>
            <param name="corporate">It is a value that allows identifying if the email is corporate or not. (default to false).</param>
            <param name="customReference">It is an undefined value..</param>
            <param name="email">An email address is a series of customizable characters followed by a universal Internet symbol, the at symbol (@), the name of a host server, and a web domain ending (.mx, .com, .org, . net, etc). (required).</param>
            <param name="defaultPaymentSourceId">It is a parameter that allows to identify in the response, the Conekta ID of a payment method (payment_id).</param>
            <param name="defaultShippingContactId">It is a parameter that allows to identify in the response, the Conekta ID of the shipping address (shipping_contact).</param>
            <param name="fiscalEntities">fiscalEntities.</param>
            <param name="metadata">metadata.</param>
            <param name="name">Client&#39;s name (required).</param>
            <param name="paymentSources">Contains details of the payment methods that the customer has active or has used in Conekta.</param>
            <param name="phone">Is the customer&#39;s phone number (required).</param>
            <param name="planId">Contains the ID of a plan, which could together with name, email and phone create a client directly to a subscription.</param>
            <param name="shippingContacts">Contains the detail of the shipping addresses that the client has active or has used in Conekta.</param>
            <param name="subscription">subscription.</param>
        </member>
        <member name="P:Conekta.net.Model.Customer.AntifraudInfo">
            <summary>
            Gets or Sets AntifraudInfo
            </summary>
        </member>
        <member name="P:Conekta.net.Model.Customer.Corporate">
            <summary>
            It is a value that allows identifying if the email is corporate or not.
            </summary>
            <value>It is a value that allows identifying if the email is corporate or not.</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.Customer.CustomReference">
            <summary>
            It is an undefined value.
            </summary>
            <value>It is an undefined value.</value>
        </member>
        <member name="P:Conekta.net.Model.Customer.Email">
            <summary>
            An email address is a series of customizable characters followed by a universal Internet symbol, the at symbol (@), the name of a host server, and a web domain ending (.mx, .com, .org, . net, etc).
            </summary>
            <value>An email address is a series of customizable characters followed by a universal Internet symbol, the at symbol (@), the name of a host server, and a web domain ending (.mx, .com, .org, . net, etc).</value>
            <example>miguel@gmail.com</example>
        </member>
        <member name="P:Conekta.net.Model.Customer.DefaultPaymentSourceId">
            <summary>
            It is a parameter that allows to identify in the response, the Conekta ID of a payment method (payment_id)
            </summary>
            <value>It is a parameter that allows to identify in the response, the Conekta ID of a payment method (payment_id)</value>
            <example>src_1a2b3c4d5e6f7g8h</example>
        </member>
        <member name="P:Conekta.net.Model.Customer.DefaultShippingContactId">
            <summary>
            It is a parameter that allows to identify in the response, the Conekta ID of the shipping address (shipping_contact)
            </summary>
            <value>It is a parameter that allows to identify in the response, the Conekta ID of the shipping address (shipping_contact)</value>
            <example>ship_cont_1a2b3c4d5e6f7g8h</example>
        </member>
        <member name="P:Conekta.net.Model.Customer.FiscalEntities">
            <summary>
            Gets or Sets FiscalEntities
            </summary>
        </member>
        <member name="P:Conekta.net.Model.Customer.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.Customer.Name">
            <summary>
            Client&#39;s name
            </summary>
            <value>Client&#39;s name</value>
            <example>miguel</example>
        </member>
        <member name="P:Conekta.net.Model.Customer.PaymentSources">
            <summary>
            Contains details of the payment methods that the customer has active or has used in Conekta
            </summary>
            <value>Contains details of the payment methods that the customer has active or has used in Conekta</value>
        </member>
        <member name="P:Conekta.net.Model.Customer.Phone">
            <summary>
            Is the customer&#39;s phone number
            </summary>
            <value>Is the customer&#39;s phone number</value>
            <example>5215555555555</example>
        </member>
        <member name="P:Conekta.net.Model.Customer.PlanId">
            <summary>
            Contains the ID of a plan, which could together with name, email and phone create a client directly to a subscription
            </summary>
            <value>Contains the ID of a plan, which could together with name, email and phone create a client directly to a subscription</value>
            <example>plan_987234823</example>
        </member>
        <member name="P:Conekta.net.Model.Customer.ShippingContacts">
            <summary>
            Contains the detail of the shipping addresses that the client has active or has used in Conekta
            </summary>
            <value>Contains the detail of the shipping addresses that the client has active or has used in Conekta</value>
        </member>
        <member name="P:Conekta.net.Model.Customer.Subscription">
            <summary>
            Gets or Sets Subscription
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Customer.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Customer.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Customer.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Customer.Equals(Conekta.net.Model.Customer)">
            <summary>
            Returns true if Customer instances are equal
            </summary>
            <param name="input">Instance of Customer to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Customer.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.Customer.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerAddress">
            <summary>
            CustomerAddress
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerAddress" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerAddress" /> class.
            </summary>
            <param name="street1">street1 (required).</param>
            <param name="street2">street2.</param>
            <param name="postalCode">postalCode (required).</param>
            <param name="city">city (required).</param>
            <param name="state">state.</param>
            <param name="country">this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).</param>
            <param name="residential">residential (default to false).</param>
            <param name="externalNumber">externalNumber.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerAddress.Street1">
            <summary>
            Gets or Sets Street1
            </summary>
            <example>Nuevo Leon 254</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerAddress.Street2">
            <summary>
            Gets or Sets Street2
            </summary>
            <example>Departamento 404</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerAddress.PostalCode">
            <summary>
            Gets or Sets PostalCode
            </summary>
            <example>06100</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerAddress.City">
            <summary>
            Gets or Sets City
            </summary>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerAddress.State">
            <summary>
            Gets or Sets State
            </summary>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerAddress.Country">
            <summary>
            this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            </summary>
            <value>this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)</value>
            <example>MX</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerAddress.Residential">
            <summary>
            Gets or Sets Residential
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerAddress.ExternalNumber">
            <summary>
            Gets or Sets ExternalNumber
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerAddress.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAddress.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAddress.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAddress.Equals(Conekta.net.Model.CustomerAddress)">
            <summary>
            Returns true if CustomerAddress instances are equal
            </summary>
            <param name="input">Instance of CustomerAddress to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAddress.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAddress.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerAntifraudInfo">
            <summary>
            CustomerAntifraudInfo
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfo.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerAntifraudInfo" /> class.
            </summary>
            <param name="accountCreatedAt">accountCreatedAt.</param>
            <param name="firstPaidAt">firstPaidAt.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerAntifraudInfo.AccountCreatedAt">
            <summary>
            Gets or Sets AccountCreatedAt
            </summary>
            <example>1484040996</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerAntifraudInfo.FirstPaidAt">
            <summary>
            Gets or Sets FirstPaidAt
            </summary>
            <example>1485151007</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfo.Equals(Conekta.net.Model.CustomerAntifraudInfo)">
            <summary>
            Returns true if CustomerAntifraudInfo instances are equal
            </summary>
            <param name="input">Instance of CustomerAntifraudInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerAntifraudInfoResponse">
            <summary>
            CustomerAntifraudInfoResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfoResponse.#ctor(System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerAntifraudInfoResponse" /> class.
            </summary>
            <param name="firstPaidAt">firstPaidAt.</param>
            <param name="accountCreatedAt">accountCreatedAt.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerAntifraudInfoResponse.FirstPaidAt">
            <summary>
            Gets or Sets FirstPaidAt
            </summary>
            <example>1485151007</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerAntifraudInfoResponse.AccountCreatedAt">
            <summary>
            Gets or Sets AccountCreatedAt
            </summary>
            <example>1484040996</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfoResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfoResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfoResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfoResponse.Equals(Conekta.net.Model.CustomerAntifraudInfoResponse)">
            <summary>
            Returns true if CustomerAntifraudInfoResponse instances are equal
            </summary>
            <param name="input">Instance of CustomerAntifraudInfoResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfoResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerAntifraudInfoResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerFiscalEntitiesDataResponse">
            <summary>
            CustomerFiscalEntitiesDataResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerFiscalEntitiesDataResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.#ctor(Conekta.net.Model.CustomerFiscalEntitiesRequestAddress,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Int64,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerFiscalEntitiesDataResponse" /> class.
            </summary>
            <param name="address">address (required).</param>
            <param name="taxId">taxId.</param>
            <param name="email">email.</param>
            <param name="phone">phone.</param>
            <param name="metadata">metadata.</param>
            <param name="companyName">companyName.</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.TaxId">
            <summary>
            Gets or Sets TaxId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.Email">
            <summary>
            Gets or Sets Email
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.CompanyName">
            <summary>
            Gets or Sets CompanyName
            </summary>
            <example>conekta</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>ship_cont_2tKZsTYcsryyu7Ah8</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>shipping_contact</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>cus_2tKcHxhTz7xU5SymF</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.Equals(Conekta.net.Model.CustomerFiscalEntitiesDataResponse)">
            <summary>
            Returns true if CustomerFiscalEntitiesDataResponse instances are equal
            </summary>
            <param name="input">Instance of CustomerFiscalEntitiesDataResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesDataResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerFiscalEntitiesRequest">
            <summary>
            CustomerFiscalEntitiesRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerFiscalEntitiesRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequest.#ctor(Conekta.net.Model.CustomerFiscalEntitiesRequestAddress,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerFiscalEntitiesRequest" /> class.
            </summary>
            <param name="address">address (required).</param>
            <param name="taxId">taxId.</param>
            <param name="email">email.</param>
            <param name="phone">phone.</param>
            <param name="metadata">metadata.</param>
            <param name="companyName">companyName.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequest.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequest.TaxId">
            <summary>
            Gets or Sets TaxId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequest.Email">
            <summary>
            Gets or Sets Email
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequest.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequest.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequest.CompanyName">
            <summary>
            Gets or Sets CompanyName
            </summary>
            <example>conekta</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequest.Equals(Conekta.net.Model.CustomerFiscalEntitiesRequest)">
            <summary>
            Returns true if CustomerFiscalEntitiesRequest instances are equal
            </summary>
            <param name="input">Instance of CustomerFiscalEntitiesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress">
            <summary>
            CustomerFiscalEntitiesRequestAddress
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress" /> class.
            </summary>
            <param name="street1">street1 (required).</param>
            <param name="street2">street2.</param>
            <param name="postalCode">postalCode (required).</param>
            <param name="city">city (required).</param>
            <param name="state">state.</param>
            <param name="country">this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).</param>
            <param name="residential">residential (default to false).</param>
            <param name="externalNumber">externalNumber.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.Street1">
            <summary>
            Gets or Sets Street1
            </summary>
            <example>Nuevo Leon 254</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.Street2">
            <summary>
            Gets or Sets Street2
            </summary>
            <example>Departamento 404</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.PostalCode">
            <summary>
            Gets or Sets PostalCode
            </summary>
            <example>06100</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.City">
            <summary>
            Gets or Sets City
            </summary>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.State">
            <summary>
            Gets or Sets State
            </summary>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.Country">
            <summary>
            this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            </summary>
            <value>this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)</value>
            <example>MX</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.Residential">
            <summary>
            Gets or Sets Residential
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.ExternalNumber">
            <summary>
            Gets or Sets ExternalNumber
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.Equals(Conekta.net.Model.CustomerFiscalEntitiesRequestAddress)">
            <summary>
            Returns true if CustomerFiscalEntitiesRequestAddress instances are equal
            </summary>
            <param name="input">Instance of CustomerFiscalEntitiesRequestAddress to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesRequestAddress.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerFiscalEntitiesResponse">
            <summary>
            CustomerFiscalEntitiesResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerFiscalEntitiesResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponse.#ctor(System.Boolean,System.String,System.Collections.Generic.List{Conekta.net.Model.CustomerFiscalEntitiesDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerFiscalEntitiesResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponse.Equals(Conekta.net.Model.CustomerFiscalEntitiesResponse)">
            <summary>
            Returns true if CustomerFiscalEntitiesResponse instances are equal
            </summary>
            <param name="input">Instance of CustomerFiscalEntitiesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf">
            <summary>
            CustomerFiscalEntitiesResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.CustomerFiscalEntitiesDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf.Equals(Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf)">
            <summary>
            Returns true if CustomerFiscalEntitiesResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of CustomerFiscalEntitiesResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerFiscalEntitiesResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerInfo">
            <summary>
            CustomerInfo
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerInfo" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfo.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerInfo" /> class.
            </summary>
            <param name="name">name (required).</param>
            <param name="email">email (required).</param>
            <param name="phone">phone (required).</param>
            <param name="corporate">corporate.</param>
            <param name="varObject">varObject.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerInfo.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>DevTest</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerInfo.Email">
            <summary>
            Gets or Sets Email
            </summary>
            <example>test@conekta.com</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerInfo.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
            <example>5522997233</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerInfo.Corporate">
            <summary>
            Gets or Sets Corporate
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerInfo.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>customer_info</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfo.Equals(Conekta.net.Model.CustomerInfo)">
            <summary>
            Returns true if CustomerInfo instances are equal
            </summary>
            <param name="input">Instance of CustomerInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerInfoJustCustomerId">
            <summary>
            CustomerInfoJustCustomerId
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerInfoJustCustomerId" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerInfoJustCustomerId" /> class.
            </summary>
            <param name="customerId">customerId (required).</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerInfoJustCustomerId.CustomerId">
            <summary>
            Gets or Sets CustomerId
            </summary>
            <example>cus_23874283647</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerId.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerId.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerId.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerId.Equals(Conekta.net.Model.CustomerInfoJustCustomerId)">
            <summary>
            Returns true if CustomerInfoJustCustomerId instances are equal
            </summary>
            <param name="input">Instance of CustomerInfoJustCustomerId to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerId.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerId.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerInfoJustCustomerIdResponse">
            <summary>
            CustomerInfoJustCustomerIdResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerIdResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerInfoJustCustomerIdResponse" /> class.
            </summary>
            <param name="customerId">customerId.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerInfoJustCustomerIdResponse.CustomerId">
            <summary>
            Gets or Sets CustomerId
            </summary>
            <example>cus_23874283647</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerIdResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerIdResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerIdResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerIdResponse.Equals(Conekta.net.Model.CustomerInfoJustCustomerIdResponse)">
            <summary>
            Returns true if CustomerInfoJustCustomerIdResponse instances are equal
            </summary>
            <param name="input">Instance of CustomerInfoJustCustomerIdResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerIdResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerInfoJustCustomerIdResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerPaymentMethodRequest">
            <summary>
            Contains details of the payment methods that the customer has active or has used in Conekta
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodRequest" /> class.
            </summary>
            <param name="type">Type of payment method (required).</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerPaymentMethodRequest.Type">
            <summary>
            Type of payment method
            </summary>
            <value>Type of payment method</value>
            <example>card | cash | spei</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodRequest.Equals(Conekta.net.Model.CustomerPaymentMethodRequest)">
            <summary>
            Returns true if CustomerPaymentMethodRequest instances are equal
            </summary>
            <param name="input">Instance of CustomerPaymentMethodRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerPaymentMethods">
            <summary>
            CustomerPaymentMethods
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethods.#ctor(System.Collections.Generic.List{Conekta.net.Model.CustomerPaymentMethodsData})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethods" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerPaymentMethods.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethods.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethods.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethods.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethods.Equals(Conekta.net.Model.CustomerPaymentMethods)">
            <summary>
            Returns true if CustomerPaymentMethods instances are equal
            </summary>
            <param name="input">Instance of CustomerPaymentMethods to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethods.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethods.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerPaymentMethodsData">
            <summary>
            CustomerPaymentMethodsData
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.#ctor(Conekta.net.Model.PaymentMethodCashResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodsData" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCashResponse" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCashResponse.</param>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.#ctor(Conekta.net.Model.PaymentMethodCardResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodsData" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCardResponse" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCardResponse.</param>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.#ctor(Conekta.net.Model.PaymentMethodSpeiRecurrent)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodsData" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRecurrent" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodSpeiRecurrent.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerPaymentMethodsData.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.GetPaymentMethodCashResponse">
            <summary>
            Get the actual instance of `PaymentMethodCashResponse`. If the actual instance is not `PaymentMethodCashResponse`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCashResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.GetPaymentMethodCardResponse">
            <summary>
            Get the actual instance of `PaymentMethodCardResponse`. If the actual instance is not `PaymentMethodCardResponse`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCardResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.GetPaymentMethodSpeiRecurrent">
            <summary>
            Get the actual instance of `PaymentMethodSpeiRecurrent`. If the actual instance is not `PaymentMethodSpeiRecurrent`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodSpeiRecurrent</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of CustomerPaymentMethodsData
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of CustomerPaymentMethodsData</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.Equals(Conekta.net.Model.CustomerPaymentMethodsData)">
            <summary>
            Returns true if CustomerPaymentMethodsData instances are equal
            </summary>
            <param name="input">Instance of CustomerPaymentMethodsData to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsData.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerPaymentMethodsDataJsonConverter">
            <summary>
            Custom JSON converter for CustomerPaymentMethodsData
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsDataJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsDataJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsDataJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerPaymentMethodsRequest">
            <summary>
            CustomerPaymentMethodsRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.#ctor(Conekta.net.Model.PaymentMethodCardRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodsRequest" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCardRequest" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCardRequest.</param>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.#ctor(Conekta.net.Model.PaymentMethodCashRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodsRequest" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCashRequest" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCashRequest.</param>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.#ctor(Conekta.net.Model.PaymentMethodSpeiRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodsRequest" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRequest" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodSpeiRequest.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerPaymentMethodsRequest.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.GetPaymentMethodCardRequest">
            <summary>
            Get the actual instance of `PaymentMethodCardRequest`. If the actual instance is not `PaymentMethodCardRequest`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCardRequest</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.GetPaymentMethodCashRequest">
            <summary>
            Get the actual instance of `PaymentMethodCashRequest`. If the actual instance is not `PaymentMethodCashRequest`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCashRequest</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.GetPaymentMethodSpeiRequest">
            <summary>
            Get the actual instance of `PaymentMethodSpeiRequest`. If the actual instance is not `PaymentMethodSpeiRequest`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodSpeiRequest</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of CustomerPaymentMethodsRequest
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of CustomerPaymentMethodsRequest</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.Equals(Conekta.net.Model.CustomerPaymentMethodsRequest)">
            <summary>
            Returns true if CustomerPaymentMethodsRequest instances are equal
            </summary>
            <param name="input">Instance of CustomerPaymentMethodsRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerPaymentMethodsRequestJsonConverter">
            <summary>
            Custom JSON converter for CustomerPaymentMethodsRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequestJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequestJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsRequestJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerPaymentMethodsResponse">
            <summary>
            CustomerPaymentMethodsResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodsResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.CustomerPaymentMethodsData})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerPaymentMethodsResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerPaymentMethodsResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerPaymentMethodsResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerPaymentMethodsResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerPaymentMethodsResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerPaymentMethodsResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsResponse.Equals(Conekta.net.Model.CustomerPaymentMethodsResponse)">
            <summary>
            Returns true if CustomerPaymentMethodsResponse instances are equal
            </summary>
            <param name="input">Instance of CustomerPaymentMethodsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerPaymentMethodsResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerResponse">
            <summary>
            customer response
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponse.#ctor(Conekta.net.Model.CustomerAntifraudInfoResponse,System.Boolean,System.Int64,System.String,System.String,System.String,System.String,System.String,Conekta.net.Model.CustomerFiscalEntitiesResponse,System.String,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,Conekta.net.Model.CustomerPaymentMethodsResponse,System.String,Conekta.net.Model.CustomerResponseShippingContacts,Conekta.net.Model.SubscriptionResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerResponse" /> class.
            </summary>
            <param name="antifraudInfo">antifraudInfo.</param>
            <param name="corporate">true if the customer is a company.</param>
            <param name="createdAt">Creation date of the object (required).</param>
            <param name="customReference">Custom reference.</param>
            <param name="defaultFiscalEntityId">defaultFiscalEntityId.</param>
            <param name="defaultShippingContactId">defaultShippingContactId.</param>
            <param name="defaultPaymentSourceId">defaultPaymentSourceId.</param>
            <param name="email">email.</param>
            <param name="fiscalEntities">fiscalEntities.</param>
            <param name="id">Customer&#39;s ID (required).</param>
            <param name="livemode">true if the object exists in live mode or the value false if the object exists in test mode (required).</param>
            <param name="name">Customer&#39;s name (required).</param>
            <param name="metadata">metadata.</param>
            <param name="varObject">varObject (required).</param>
            <param name="paymentSources">paymentSources.</param>
            <param name="phone">Customer&#39;s phone number.</param>
            <param name="shippingContacts">shippingContacts.</param>
            <param name="subscription">subscription.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.AntifraudInfo">
            <summary>
            Gets or Sets AntifraudInfo
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.Corporate">
            <summary>
            true if the customer is a company
            </summary>
            <value>true if the customer is a company</value>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.CreatedAt">
            <summary>
            Creation date of the object
            </summary>
            <value>Creation date of the object</value>
            <example>1485151007</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.CustomReference">
            <summary>
            Custom reference
            </summary>
            <value>Custom reference</value>
            <example>custom_reference</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.DefaultFiscalEntityId">
            <summary>
            Gets or Sets DefaultFiscalEntityId
            </summary>
            <example>fis_ent_2tKqqAfqPi21oCmEJ</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.DefaultShippingContactId">
            <summary>
            Gets or Sets DefaultShippingContactId
            </summary>
            <example>ship_cont_2tKZsTYcsryyu7Ah8</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.DefaultPaymentSourceId">
            <summary>
            Gets or Sets DefaultPaymentSourceId
            </summary>
            <example>src_2tHJfJ79KyUwpxTio</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.Email">
            <summary>
            Gets or Sets Email
            </summary>
            <example>Felipe@gmail.com</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.FiscalEntities">
            <summary>
            Gets or Sets FiscalEntities
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.Id">
            <summary>
            Customer&#39;s ID
            </summary>
            <value>Customer&#39;s ID</value>
            <example>cus_2tHJfJ79KyUwpxTik</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.Livemode">
            <summary>
            true if the object exists in live mode or the value false if the object exists in test mode
            </summary>
            <value>true if the object exists in live mode or the value false if the object exists in test mode</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.Name">
            <summary>
            Customer&#39;s name
            </summary>
            <value>Customer&#39;s name</value>
            <example>Felipe</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>customer</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.PaymentSources">
            <summary>
            Gets or Sets PaymentSources
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.Phone">
            <summary>
            Customer&#39;s phone number
            </summary>
            <value>Customer&#39;s phone number</value>
            <example>5215555555555</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.ShippingContacts">
            <summary>
            Gets or Sets ShippingContacts
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponse.Subscription">
            <summary>
            Gets or Sets Subscription
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponse.Equals(Conekta.net.Model.CustomerResponse)">
            <summary>
            Returns true if CustomerResponse instances are equal
            </summary>
            <param name="input">Instance of CustomerResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerResponseShippingContacts">
            <summary>
            CustomerResponseShippingContacts
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContacts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerResponseShippingContacts" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContacts.#ctor(System.Boolean,System.String,System.Collections.Generic.List{Conekta.net.Model.CustomerShippingContactsDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerResponseShippingContacts" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponseShippingContacts.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponseShippingContacts.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponseShippingContacts.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContacts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContacts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContacts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContacts.Equals(Conekta.net.Model.CustomerResponseShippingContacts)">
            <summary>
            Returns true if CustomerResponseShippingContacts instances are equal
            </summary>
            <param name="input">Instance of CustomerResponseShippingContacts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContacts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContacts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerResponseShippingContactsAllOf">
            <summary>
            CustomerResponseShippingContactsAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContactsAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.CustomerShippingContactsDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerResponseShippingContactsAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerResponseShippingContactsAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContactsAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContactsAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContactsAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContactsAllOf.Equals(Conekta.net.Model.CustomerResponseShippingContactsAllOf)">
            <summary>
            Returns true if CustomerResponseShippingContactsAllOf instances are equal
            </summary>
            <param name="input">Instance of CustomerResponseShippingContactsAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContactsAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerResponseShippingContactsAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerShippingContacts">
            <summary>
            [Shipping](https://developers.conekta.com/v2.1.0/reference/createcustomershippingcontacts) details, required in case of sending a shipping. If we do not receive a shipping_contact on the order, the default shipping_contact of the customer will be used.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContacts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerShippingContacts" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContacts.#ctor(System.String,System.String,System.String,Conekta.net.Model.CustomerShippingContactsAddress,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerShippingContacts" /> class.
            </summary>
            <param name="phone">Phone contact.</param>
            <param name="receiver">Name of the person who will receive the order.</param>
            <param name="betweenStreets">The street names between which the order will be delivered..</param>
            <param name="address">address (required).</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
            <param name="deleted">deleted.</param>
            <param name="metadata">Metadata associated with the shipping contact.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContacts.Phone">
            <summary>
            Phone contact
            </summary>
            <value>Phone contact</value>
            <example>525511223344</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContacts.Receiver">
            <summary>
            Name of the person who will receive the order
            </summary>
            <value>Name of the person who will receive the order</value>
            <example>Marvin Fuller</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContacts.BetweenStreets">
            <summary>
            The street names between which the order will be delivered.
            </summary>
            <value>The street names between which the order will be delivered.</value>
            <example>Ackerman Crescent</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContacts.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContacts.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContacts.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContacts.Deleted">
            <summary>
            Gets or Sets Deleted
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContacts.Metadata">
            <summary>
            Metadata associated with the shipping contact
            </summary>
            <value>Metadata associated with the shipping contact</value>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContacts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContacts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContacts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContacts.Equals(Conekta.net.Model.CustomerShippingContacts)">
            <summary>
            Returns true if CustomerShippingContacts instances are equal
            </summary>
            <param name="input">Instance of CustomerShippingContacts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContacts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContacts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerShippingContactsAddress">
            <summary>
            Address of the person who will receive the order
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerShippingContactsAddress" /> class.
            </summary>
            <param name="street1">street1.</param>
            <param name="street2">street2.</param>
            <param name="postalCode">postalCode.</param>
            <param name="city">city.</param>
            <param name="state">state.</param>
            <param name="country">this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).</param>
            <param name="residential">residential.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsAddress.Street1">
            <summary>
            Gets or Sets Street1
            </summary>
            <example>Nuevo Leon 254</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsAddress.Street2">
            <summary>
            Gets or Sets Street2
            </summary>
            <example>Departamento 404</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsAddress.PostalCode">
            <summary>
            Gets or Sets PostalCode
            </summary>
            <example>06100</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsAddress.City">
            <summary>
            Gets or Sets City
            </summary>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsAddress.State">
            <summary>
            Gets or Sets State
            </summary>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsAddress.Country">
            <summary>
            this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            </summary>
            <value>this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)</value>
            <example>MX</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsAddress.Residential">
            <summary>
            Gets or Sets Residential
            </summary>
            <example>true</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsAddress.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsAddress.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsAddress.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsAddress.Equals(Conekta.net.Model.CustomerShippingContactsAddress)">
            <summary>
            Returns true if CustomerShippingContactsAddress instances are equal
            </summary>
            <param name="input">Instance of CustomerShippingContactsAddress to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsAddress.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsAddress.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerShippingContactsDataResponse">
            <summary>
            CustomerShippingContactsDataResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerShippingContactsDataResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponse.#ctor(System.String,System.String,System.String,Conekta.net.Model.CustomerShippingContactsAddress,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerShippingContactsDataResponse" /> class.
            </summary>
            <param name="phone">Phone contact.</param>
            <param name="receiver">Name of the person who will receive the order.</param>
            <param name="betweenStreets">The street names between which the order will be delivered..</param>
            <param name="address">address (required).</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
            <param name="deleted">deleted.</param>
            <param name="metadata">Metadata associated with the shipping contact.</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.Phone">
            <summary>
            Phone contact
            </summary>
            <value>Phone contact</value>
            <example>525511223344</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.Receiver">
            <summary>
            Name of the person who will receive the order
            </summary>
            <value>Name of the person who will receive the order</value>
            <example>Marvin Fuller</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.BetweenStreets">
            <summary>
            The street names between which the order will be delivered.
            </summary>
            <value>The street names between which the order will be delivered.</value>
            <example>Ackerman Crescent</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.Deleted">
            <summary>
            Gets or Sets Deleted
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.Metadata">
            <summary>
            Metadata associated with the shipping contact
            </summary>
            <value>Metadata associated with the shipping contact</value>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>ship_cont_2tKZsTYcsryyu7Ah8</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>shipping_contact</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponse.Equals(Conekta.net.Model.CustomerShippingContactsDataResponse)">
            <summary>
            Returns true if CustomerShippingContactsDataResponse instances are equal
            </summary>
            <param name="input">Instance of CustomerShippingContactsDataResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf">
            <summary>
            CustomerShippingContactsDataResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf" /> class.
            </summary>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>ship_cont_2tKZsTYcsryyu7Ah8</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>shipping_contact</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.Equals(Conekta.net.Model.CustomerShippingContactsDataResponseAllOf)">
            <summary>
            Returns true if CustomerShippingContactsDataResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of CustomerShippingContactsDataResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsDataResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerShippingContactsResponse">
            <summary>
            Contains the detail of the shipping addresses that the client has active or has used in Conekta
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponse.#ctor(System.String,System.String,System.String,Conekta.net.Model.CustomerShippingContactsResponseAddress,System.String,System.Boolean,System.String,System.Int64,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerShippingContactsResponse" /> class.
            </summary>
            <param name="phone">phone.</param>
            <param name="receiver">receiver.</param>
            <param name="betweenStreets">betweenStreets.</param>
            <param name="address">address.</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
            <param name="id">id.</param>
            <param name="createdAt">createdAt.</param>
            <param name="metadata">Metadata associated with the shipping contact.</param>
            <param name="varObject">varObject.</param>
            <param name="deleted">deleted.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
            <example>525511223344</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.Receiver">
            <summary>
            Gets or Sets Receiver
            </summary>
            <example>Marvin Fuller</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.BetweenStreets">
            <summary>
            Gets or Sets BetweenStreets
            </summary>
            <example>Ackerman Crescent</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>adr_1234567890</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.Metadata">
            <summary>
            Metadata associated with the shipping contact
            </summary>
            <value>Metadata associated with the shipping contact</value>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>shipping_contact</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponse.Deleted">
            <summary>
            Gets or Sets Deleted
            </summary>
            <example>false</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponse.Equals(Conekta.net.Model.CustomerShippingContactsResponse)">
            <summary>
            Returns true if CustomerShippingContactsResponse instances are equal
            </summary>
            <param name="input">Instance of CustomerShippingContactsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerShippingContactsResponseAddress">
            <summary>
            CustomerShippingContactsResponseAddress
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponseAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerShippingContactsResponseAddress" /> class.
            </summary>
            <param name="varObject">varObject.</param>
            <param name="street1">street1.</param>
            <param name="street2">street2.</param>
            <param name="postalCode">postalCode.</param>
            <param name="city">city.</param>
            <param name="state">state.</param>
            <param name="country">country.</param>
            <param name="residential">residential.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponseAddress.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>shipping_address</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponseAddress.Street1">
            <summary>
            Gets or Sets Street1
            </summary>
            <example>Nuevo Leon 254</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponseAddress.Street2">
            <summary>
            Gets or Sets Street2
            </summary>
            <example>Departamento 404</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponseAddress.PostalCode">
            <summary>
            Gets or Sets PostalCode
            </summary>
            <example>06100</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponseAddress.City">
            <summary>
            Gets or Sets City
            </summary>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponseAddress.State">
            <summary>
            Gets or Sets State
            </summary>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponseAddress.Country">
            <summary>
            Gets or Sets Country
            </summary>
            <example>MX</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerShippingContactsResponseAddress.Residential">
            <summary>
            Gets or Sets Residential
            </summary>
            <example>true</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponseAddress.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponseAddress.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponseAddress.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponseAddress.Equals(Conekta.net.Model.CustomerShippingContactsResponseAddress)">
            <summary>
            Returns true if CustomerShippingContactsResponseAddress instances are equal
            </summary>
            <param name="input">Instance of CustomerShippingContactsResponseAddress to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponseAddress.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerShippingContactsResponseAddress.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomersResponse">
            <summary>
            CustomersResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomersResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponse.#ctor(System.Collections.Generic.List{Conekta.net.Model.CustomerResponse},System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomersResponse" /> class.
            </summary>
            <param name="data">data.</param>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
        </member>
        <member name="P:Conekta.net.Model.CustomersResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomersResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.CustomersResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.CustomersResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.CustomersResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponse.Equals(Conekta.net.Model.CustomersResponse)">
            <summary>
            Returns true if CustomersResponse instances are equal
            </summary>
            <param name="input">Instance of CustomersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomersResponseAllOf">
            <summary>
            CustomersResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.CustomerResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomersResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomersResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponseAllOf.Equals(Conekta.net.Model.CustomersResponseAllOf)">
            <summary>
            Returns true if CustomersResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of CustomersResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomersResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest">
            <summary>
            CustomerUpdateFiscalEntitiesRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.#ctor(Conekta.net.Model.CustomerFiscalEntitiesRequestAddress,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest" /> class.
            </summary>
            <param name="address">address.</param>
            <param name="taxId">taxId.</param>
            <param name="email">email.</param>
            <param name="phone">phone.</param>
            <param name="metadata">metadata.</param>
            <param name="companyName">companyName.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.TaxId">
            <summary>
            Gets or Sets TaxId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.Email">
            <summary>
            Gets or Sets Email
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.CompanyName">
            <summary>
            Gets or Sets CompanyName
            </summary>
            <example>conekta</example>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.Equals(Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest)">
            <summary>
            Returns true if CustomerUpdateFiscalEntitiesRequest instances are equal
            </summary>
            <param name="input">Instance of CustomerUpdateFiscalEntitiesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateFiscalEntitiesRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.CustomerUpdateShippingContacts">
            <summary>
            [Shipping](https://developers.conekta.com/v2.1.0/reference/createcustomershippingcontacts) details, required in case of sending a shipping. If we do not receive a shipping_contact on the order, the default shipping_contact of the customer will be used.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateShippingContacts.#ctor(System.String,System.String,System.String,Conekta.net.Model.CustomerShippingContactsAddress,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.CustomerUpdateShippingContacts" /> class.
            </summary>
            <param name="phone">Phone contact.</param>
            <param name="receiver">Name of the person who will receive the order.</param>
            <param name="betweenStreets">The street names between which the order will be delivered..</param>
            <param name="address">address.</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
            <param name="deleted">deleted.</param>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateShippingContacts.Phone">
            <summary>
            Phone contact
            </summary>
            <value>Phone contact</value>
            <example>525511223344</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateShippingContacts.Receiver">
            <summary>
            Name of the person who will receive the order
            </summary>
            <value>Name of the person who will receive the order</value>
            <example>Marvin Fuller</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateShippingContacts.BetweenStreets">
            <summary>
            The street names between which the order will be delivered.
            </summary>
            <value>The street names between which the order will be delivered.</value>
            <example>Ackerman Crescent</example>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateShippingContacts.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateShippingContacts.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateShippingContacts.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="P:Conekta.net.Model.CustomerUpdateShippingContacts.Deleted">
            <summary>
            Gets or Sets Deleted
            </summary>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateShippingContacts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateShippingContacts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateShippingContacts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateShippingContacts.Equals(Conekta.net.Model.CustomerUpdateShippingContacts)">
            <summary>
            Returns true if CustomerUpdateShippingContacts instances are equal
            </summary>
            <param name="input">Instance of CustomerUpdateShippingContacts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateShippingContacts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.CustomerUpdateShippingContacts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.DeleteApiKeysResponse">
            <summary>
            DeleteApiKeysResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponse.#ctor(System.Boolean,System.Int64,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DeleteApiKeysResponse" /> class.
            </summary>
            <param name="active">Indicates if the api key is active.</param>
            <param name="createdAt">Unix timestamp in seconds of when the api key was created.</param>
            <param name="description">A name or brief explanation of what this api key is used for.</param>
            <param name="livemode">Indicates if the api key is in production.</param>
            <param name="prefix">The first few characters of the authentication_token.</param>
            <param name="id">Unique identifier of the api key.</param>
            <param name="varObject">Object name, value is &#39;api_key&#39;.</param>
            <param name="deleted">deleted.</param>
            <param name="role">Indicates if the api key is private or public.</param>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponse.Active">
            <summary>
            Indicates if the api key is active
            </summary>
            <value>Indicates if the api key is active</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponse.CreatedAt">
            <summary>
            Unix timestamp in seconds of when the api key was created
            </summary>
            <value>Unix timestamp in seconds of when the api key was created</value>
            <example>1684167881</example>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponse.Description">
            <summary>
            A name or brief explanation of what this api key is used for
            </summary>
            <value>A name or brief explanation of what this api key is used for</value>
            <example>online store</example>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponse.Livemode">
            <summary>
            Indicates if the api key is in production
            </summary>
            <value>Indicates if the api key is in production</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponse.Prefix">
            <summary>
            The first few characters of the authentication_token
            </summary>
            <value>The first few characters of the authentication_token</value>
            <example>key_rp</example>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponse.Id">
            <summary>
            Unique identifier of the api key
            </summary>
            <value>Unique identifier of the api key</value>
            <example>64625cc9f3e02c00163f5e4d</example>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponse.VarObject">
            <summary>
            Object name, value is &#39;api_key&#39;
            </summary>
            <value>Object name, value is &#39;api_key&#39;</value>
            <example>api_key</example>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponse.Deleted">
            <summary>
            Gets or Sets Deleted
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponse.Role">
            <summary>
            Indicates if the api key is private or public
            </summary>
            <value>Indicates if the api key is private or public</value>
            <example>private</example>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponse.Equals(Conekta.net.Model.DeleteApiKeysResponse)">
            <summary>
            Returns true if DeleteApiKeysResponse instances are equal
            </summary>
            <param name="input">Instance of DeleteApiKeysResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.DeleteApiKeysResponseAllOf">
            <summary>
            DeleteApiKeysResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponseAllOf.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DeleteApiKeysResponseAllOf" /> class.
            </summary>
            <param name="deleted">deleted.</param>
        </member>
        <member name="P:Conekta.net.Model.DeleteApiKeysResponseAllOf.Deleted">
            <summary>
            Gets or Sets Deleted
            </summary>
            <example>true</example>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponseAllOf.Equals(Conekta.net.Model.DeleteApiKeysResponseAllOf)">
            <summary>
            Returns true if DeleteApiKeysResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of DeleteApiKeysResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.DeleteApiKeysResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.DeletedBlacklistRuleResponse">
            <summary>
            DeletedBlacklistRuleResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DeletedBlacklistRuleResponse.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DeletedBlacklistRuleResponse" /> class.
            </summary>
            <param name="id">Blacklist rule id.</param>
            <param name="field">field used for blacklists rule deleted.</param>
            <param name="value">value used for blacklists rule deleted.</param>
            <param name="description">use an description for blacklisted rule.</param>
        </member>
        <member name="P:Conekta.net.Model.DeletedBlacklistRuleResponse.Id">
            <summary>
            Blacklist rule id
            </summary>
            <value>Blacklist rule id</value>
            <example>2fw8EWJusiRrxdPzT</example>
        </member>
        <member name="P:Conekta.net.Model.DeletedBlacklistRuleResponse.Field">
            <summary>
            field used for blacklists rule deleted
            </summary>
            <value>field used for blacklists rule deleted</value>
            <example>email</example>
        </member>
        <member name="P:Conekta.net.Model.DeletedBlacklistRuleResponse.Value">
            <summary>
            value used for blacklists rule deleted
            </summary>
            <value>value used for blacklists rule deleted</value>
            <example>email@example.com</example>
        </member>
        <member name="P:Conekta.net.Model.DeletedBlacklistRuleResponse.Description">
            <summary>
            use an description for blacklisted rule
            </summary>
            <value>use an description for blacklisted rule</value>
            <example>banned customer example@example.com</example>
        </member>
        <member name="M:Conekta.net.Model.DeletedBlacklistRuleResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedBlacklistRuleResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedBlacklistRuleResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedBlacklistRuleResponse.Equals(Conekta.net.Model.DeletedBlacklistRuleResponse)">
            <summary>
            Returns true if DeletedBlacklistRuleResponse instances are equal
            </summary>
            <param name="input">Instance of DeletedBlacklistRuleResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedBlacklistRuleResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedBlacklistRuleResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.DeletedWhitelistRuleResponse">
            <summary>
            DeletedWhitelistRuleResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DeletedWhitelistRuleResponse.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DeletedWhitelistRuleResponse" /> class.
            </summary>
            <param name="id">Whitelist rule id.</param>
            <param name="field">field used for whitelists rule deleted.</param>
            <param name="value">value used for whitelists rule deleted.</param>
            <param name="description">use an description for whitelisted rule.</param>
        </member>
        <member name="P:Conekta.net.Model.DeletedWhitelistRuleResponse.Id">
            <summary>
            Whitelist rule id
            </summary>
            <value>Whitelist rule id</value>
            <example>2fw8EWJusiRrxdPzT</example>
        </member>
        <member name="P:Conekta.net.Model.DeletedWhitelistRuleResponse.Field">
            <summary>
            field used for whitelists rule deleted
            </summary>
            <value>field used for whitelists rule deleted</value>
            <example>email</example>
        </member>
        <member name="P:Conekta.net.Model.DeletedWhitelistRuleResponse.Value">
            <summary>
            value used for whitelists rule deleted
            </summary>
            <value>value used for whitelists rule deleted</value>
            <example>email@example.com</example>
        </member>
        <member name="P:Conekta.net.Model.DeletedWhitelistRuleResponse.Description">
            <summary>
            use an description for whitelisted rule
            </summary>
            <value>use an description for whitelisted rule</value>
            <example>secure customer example@example.com</example>
        </member>
        <member name="M:Conekta.net.Model.DeletedWhitelistRuleResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedWhitelistRuleResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedWhitelistRuleResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedWhitelistRuleResponse.Equals(Conekta.net.Model.DeletedWhitelistRuleResponse)">
            <summary>
            Returns true if DeletedWhitelistRuleResponse instances are equal
            </summary>
            <param name="input">Instance of DeletedWhitelistRuleResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedWhitelistRuleResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.DeletedWhitelistRuleResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.Details">
            <summary>
            Details
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Details.#ctor(System.Collections.Generic.List{Conekta.net.Model.DetailsError})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Details" /> class.
            </summary>
            <param name="varDetails">varDetails.</param>
        </member>
        <member name="P:Conekta.net.Model.Details.VarDetails">
            <summary>
            Gets or Sets VarDetails
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Details.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Details.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Details.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Details.Equals(Conekta.net.Model.Details)">
            <summary>
            Returns true if Details instances are equal
            </summary>
            <param name="input">Instance of Details to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Details.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.Details.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.DetailsError">
            <summary>
            DetailsError
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DetailsError.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DetailsError" /> class.
            </summary>
            <param name="code">code.</param>
            <param name="param">param.</param>
            <param name="message">message.</param>
            <param name="debugMessage">debugMessage.</param>
        </member>
        <member name="P:Conekta.net.Model.DetailsError.Code">
            <summary>
            Gets or Sets Code
            </summary>
            <example>conekta.errors.authentication.missing_key</example>
        </member>
        <member name="P:Conekta.net.Model.DetailsError.Param">
            <summary>
            Gets or Sets Param
            </summary>
        </member>
        <member name="P:Conekta.net.Model.DetailsError.Message">
            <summary>
            Gets or Sets Message
            </summary>
            <example>Acceso no autorizado.</example>
        </member>
        <member name="P:Conekta.net.Model.DetailsError.DebugMessage">
            <summary>
            Gets or Sets DebugMessage
            </summary>
            <example>Please include your access key in your request.</example>
        </member>
        <member name="M:Conekta.net.Model.DetailsError.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DetailsError.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DetailsError.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DetailsError.Equals(Conekta.net.Model.DetailsError)">
            <summary>
            Returns true if DetailsError instances are equal
            </summary>
            <param name="input">Instance of DetailsError to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DetailsError.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.DetailsError.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.DiscountLinesDataResponse">
            <summary>
            DiscountLinesDataResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesDataResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DiscountLinesDataResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesDataResponse.#ctor(System.Int64,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DiscountLinesDataResponse" /> class.
            </summary>
            <param name="amount">The amount to be deducted from the total sum of all payments, in cents. (required).</param>
            <param name="code">Discount code. (required).</param>
            <param name="type">It can be &#39;loyalty&#39;, &#39;campaign&#39;, &#39;coupon&#39; o &#39;sign&#39; (required).</param>
            <param name="id">The discount line id (required).</param>
            <param name="varObject">The object name (required).</param>
            <param name="parentId">The order id (required).</param>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesDataResponse.Amount">
            <summary>
            The amount to be deducted from the total sum of all payments, in cents.
            </summary>
            <value>The amount to be deducted from the total sum of all payments, in cents.</value>
            <example>500</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesDataResponse.Code">
            <summary>
            Discount code.
            </summary>
            <value>Discount code.</value>
            <example>123</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesDataResponse.Type">
            <summary>
            It can be &#39;loyalty&#39;, &#39;campaign&#39;, &#39;coupon&#39; o &#39;sign&#39;
            </summary>
            <value>It can be &#39;loyalty&#39;, &#39;campaign&#39;, &#39;coupon&#39; o &#39;sign&#39;</value>
            <example>loyalty</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesDataResponse.Id">
            <summary>
            The discount line id
            </summary>
            <value>The discount line id</value>
            <example>dis_lin_2tQQ58HPgPw7StE8z</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesDataResponse.VarObject">
            <summary>
            The object name
            </summary>
            <value>The object name</value>
            <example>discount_line</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesDataResponse.ParentId">
            <summary>
            The order id
            </summary>
            <value>The order id</value>
            <example>ord_2tPAmKCEJqh8RE6nY</example>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesDataResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesDataResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesDataResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesDataResponse.Equals(Conekta.net.Model.DiscountLinesDataResponse)">
            <summary>
            Returns true if DiscountLinesDataResponse instances are equal
            </summary>
            <param name="input">Instance of DiscountLinesDataResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesDataResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesDataResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.DiscountLinesResponse">
            <summary>
            DiscountLinesResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DiscountLinesResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponse.#ctor(System.Int64,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DiscountLinesResponse" /> class.
            </summary>
            <param name="amount">The amount to be deducted from the total sum of all payments, in cents. (required).</param>
            <param name="code">Discount code. (required).</param>
            <param name="type">It can be &#39;loyalty&#39;, &#39;campaign&#39;, &#39;coupon&#39; o &#39;sign&#39; (required).</param>
            <param name="id">The discount line id (required).</param>
            <param name="varObject">The object name (required).</param>
            <param name="parentId">The order id (required).</param>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesResponse.Amount">
            <summary>
            The amount to be deducted from the total sum of all payments, in cents.
            </summary>
            <value>The amount to be deducted from the total sum of all payments, in cents.</value>
            <example>500</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesResponse.Code">
            <summary>
            Discount code.
            </summary>
            <value>Discount code.</value>
            <example>123</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesResponse.Type">
            <summary>
            It can be &#39;loyalty&#39;, &#39;campaign&#39;, &#39;coupon&#39; o &#39;sign&#39;
            </summary>
            <value>It can be &#39;loyalty&#39;, &#39;campaign&#39;, &#39;coupon&#39; o &#39;sign&#39;</value>
            <example>loyalty</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesResponse.Id">
            <summary>
            The discount line id
            </summary>
            <value>The discount line id</value>
            <example>dis_lin_2tQQ58HPgPw7StE8z</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesResponse.VarObject">
            <summary>
            The object name
            </summary>
            <value>The object name</value>
            <example>discount_line</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesResponse.ParentId">
            <summary>
            The order id
            </summary>
            <value>The order id</value>
            <example>ord_2tPAmKCEJqh8RE6nY</example>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponse.Equals(Conekta.net.Model.DiscountLinesResponse)">
            <summary>
            Returns true if DiscountLinesResponse instances are equal
            </summary>
            <param name="input">Instance of DiscountLinesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.DiscountLinesResponseAllOf">
            <summary>
            DiscountLinesResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponseAllOf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DiscountLinesResponseAllOf" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponseAllOf.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.DiscountLinesResponseAllOf" /> class.
            </summary>
            <param name="id">The discount line id (required).</param>
            <param name="varObject">The object name (required).</param>
            <param name="parentId">The order id (required).</param>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesResponseAllOf.Id">
            <summary>
            The discount line id
            </summary>
            <value>The discount line id</value>
            <example>dis_lin_2tQQ58HPgPw7StE8z</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesResponseAllOf.VarObject">
            <summary>
            The object name
            </summary>
            <value>The object name</value>
            <example>discount_line</example>
        </member>
        <member name="P:Conekta.net.Model.DiscountLinesResponseAllOf.ParentId">
            <summary>
            The order id
            </summary>
            <value>The order id</value>
            <example>ord_2tPAmKCEJqh8RE6nY</example>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponseAllOf.Equals(Conekta.net.Model.DiscountLinesResponseAllOf)">
            <summary>
            Returns true if DiscountLinesResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of DiscountLinesResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.DiscountLinesResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.EmailCheckoutRequest">
            <summary>
            EmailCheckoutRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.EmailCheckoutRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.EmailCheckoutRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.EmailCheckoutRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.EmailCheckoutRequest" /> class.
            </summary>
            <param name="email">email (required).</param>
        </member>
        <member name="P:Conekta.net.Model.EmailCheckoutRequest.Email">
            <summary>
            Gets or Sets Email
            </summary>
            <example>example@conekta.com</example>
        </member>
        <member name="M:Conekta.net.Model.EmailCheckoutRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.EmailCheckoutRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.EmailCheckoutRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.EmailCheckoutRequest.Equals(Conekta.net.Model.EmailCheckoutRequest)">
            <summary>
            Returns true if EmailCheckoutRequest instances are equal
            </summary>
            <param name="input">Instance of EmailCheckoutRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.EmailCheckoutRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.EmailCheckoutRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.Error">
            <summary>
            err model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Error.#ctor(System.Collections.Generic.List{Conekta.net.Model.DetailsError},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Error" /> class.
            </summary>
            <param name="details">details.</param>
            <param name="logId">log id.</param>
            <param name="type">type.</param>
            <param name="varObject">varObject.</param>
        </member>
        <member name="P:Conekta.net.Model.Error.Details">
            <summary>
            Gets or Sets Details
            </summary>
        </member>
        <member name="P:Conekta.net.Model.Error.LogId">
            <summary>
            log id
            </summary>
            <value>log id</value>
            <example>507f1f77bcf86cd799439011</example>
        </member>
        <member name="P:Conekta.net.Model.Error.Type">
            <summary>
            Gets or Sets Type
            </summary>
            <example>authentication_error</example>
        </member>
        <member name="P:Conekta.net.Model.Error.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>error</example>
        </member>
        <member name="M:Conekta.net.Model.Error.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Error.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Error.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Error.Equals(Conekta.net.Model.Error)">
            <summary>
            Returns true if Error instances are equal
            </summary>
            <param name="input">Instance of Error to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Error.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.Error.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ErrorAllOf">
            <summary>
            ErrorAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ErrorAllOf.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ErrorAllOf" /> class.
            </summary>
            <param name="logId">log id.</param>
            <param name="type">type.</param>
            <param name="varObject">varObject.</param>
        </member>
        <member name="P:Conekta.net.Model.ErrorAllOf.LogId">
            <summary>
            log id
            </summary>
            <value>log id</value>
            <example>507f1f77bcf86cd799439011</example>
        </member>
        <member name="P:Conekta.net.Model.ErrorAllOf.Type">
            <summary>
            Gets or Sets Type
            </summary>
            <example>authentication_error</example>
        </member>
        <member name="P:Conekta.net.Model.ErrorAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>error</example>
        </member>
        <member name="M:Conekta.net.Model.ErrorAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ErrorAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ErrorAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ErrorAllOf.Equals(Conekta.net.Model.ErrorAllOf)">
            <summary>
            Returns true if ErrorAllOf instances are equal
            </summary>
            <param name="input">Instance of ErrorAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ErrorAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ErrorAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.EventResponse">
            <summary>
            event model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.EventResponse.#ctor(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Boolean,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.WebhookLog},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.EventResponse" /> class.
            </summary>
            <param name="createdAt">createdAt.</param>
            <param name="data">data.</param>
            <param name="id">id.</param>
            <param name="livemode">livemode.</param>
            <param name="varObject">varObject.</param>
            <param name="type">type.</param>
            <param name="webhookLogs">webhookLogs.</param>
            <param name="webhookStatus">webhookStatus.</param>
        </member>
        <member name="P:Conekta.net.Model.EventResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1661445644</example>
        </member>
        <member name="P:Conekta.net.Model.EventResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
            <example>{&quot;action&quot;:&quot;ping&quot;,&quot;livemode&quot;:true}</example>
        </member>
        <member name="P:Conekta.net.Model.EventResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>6307a60c41de27127515a575</example>
        </member>
        <member name="P:Conekta.net.Model.EventResponse.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.EventResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>event</example>
        </member>
        <member name="P:Conekta.net.Model.EventResponse.Type">
            <summary>
            Gets or Sets Type
            </summary>
            <example>webhook_ping</example>
        </member>
        <member name="P:Conekta.net.Model.EventResponse.WebhookLogs">
            <summary>
            Gets or Sets WebhookLogs
            </summary>
        </member>
        <member name="P:Conekta.net.Model.EventResponse.WebhookStatus">
            <summary>
            Gets or Sets WebhookStatus
            </summary>
            <example>successful</example>
        </member>
        <member name="M:Conekta.net.Model.EventResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.EventResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.EventResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.EventResponse.Equals(Conekta.net.Model.EventResponse)">
            <summary>
            Returns true if EventResponse instances are equal
            </summary>
            <param name="input">Instance of EventResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.EventResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.EventResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.EventsResendResponse">
            <summary>
            event model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.EventsResendResponse.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.EventsResendResponse" /> class.
            </summary>
            <param name="failedAttempts">failedAttempts.</param>
            <param name="id">id.</param>
            <param name="lastAttemptedAt">lastAttemptedAt.</param>
            <param name="lastHttpResponseStatus">lastHttpResponseStatus.</param>
            <param name="responseData">responseData.</param>
            <param name="url">url.</param>
        </member>
        <member name="P:Conekta.net.Model.EventsResendResponse.FailedAttempts">
            <summary>
            Gets or Sets FailedAttempts
            </summary>
            <example>6</example>
        </member>
        <member name="P:Conekta.net.Model.EventsResendResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>webhl_2svd2sh6GbqzyWBNZ</example>
        </member>
        <member name="P:Conekta.net.Model.EventsResendResponse.LastAttemptedAt">
            <summary>
            Gets or Sets LastAttemptedAt
            </summary>
            <example>1684265970</example>
        </member>
        <member name="P:Conekta.net.Model.EventsResendResponse.LastHttpResponseStatus">
            <summary>
            Gets or Sets LastHttpResponseStatus
            </summary>
            <example>405</example>
        </member>
        <member name="P:Conekta.net.Model.EventsResendResponse.ResponseData">
            <summary>
            Gets or Sets ResponseData
            </summary>
            <example>{}</example>
        </member>
        <member name="P:Conekta.net.Model.EventsResendResponse.Url">
            <summary>
            Gets or Sets Url
            </summary>
            <example>https://username:password@mockoon.stg.conekta.io/payments-api/cash/merchant_approval</example>
        </member>
        <member name="M:Conekta.net.Model.EventsResendResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.EventsResendResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.EventsResendResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.EventsResendResponse.Equals(Conekta.net.Model.EventsResendResponse)">
            <summary>
            Returns true if EventsResendResponse instances are equal
            </summary>
            <param name="input">Instance of EventsResendResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.EventsResendResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.EventsResendResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.FiscalEntityAddress">
            <summary>
            Address of the fiscal entity
            </summary>
        </member>
        <member name="M:Conekta.net.Model.FiscalEntityAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.FiscalEntityAddress" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.FiscalEntityAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.FiscalEntityAddress" /> class.
            </summary>
            <param name="street1">Street name and number (required).</param>
            <param name="street2">Street name and number.</param>
            <param name="postalCode">Postal code (required).</param>
            <param name="city">City (required).</param>
            <param name="state">State.</param>
            <param name="country">this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) (required).</param>
            <param name="externalNumber">External number (required).</param>
        </member>
        <member name="P:Conekta.net.Model.FiscalEntityAddress.Street1">
            <summary>
            Street name and number
            </summary>
            <value>Street name and number</value>
            <example>Nuevo Leon 254</example>
        </member>
        <member name="P:Conekta.net.Model.FiscalEntityAddress.Street2">
            <summary>
            Street name and number
            </summary>
            <value>Street name and number</value>
            <example>Departamento 404</example>
        </member>
        <member name="P:Conekta.net.Model.FiscalEntityAddress.PostalCode">
            <summary>
            Postal code
            </summary>
            <value>Postal code</value>
            <example>06100</example>
        </member>
        <member name="P:Conekta.net.Model.FiscalEntityAddress.City">
            <summary>
            City
            </summary>
            <value>City</value>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.FiscalEntityAddress.State">
            <summary>
            State
            </summary>
            <value>State</value>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.FiscalEntityAddress.Country">
            <summary>
            this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            </summary>
            <value>this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)</value>
            <example>MX</example>
        </member>
        <member name="P:Conekta.net.Model.FiscalEntityAddress.ExternalNumber">
            <summary>
            External number
            </summary>
            <value>External number</value>
            <example>123</example>
        </member>
        <member name="M:Conekta.net.Model.FiscalEntityAddress.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.FiscalEntityAddress.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.FiscalEntityAddress.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.FiscalEntityAddress.Equals(Conekta.net.Model.FiscalEntityAddress)">
            <summary>
            Returns true if FiscalEntityAddress instances are equal
            </summary>
            <param name="input">Instance of FiscalEntityAddress to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.FiscalEntityAddress.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.FiscalEntityAddress.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetApiKeysResponse">
            <summary>
            GetApiKeysResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetApiKeysResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponse.#ctor(System.String,System.String,System.Boolean,System.String,System.Collections.Generic.List{Conekta.net.Model.ApiKeyResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetApiKeysResponse" /> class.
            </summary>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetApiKeysResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetApiKeysResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetApiKeysResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetApiKeysResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetApiKeysResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponse.Equals(Conekta.net.Model.GetApiKeysResponse)">
            <summary>
            Returns true if GetApiKeysResponse instances are equal
            </summary>
            <param name="input">Instance of GetApiKeysResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetApiKeysResponseAllOf">
            <summary>
            GetApiKeysResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.ApiKeyResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetApiKeysResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetApiKeysResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponseAllOf.Equals(Conekta.net.Model.GetApiKeysResponseAllOf)">
            <summary>
            Returns true if GetApiKeysResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetApiKeysResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetApiKeysResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetChargesResponse">
            <summary>
            GetChargesResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetChargesResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.ChargeResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetChargesResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetChargesResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetChargesResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetChargesResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetChargesResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetChargesResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponse.Equals(Conekta.net.Model.GetChargesResponse)">
            <summary>
            Returns true if GetChargesResponse instances are equal
            </summary>
            <param name="input">Instance of GetChargesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetChargesResponseAllOf">
            <summary>
            GetChargesResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.ChargeResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetChargesResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetChargesResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponseAllOf.Equals(Conekta.net.Model.GetChargesResponseAllOf)">
            <summary>
            Returns true if GetChargesResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetChargesResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetChargesResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetCompaniesResponse">
            <summary>
            GetCompaniesResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetCompaniesResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.CompanyResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetCompaniesResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetCompaniesResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetCompaniesResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetCompaniesResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetCompaniesResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetCompaniesResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponse.Equals(Conekta.net.Model.GetCompaniesResponse)">
            <summary>
            Returns true if GetCompaniesResponse instances are equal
            </summary>
            <param name="input">Instance of GetCompaniesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetCompaniesResponseAllOf">
            <summary>
            GetCompaniesResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.CompanyResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetCompaniesResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetCompaniesResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponseAllOf.Equals(Conekta.net.Model.GetCompaniesResponseAllOf)">
            <summary>
            Returns true if GetCompaniesResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetCompaniesResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCompaniesResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetCustomerPaymentMethodDataResponse">
            <summary>
            GetCustomerPaymentMethodDataResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.#ctor(Conekta.net.Model.PaymentMethodCashResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetCustomerPaymentMethodDataResponse" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCashResponse" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCashResponse.</param>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.#ctor(Conekta.net.Model.PaymentMethodCardResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetCustomerPaymentMethodDataResponse" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCardResponse" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCardResponse.</param>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.#ctor(Conekta.net.Model.PaymentMethodSpeiRecurrent)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetCustomerPaymentMethodDataResponse" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRecurrent" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodSpeiRecurrent.</param>
        </member>
        <member name="P:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.GetPaymentMethodCashResponse">
            <summary>
            Get the actual instance of `PaymentMethodCashResponse`. If the actual instance is not `PaymentMethodCashResponse`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCashResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.GetPaymentMethodCardResponse">
            <summary>
            Get the actual instance of `PaymentMethodCardResponse`. If the actual instance is not `PaymentMethodCardResponse`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCardResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.GetPaymentMethodSpeiRecurrent">
            <summary>
            Get the actual instance of `PaymentMethodSpeiRecurrent`. If the actual instance is not `PaymentMethodSpeiRecurrent`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodSpeiRecurrent</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of GetCustomerPaymentMethodDataResponse
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of GetCustomerPaymentMethodDataResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.Equals(Conekta.net.Model.GetCustomerPaymentMethodDataResponse)">
            <summary>
            Returns true if GetCustomerPaymentMethodDataResponse instances are equal
            </summary>
            <param name="input">Instance of GetCustomerPaymentMethodDataResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetCustomerPaymentMethodDataResponseJsonConverter">
            <summary>
            Custom JSON converter for GetCustomerPaymentMethodDataResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponseJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponseJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.GetCustomerPaymentMethodDataResponseJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.GetEventsResponse">
            <summary>
            GetEventsResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetEventsResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.EventResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetEventsResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetEventsResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetEventsResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetEventsResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetEventsResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetEventsResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponse.Equals(Conekta.net.Model.GetEventsResponse)">
            <summary>
            Returns true if GetEventsResponse instances are equal
            </summary>
            <param name="input">Instance of GetEventsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetEventsResponseAllOf">
            <summary>
            GetEventsResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.EventResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetEventsResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetEventsResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponseAllOf.Equals(Conekta.net.Model.GetEventsResponseAllOf)">
            <summary>
            Returns true if GetEventsResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetEventsResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetEventsResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetOrderDiscountLinesResponse">
            <summary>
            GetOrderDiscountLinesResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetOrderDiscountLinesResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.DiscountLinesResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetOrderDiscountLinesResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetOrderDiscountLinesResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetOrderDiscountLinesResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetOrderDiscountLinesResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetOrderDiscountLinesResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetOrderDiscountLinesResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponse.Equals(Conekta.net.Model.GetOrderDiscountLinesResponse)">
            <summary>
            Returns true if GetOrderDiscountLinesResponse instances are equal
            </summary>
            <param name="input">Instance of GetOrderDiscountLinesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf">
            <summary>
            GetOrderDiscountLinesResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.DiscountLinesResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf.Equals(Conekta.net.Model.GetOrderDiscountLinesResponseAllOf)">
            <summary>
            Returns true if GetOrderDiscountLinesResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetOrderDiscountLinesResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrderDiscountLinesResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetOrdersResponse">
            <summary>
            GetOrdersResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetOrdersResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetOrdersResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetOrdersResponse.#ctor(System.Collections.Generic.List{Conekta.net.Model.OrderResponse},System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetOrdersResponse" /> class.
            </summary>
            <param name="data">data (required).</param>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
        </member>
        <member name="P:Conekta.net.Model.GetOrdersResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="P:Conekta.net.Model.GetOrdersResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetOrdersResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetOrdersResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetOrdersResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="M:Conekta.net.Model.GetOrdersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrdersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrdersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrdersResponse.Equals(Conekta.net.Model.GetOrdersResponse)">
            <summary>
            Returns true if GetOrdersResponse instances are equal
            </summary>
            <param name="input">Instance of GetOrdersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrdersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetOrdersResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetPaymentMethodResponse">
            <summary>
            GetPaymentMethodResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetPaymentMethodResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.GetCustomerPaymentMethodDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetPaymentMethodResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetPaymentMethodResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetPaymentMethodResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetPaymentMethodResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetPaymentMethodResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetPaymentMethodResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponse.Equals(Conekta.net.Model.GetPaymentMethodResponse)">
            <summary>
            Returns true if GetPaymentMethodResponse instances are equal
            </summary>
            <param name="input">Instance of GetPaymentMethodResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetPaymentMethodResponseAllOf">
            <summary>
            GetPaymentMethodResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.GetCustomerPaymentMethodDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetPaymentMethodResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetPaymentMethodResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponseAllOf.Equals(Conekta.net.Model.GetPaymentMethodResponseAllOf)">
            <summary>
            Returns true if GetPaymentMethodResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetPaymentMethodResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPaymentMethodResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetPlansResponse">
            <summary>
            GetPlansResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetPlansResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.PlanResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetPlansResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetPlansResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetPlansResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetPlansResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetPlansResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetPlansResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponse.Equals(Conekta.net.Model.GetPlansResponse)">
            <summary>
            Returns true if GetPlansResponse instances are equal
            </summary>
            <param name="input">Instance of GetPlansResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetPlansResponseAllOf">
            <summary>
            GetPlansResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.PlanResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetPlansResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetPlansResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponseAllOf.Equals(Conekta.net.Model.GetPlansResponseAllOf)">
            <summary>
            Returns true if GetPlansResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetPlansResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetPlansResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetTransactionsResponse">
            <summary>
            GetTransactionsResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetTransactionsResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.TransactionResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetTransactionsResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">Transactions.</param>
        </member>
        <member name="P:Conekta.net.Model.GetTransactionsResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetTransactionsResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetTransactionsResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetTransactionsResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetTransactionsResponse.Data">
            <summary>
            Transactions
            </summary>
            <value>Transactions</value>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponse.Equals(Conekta.net.Model.GetTransactionsResponse)">
            <summary>
            Returns true if GetTransactionsResponse instances are equal
            </summary>
            <param name="input">Instance of GetTransactionsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetTransactionsResponseAllOf">
            <summary>
            GetTransactionsResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.TransactionResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetTransactionsResponseAllOf" /> class.
            </summary>
            <param name="data">Transactions.</param>
        </member>
        <member name="P:Conekta.net.Model.GetTransactionsResponseAllOf.Data">
            <summary>
            Transactions
            </summary>
            <value>Transactions</value>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponseAllOf.Equals(Conekta.net.Model.GetTransactionsResponseAllOf)">
            <summary>
            Returns true if GetTransactionsResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetTransactionsResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransactionsResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetTransfersResponse">
            <summary>
            GetTransfersResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetTransfersResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.TransfersResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetTransfersResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">Transfers.</param>
        </member>
        <member name="P:Conekta.net.Model.GetTransfersResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetTransfersResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetTransfersResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetTransfersResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetTransfersResponse.Data">
            <summary>
            Transfers
            </summary>
            <value>Transfers</value>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponse.Equals(Conekta.net.Model.GetTransfersResponse)">
            <summary>
            Returns true if GetTransfersResponse instances are equal
            </summary>
            <param name="input">Instance of GetTransfersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetTransfersResponseAllOf">
            <summary>
            GetTransfersResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.TransfersResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetTransfersResponseAllOf" /> class.
            </summary>
            <param name="data">Transfers.</param>
        </member>
        <member name="P:Conekta.net.Model.GetTransfersResponseAllOf.Data">
            <summary>
            Transfers
            </summary>
            <value>Transfers</value>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponseAllOf.Equals(Conekta.net.Model.GetTransfersResponseAllOf)">
            <summary>
            Returns true if GetTransfersResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetTransfersResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetTransfersResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetWebhookKeysResponse">
            <summary>
            GetWebhookKeysResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetWebhookKeysResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.WebhookKeyResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetWebhookKeysResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetWebhookKeysResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetWebhookKeysResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetWebhookKeysResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetWebhookKeysResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetWebhookKeysResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponse.Equals(Conekta.net.Model.GetWebhookKeysResponse)">
            <summary>
            Returns true if GetWebhookKeysResponse instances are equal
            </summary>
            <param name="input">Instance of GetWebhookKeysResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetWebhookKeysResponseAllOf">
            <summary>
            GetWebhookKeysResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.WebhookKeyResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetWebhookKeysResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetWebhookKeysResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponseAllOf.Equals(Conekta.net.Model.GetWebhookKeysResponseAllOf)">
            <summary>
            Returns true if GetWebhookKeysResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetWebhookKeysResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhookKeysResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetWebhooksResponse">
            <summary>
            GetWebhooksResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetWebhooksResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.WebhookResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetWebhooksResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetWebhooksResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.GetWebhooksResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.GetWebhooksResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetWebhooksResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.GetWebhooksResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponse.Equals(Conekta.net.Model.GetWebhooksResponse)">
            <summary>
            Returns true if GetWebhooksResponse instances are equal
            </summary>
            <param name="input">Instance of GetWebhooksResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.GetWebhooksResponseAllOf">
            <summary>
            GetWebhooksResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponseAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.WebhookResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.GetWebhooksResponseAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.GetWebhooksResponseAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponseAllOf.Equals(Conekta.net.Model.GetWebhooksResponseAllOf)">
            <summary>
            Returns true if GetWebhooksResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of GetWebhooksResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.GetWebhooksResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.LogResponse">
            <summary>
            log model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.LogResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.LogResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.LogResponse.#ctor(System.Int64,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.LogResponse" /> class.
            </summary>
            <param name="createdAt">createdAt (required).</param>
            <param name="id">id (required).</param>
            <param name="ipAddress">ipAddress.</param>
            <param name="livemode">livemode (required).</param>
            <param name="loggableId">loggableId.</param>
            <param name="loggableType">loggableType.</param>
            <param name="method">method.</param>
            <param name="oauthTokenId">oauthTokenId.</param>
            <param name="queryString">queryString.</param>
            <param name="related">related.</param>
            <param name="requestBody">requestBody.</param>
            <param name="requestHeaders">requestHeaders.</param>
            <param name="responseBody">responseBody.</param>
            <param name="responseHeaders">responseHeaders.</param>
            <param name="searchableTags">searchableTags.</param>
            <param name="status">status.</param>
            <param name="updatedAt">updatedAt.</param>
            <param name="url">url.</param>
            <param name="userAccountId">userAccountId.</param>
            <param name="varVersion">varVersion.</param>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1661445644</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>6307a60c41de27127515a575</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.IpAddress">
            <summary>
            Gets or Sets IpAddress
            </summary>
            <example>54.235.131.48</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.LoggableId">
            <summary>
            Gets or Sets LoggableId
            </summary>
            <example>ord_87632467832</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.LoggableType">
            <summary>
            Gets or Sets LoggableType
            </summary>
            <example>order</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.Method">
            <summary>
            Gets or Sets Method
            </summary>
            <example>POST</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.OauthTokenId">
            <summary>
            Gets or Sets OauthTokenId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.QueryString">
            <summary>
            Gets or Sets QueryString
            </summary>
            <example>{&quot;amount&quot;:3000,&quot;payable&quot;:true}</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.Related">
            <summary>
            Gets or Sets Related
            </summary>
            <example>FilterResource</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.RequestBody">
            <summary>
            Gets or Sets RequestBody
            </summary>
            <example>{&quot;filters&quot;:{&quot;amount&quot;:{&quot;amount_from&quot;:0,&quot;amount_to&quot;:0},&quot;created_at&quot;:{&quot;date_from&quot;:1653627600,&quot;date_to&quot;:1661489999},&quot;filterName&quot;:&quot;Payments&quot;,&quot;search_term&quot;:null,&quot;sort_by&quot;:&quot;created_at&quot;,&quot;sort_direction&quot;:&quot;desc&quot;,&quot;status&quot;:[],&quot;type&quot;:[]},&quot;id&quot;:&quot;78e65162-0f37-4942-847c-9bf7081d54c2&quot;,&quot;page&quot;:&quot;0&quot;,&quot;report_type&quot;:&quot;charges&quot;,&quot;testMode&quot;:false}</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.RequestHeaders">
            <summary>
            Gets or Sets RequestHeaders
            </summary>
            <example>{&quot;Accept&quot;:&quot;application/vnd.conekta-v2.1.0+json&quot;,&quot;Accept-Encoding&quot;:&quot;gzip, deflate, br&quot;,&quot;Accept-Language&quot;:&quot;es-419, es; q&#x3D;0.9, en; q&#x3D;0.8&quot;,&quot;Activitypermission&quot;:&quot;orders:read&quot;,&quot;Apiversion&quot;:&quot;2.1.0&quot;}</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.ResponseBody">
            <summary>
            Gets or Sets ResponseBody
            </summary>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.ResponseHeaders">
            <summary>
            Gets or Sets ResponseHeaders
            </summary>
            <example>{&quot;Access-Control-Allow-Headers&quot;:&quot;Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control, X-Prototype-Version, Authorization, Accept, Date, Version, X-Forwarded-For, Host, Connection, X-Forwarded-Proto, X-Forwarded-Port, X-Amzn-Trace-Id, Accept-Encoding, Accept-Language, Referer, Origin, Activitypermission, Apiversion, Entityid, Livemode, Sec-Ch-Ua, Sec-Ch-Ua-Mobile, Sec-Ch-Ua-Platform, Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site, X-Datadog-Parent-Id, X-Datadog-Sampling-Priority, X-Datadog-Trace-Id, X-Forwarded-Host, X-Forwarded-Server, X-Real-Ip&quot;,&quot;Access-Control-Allow-Methods&quot;:&quot;POST, GET, PUT, OPTIONS&quot;,&quot;Access-Control-Allow-Origin&quot;:&quot;*&quot;,&quot;Access-Control-Max-Age&quot;:&quot;1728000&quot;,&quot;Conekta-Media-Type&quot;:&quot;conekta-v2.1.0; format&#x3D;application/json&quot;,&quot;Content-Type&quot;:&quot;application/json; charset&#x3D;utf-8&quot;,&quot;Referrer-Policy&quot;:&quot;strict-origin-when-cross-origin&quot;,&quot;Strict-Transport-Security&quot;:&quot;max-age&#x3D;31536000; includeSubDomains&quot;,&quot;X-Content-Type-Options&quot;:&quot;nosniff&quot;,&quot;X-Download-Options&quot;:&quot;noopen&quot;,&quot;X-Frame-Options&quot;:&quot;SAMEORIGIN&quot;,&quot;X-Permitted-Cross-Domain-Policies&quot;:&quot;none&quot;,&quot;X-XSS-Protection&quot;:&quot;1; mode&#x3D;block&quot;}</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.SearchableTags">
            <summary>
            Gets or Sets SearchableTags
            </summary>
            <example>[&quot;6307a60c41de27127515a575&quot;,&quot;6307a60c41de27127515a571&quot;]</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.Status">
            <summary>
            Gets or Sets Status
            </summary>
            <example>200</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
            <example>2022-08-25T16:40:44.887Z</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.Url">
            <summary>
            Gets or Sets Url
            </summary>
            <example>/filter_resource</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.UserAccountId">
            <summary>
            Gets or Sets UserAccountId
            </summary>
            <example>5a0b7001edbb6e1725b0b2c6</example>
        </member>
        <member name="P:Conekta.net.Model.LogResponse.VarVersion">
            <summary>
            Gets or Sets VarVersion
            </summary>
            <example>2.1.0</example>
        </member>
        <member name="M:Conekta.net.Model.LogResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.LogResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.LogResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.LogResponse.Equals(Conekta.net.Model.LogResponse)">
            <summary>
            Returns true if LogResponse instances are equal
            </summary>
            <param name="input">Instance of LogResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.LogResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.LogResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.LogsResponse">
            <summary>
            logs model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.LogsResponse.#ctor(System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.LogsResponseData})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.LogsResponse" /> class.
            </summary>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">set to page results..</param>
        </member>
        <member name="P:Conekta.net.Model.LogsResponse.HasMore">
            <summary>
            True, if there are more pages.
            </summary>
            <value>True, if there are more pages.</value>
        </member>
        <member name="M:Conekta.net.Model.LogsResponse.ShouldSerializeHasMore">
            <summary>
            Returns false as HasMore should not be serialized given that it's read-only.
            </summary>
            <returns>false (boolean)</returns>
        </member>
        <member name="P:Conekta.net.Model.LogsResponse.VarObject">
            <summary>
            The object type
            </summary>
            <value>The object type</value>
        </member>
        <member name="M:Conekta.net.Model.LogsResponse.ShouldSerializeVarObject">
            <summary>
            Returns false as VarObject should not be serialized given that it's read-only.
            </summary>
            <returns>false (boolean)</returns>
        </member>
        <member name="P:Conekta.net.Model.LogsResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
        </member>
        <member name="P:Conekta.net.Model.LogsResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
        </member>
        <member name="P:Conekta.net.Model.LogsResponse.Data">
            <summary>
            set to page results.
            </summary>
            <value>set to page results.</value>
        </member>
        <member name="M:Conekta.net.Model.LogsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponse.Equals(Conekta.net.Model.LogsResponse)">
            <summary>
            Returns true if LogsResponse instances are equal
            </summary>
            <param name="input">Instance of LogsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.LogsResponseData">
            <summary>
            LogsResponseData
            </summary>
        </member>
        <member name="M:Conekta.net.Model.LogsResponseData.#ctor(System.Int64,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.LogsResponseData" /> class.
            </summary>
            <param name="createdAt">createdAt.</param>
            <param name="id">id.</param>
            <param name="ipAddress">ipAddress.</param>
            <param name="livemode">livemode.</param>
            <param name="loggableId">loggableId.</param>
            <param name="loggableType">loggableType.</param>
            <param name="method">method.</param>
            <param name="oauthTokenId">oauthTokenId.</param>
            <param name="queryString">queryString.</param>
            <param name="related">related.</param>
            <param name="requestBody">requestBody.</param>
            <param name="requestHeaders">requestHeaders.</param>
            <param name="responseBody">responseBody.</param>
            <param name="responseHeaders">responseHeaders.</param>
            <param name="searchableTags">searchableTags.</param>
            <param name="status">status.</param>
            <param name="updatedAt">updatedAt.</param>
            <param name="url">url.</param>
            <param name="userAccountId">userAccountId.</param>
            <param name="varVersion">varVersion.</param>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1661445644</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>6307a60c41de27127515a575</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.IpAddress">
            <summary>
            Gets or Sets IpAddress
            </summary>
            <example>54.235.131.48</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.LoggableId">
            <summary>
            Gets or Sets LoggableId
            </summary>
            <example>ord_87632467832</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.LoggableType">
            <summary>
            Gets or Sets LoggableType
            </summary>
            <example>order</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.Method">
            <summary>
            Gets or Sets Method
            </summary>
            <example>POST</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.OauthTokenId">
            <summary>
            Gets or Sets OauthTokenId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.QueryString">
            <summary>
            Gets or Sets QueryString
            </summary>
            <example>{&quot;amount&quot;:3000,&quot;payable&quot;:true}</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.Related">
            <summary>
            Gets or Sets Related
            </summary>
            <example>FilterResource</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.RequestBody">
            <summary>
            Gets or Sets RequestBody
            </summary>
            <example>{&quot;filters&quot;:{&quot;amount&quot;:{&quot;amount_from&quot;:0,&quot;amount_to&quot;:0},&quot;created_at&quot;:{&quot;date_from&quot;:1653627600,&quot;date_to&quot;:1661489999},&quot;filterName&quot;:&quot;Payments&quot;,&quot;search_term&quot;:null,&quot;sort_by&quot;:&quot;created_at&quot;,&quot;sort_direction&quot;:&quot;desc&quot;,&quot;status&quot;:[],&quot;type&quot;:[]},&quot;id&quot;:&quot;78e65162-0f37-4942-847c-9bf7081d54c2&quot;,&quot;page&quot;:&quot;0&quot;,&quot;report_type&quot;:&quot;charges&quot;,&quot;testMode&quot;:false}</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.RequestHeaders">
            <summary>
            Gets or Sets RequestHeaders
            </summary>
            <example>{&quot;Accept&quot;:&quot;application/vnd.conekta-v2.1.0+json&quot;,&quot;Accept-Encoding&quot;:&quot;gzip, deflate, br&quot;,&quot;Accept-Language&quot;:&quot;es-419, es; q&#x3D;0.9, en; q&#x3D;0.8&quot;,&quot;Activitypermission&quot;:&quot;orders:read&quot;,&quot;Apiversion&quot;:&quot;2.1.0&quot;}</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.ResponseBody">
            <summary>
            Gets or Sets ResponseBody
            </summary>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.ResponseHeaders">
            <summary>
            Gets or Sets ResponseHeaders
            </summary>
            <example>{&quot;Access-Control-Allow-Headers&quot;:&quot;Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control, X-Prototype-Version, Authorization, Accept, Date, Version, X-Forwarded-For, Host, Connection, X-Forwarded-Proto, X-Forwarded-Port, X-Amzn-Trace-Id, Accept-Encoding, Accept-Language, Referer, Origin, Activitypermission, Apiversion, Entityid, Livemode, Sec-Ch-Ua, Sec-Ch-Ua-Mobile, Sec-Ch-Ua-Platform, Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site, X-Datadog-Parent-Id, X-Datadog-Sampling-Priority, X-Datadog-Trace-Id, X-Forwarded-Host, X-Forwarded-Server, X-Real-Ip&quot;,&quot;Access-Control-Allow-Methods&quot;:&quot;POST, GET, PUT, OPTIONS&quot;,&quot;Access-Control-Allow-Origin&quot;:&quot;*&quot;,&quot;Access-Control-Max-Age&quot;:&quot;1728000&quot;,&quot;Conekta-Media-Type&quot;:&quot;conekta-v2.1.0; format&#x3D;application/json&quot;,&quot;Content-Type&quot;:&quot;application/json; charset&#x3D;utf-8&quot;,&quot;Referrer-Policy&quot;:&quot;strict-origin-when-cross-origin&quot;,&quot;Strict-Transport-Security&quot;:&quot;max-age&#x3D;31536000; includeSubDomains&quot;,&quot;X-Content-Type-Options&quot;:&quot;nosniff&quot;,&quot;X-Download-Options&quot;:&quot;noopen&quot;,&quot;X-Frame-Options&quot;:&quot;SAMEORIGIN&quot;,&quot;X-Permitted-Cross-Domain-Policies&quot;:&quot;none&quot;,&quot;X-XSS-Protection&quot;:&quot;1; mode&#x3D;block&quot;}</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.SearchableTags">
            <summary>
            Gets or Sets SearchableTags
            </summary>
            <example>[&quot;6307a60c41de27127515a575&quot;,&quot;6307a60c41de27127515a571&quot;]</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.Status">
            <summary>
            Gets or Sets Status
            </summary>
            <example>200</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.UpdatedAt">
            <summary>
            Gets or Sets UpdatedAt
            </summary>
            <example>2022-08-25T16:40:44.887Z</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.Url">
            <summary>
            Gets or Sets Url
            </summary>
            <example>/filter_resource</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.UserAccountId">
            <summary>
            Gets or Sets UserAccountId
            </summary>
            <example>5a0b7001edbb6e1725b0b2c6</example>
        </member>
        <member name="P:Conekta.net.Model.LogsResponseData.VarVersion">
            <summary>
            Gets or Sets VarVersion
            </summary>
            <example>2.1.0</example>
        </member>
        <member name="M:Conekta.net.Model.LogsResponseData.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponseData.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponseData.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponseData.Equals(Conekta.net.Model.LogsResponseData)">
            <summary>
            Returns true if LogsResponseData instances are equal
            </summary>
            <param name="input">Instance of LogsResponseData to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponseData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.LogsResponseData.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderCaptureRequest">
            <summary>
            OrderCaptureRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderCaptureRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderCaptureRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderCaptureRequest.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderCaptureRequest" /> class.
            </summary>
            <param name="amount">Amount to capture (required).</param>
        </member>
        <member name="P:Conekta.net.Model.OrderCaptureRequest.Amount">
            <summary>
            Amount to capture
            </summary>
            <value>Amount to capture</value>
            <example>500</example>
        </member>
        <member name="M:Conekta.net.Model.OrderCaptureRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCaptureRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCaptureRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCaptureRequest.Equals(Conekta.net.Model.OrderCaptureRequest)">
            <summary>
            Returns true if OrderCaptureRequest instances are equal
            </summary>
            <param name="input">Instance of OrderCaptureRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCaptureRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCaptureRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderCustomerInfoResponse">
            <summary>
            OrderCustomerInfoResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderCustomerInfoResponse.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderCustomerInfoResponse" /> class.
            </summary>
            <param name="customerCustomReference">Custom reference.</param>
            <param name="name">name.</param>
            <param name="email">email.</param>
            <param name="phone">phone.</param>
            <param name="corporate">corporate (default to false).</param>
            <param name="varObject">varObject.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderCustomerInfoResponse.CustomerCustomReference">
            <summary>
            Custom reference
            </summary>
            <value>Custom reference</value>
            <example>custom_reference</example>
        </member>
        <member name="P:Conekta.net.Model.OrderCustomerInfoResponse.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>DevTest</example>
        </member>
        <member name="P:Conekta.net.Model.OrderCustomerInfoResponse.Email">
            <summary>
            Gets or Sets Email
            </summary>
            <example>test@conekta.com</example>
        </member>
        <member name="P:Conekta.net.Model.OrderCustomerInfoResponse.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
            <example>5522997233</example>
        </member>
        <member name="P:Conekta.net.Model.OrderCustomerInfoResponse.Corporate">
            <summary>
            Gets or Sets Corporate
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderCustomerInfoResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>customer_info</example>
        </member>
        <member name="M:Conekta.net.Model.OrderCustomerInfoResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCustomerInfoResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCustomerInfoResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCustomerInfoResponse.Equals(Conekta.net.Model.OrderCustomerInfoResponse)">
            <summary>
            Returns true if OrderCustomerInfoResponse instances are equal
            </summary>
            <param name="input">Instance of OrderCustomerInfoResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCustomerInfoResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderCustomerInfoResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderDiscountLinesRequest">
            <summary>
            List of discounts that apply to the order.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderDiscountLinesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderDiscountLinesRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderDiscountLinesRequest.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderDiscountLinesRequest" /> class.
            </summary>
            <param name="amount">The amount to be deducted from the total sum of all payments, in cents. (required).</param>
            <param name="code">Discount code. (required).</param>
            <param name="type">It can be &#39;loyalty&#39;, &#39;campaign&#39;, &#39;coupon&#39; o &#39;sign&#39; (required).</param>
        </member>
        <member name="P:Conekta.net.Model.OrderDiscountLinesRequest.Amount">
            <summary>
            The amount to be deducted from the total sum of all payments, in cents.
            </summary>
            <value>The amount to be deducted from the total sum of all payments, in cents.</value>
            <example>500</example>
        </member>
        <member name="P:Conekta.net.Model.OrderDiscountLinesRequest.Code">
            <summary>
            Discount code.
            </summary>
            <value>Discount code.</value>
            <example>123</example>
        </member>
        <member name="P:Conekta.net.Model.OrderDiscountLinesRequest.Type">
            <summary>
            It can be &#39;loyalty&#39;, &#39;campaign&#39;, &#39;coupon&#39; o &#39;sign&#39;
            </summary>
            <value>It can be &#39;loyalty&#39;, &#39;campaign&#39;, &#39;coupon&#39; o &#39;sign&#39;</value>
            <example>loyalty</example>
        </member>
        <member name="M:Conekta.net.Model.OrderDiscountLinesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderDiscountLinesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderDiscountLinesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderDiscountLinesRequest.Equals(Conekta.net.Model.OrderDiscountLinesRequest)">
            <summary>
            Returns true if OrderDiscountLinesRequest instances are equal
            </summary>
            <param name="input">Instance of OrderDiscountLinesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderDiscountLinesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderDiscountLinesRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderFiscalEntityAddressResponse">
            <summary>
            Address of the fiscal entity
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderFiscalEntityAddressResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponse.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderFiscalEntityAddressResponse" /> class.
            </summary>
            <param name="street1">Street name and number (required).</param>
            <param name="street2">Street name and number.</param>
            <param name="postalCode">Postal code (required).</param>
            <param name="city">City (required).</param>
            <param name="state">State.</param>
            <param name="country">this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) (required).</param>
            <param name="externalNumber">External number (required).</param>
            <param name="varObject">varObject.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityAddressResponse.Street1">
            <summary>
            Street name and number
            </summary>
            <value>Street name and number</value>
            <example>Nuevo Leon 254</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityAddressResponse.Street2">
            <summary>
            Street name and number
            </summary>
            <value>Street name and number</value>
            <example>Departamento 404</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityAddressResponse.PostalCode">
            <summary>
            Postal code
            </summary>
            <value>Postal code</value>
            <example>06100</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityAddressResponse.City">
            <summary>
            City
            </summary>
            <value>City</value>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityAddressResponse.State">
            <summary>
            State
            </summary>
            <value>State</value>
            <example>Ciudad de Mexico</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityAddressResponse.Country">
            <summary>
            this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            </summary>
            <value>this field follows the [ISO 3166-1 alpha-2 standard](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)</value>
            <example>MX</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityAddressResponse.ExternalNumber">
            <summary>
            External number
            </summary>
            <value>External number</value>
            <example>123</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityAddressResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>fiscal_entity_address</example>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponse.Equals(Conekta.net.Model.OrderFiscalEntityAddressResponse)">
            <summary>
            Returns true if OrderFiscalEntityAddressResponse instances are equal
            </summary>
            <param name="input">Instance of OrderFiscalEntityAddressResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf">
            <summary>
            OrderFiscalEntityAddressResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf" /> class.
            </summary>
            <param name="varObject">varObject.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>fiscal_entity_address</example>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf.Equals(Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf)">
            <summary>
            Returns true if OrderFiscalEntityAddressResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of OrderFiscalEntityAddressResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityAddressResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderFiscalEntityRequest">
            <summary>
            Fiscal entity of the order, Currently it is a purely informative field
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderFiscalEntityRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityRequest.#ctor(Conekta.net.Model.FiscalEntityAddress,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderFiscalEntityRequest" /> class.
            </summary>
            <param name="address">address (required).</param>
            <param name="email">Email of the fiscal entity.</param>
            <param name="metadata">Metadata associated with the fiscal entity.</param>
            <param name="name">Name of the fiscal entity.</param>
            <param name="phone">Phone of the fiscal entity.</param>
            <param name="taxId">Tax ID of the fiscal entity.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityRequest.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityRequest.Email">
            <summary>
            Email of the fiscal entity
            </summary>
            <value>Email of the fiscal entity</value>
            <example>test@gmail.com</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityRequest.Metadata">
            <summary>
            Metadata associated with the fiscal entity
            </summary>
            <value>Metadata associated with the fiscal entity</value>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityRequest.Name">
            <summary>
            Name of the fiscal entity
            </summary>
            <value>Name of the fiscal entity</value>
            <example>Conekta Inc</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityRequest.Phone">
            <summary>
            Phone of the fiscal entity
            </summary>
            <value>Phone of the fiscal entity</value>
            <example>525511223344</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityRequest.TaxId">
            <summary>
            Tax ID of the fiscal entity
            </summary>
            <value>Tax ID of the fiscal entity</value>
            <example>AAA010101AAA</example>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityRequest.Equals(Conekta.net.Model.OrderFiscalEntityRequest)">
            <summary>
            Returns true if OrderFiscalEntityRequest instances are equal
            </summary>
            <param name="input">Instance of OrderFiscalEntityRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderFiscalEntityResponse">
            <summary>
            Fiscal entity of the order, Currently it is a purely informative field
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderFiscalEntityResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityResponse.#ctor(Conekta.net.Model.OrderFiscalEntityAddressResponse,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Int64,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderFiscalEntityResponse" /> class.
            </summary>
            <param name="address">address (required).</param>
            <param name="email">Email of the fiscal entity.</param>
            <param name="metadata">Metadata associated with the fiscal entity.</param>
            <param name="name">Name of the fiscal entity.</param>
            <param name="taxId">Tax ID of the fiscal entity.</param>
            <param name="id">ID of the fiscal entity (required).</param>
            <param name="createdAt">The time at which the object was created in seconds since the Unix epoch (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="phone">Phone of the fiscal entity.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityResponse.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityResponse.Email">
            <summary>
            Email of the fiscal entity
            </summary>
            <value>Email of the fiscal entity</value>
            <example>test@gmail.com</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityResponse.Metadata">
            <summary>
            Metadata associated with the fiscal entity
            </summary>
            <value>Metadata associated with the fiscal entity</value>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityResponse.Name">
            <summary>
            Name of the fiscal entity
            </summary>
            <value>Name of the fiscal entity</value>
            <example>Conekta Inc</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityResponse.TaxId">
            <summary>
            Tax ID of the fiscal entity
            </summary>
            <value>Tax ID of the fiscal entity</value>
            <example>324234234</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityResponse.Id">
            <summary>
            ID of the fiscal entity
            </summary>
            <value>ID of the fiscal entity</value>
            <example>fis_ent_2tN85VYaSMyDvjB3M</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityResponse.CreatedAt">
            <summary>
            The time at which the object was created in seconds since the Unix epoch
            </summary>
            <value>The time at which the object was created in seconds since the Unix epoch</value>
            <example>1676328434</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>fiscal_entity</example>
        </member>
        <member name="P:Conekta.net.Model.OrderFiscalEntityResponse.Phone">
            <summary>
            Phone of the fiscal entity
            </summary>
            <value>Phone of the fiscal entity</value>
            <example>525511223344</example>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityResponse.Equals(Conekta.net.Model.OrderFiscalEntityResponse)">
            <summary>
            Returns true if OrderFiscalEntityResponse instances are equal
            </summary>
            <param name="input">Instance of OrderFiscalEntityResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderFiscalEntityResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderNextActionResponse">
            <summary>
            contains the following attributes that will guide to continue the flow
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponse.#ctor(Conekta.net.Model.OrderNextActionResponseRedirectToUrl,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderNextActionResponse" /> class.
            </summary>
            <param name="redirectToUrl">redirectToUrl.</param>
            <param name="type">Indicates the type of action to be taken.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderNextActionResponse.RedirectToUrl">
            <summary>
            Gets or Sets RedirectToUrl
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderNextActionResponse.Type">
            <summary>
            Indicates the type of action to be taken
            </summary>
            <value>Indicates the type of action to be taken</value>
            <example>redirect_to_url</example>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponse.Equals(Conekta.net.Model.OrderNextActionResponse)">
            <summary>
            Returns true if OrderNextActionResponse instances are equal
            </summary>
            <param name="input">Instance of OrderNextActionResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderNextActionResponseRedirectToUrl">
            <summary>
            contains the following attributes that will guide to continue the flow
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponseRedirectToUrl.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderNextActionResponseRedirectToUrl" /> class.
            </summary>
            <param name="url">pay.conekta.com/{id} Indicates the url of the Conekta component to authenticate the flow through 3DS2..</param>
            <param name="returnUrl">Indicates the url to which the 3DS2 flow returns at the end, when the integration is redirected..</param>
        </member>
        <member name="P:Conekta.net.Model.OrderNextActionResponseRedirectToUrl.Url">
            <summary>
            pay.conekta.com/{id} Indicates the url of the Conekta component to authenticate the flow through 3DS2.
            </summary>
            <value>pay.conekta.com/{id} Indicates the url of the Conekta component to authenticate the flow through 3DS2.</value>
            <example>https://pay.conekta.com/6fca054a85194c43971ecea35cc519bb</example>
        </member>
        <member name="P:Conekta.net.Model.OrderNextActionResponseRedirectToUrl.ReturnUrl">
            <summary>
            Indicates the url to which the 3DS2 flow returns at the end, when the integration is redirected.
            </summary>
            <value>Indicates the url to which the 3DS2 flow returns at the end, when the integration is redirected.</value>
            <example>https://my-website.com&quot;</example>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponseRedirectToUrl.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponseRedirectToUrl.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponseRedirectToUrl.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponseRedirectToUrl.Equals(Conekta.net.Model.OrderNextActionResponseRedirectToUrl)">
            <summary>
            Returns true if OrderNextActionResponseRedirectToUrl instances are equal
            </summary>
            <param name="input">Instance of OrderNextActionResponseRedirectToUrl to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponseRedirectToUrl.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderNextActionResponseRedirectToUrl.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderRefundRequest">
            <summary>
            OrderRefundRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderRefundRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderRefundRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderRefundRequest.#ctor(System.Int32,System.Nullable{System.Int64},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderRefundRequest" /> class.
            </summary>
            <param name="amount">amount (required).</param>
            <param name="expiresAt">expiresAt.</param>
            <param name="reason">reason (required).</param>
        </member>
        <member name="P:Conekta.net.Model.OrderRefundRequest.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
            <example>500</example>
        </member>
        <member name="P:Conekta.net.Model.OrderRefundRequest.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>1553273553</example>
        </member>
        <member name="P:Conekta.net.Model.OrderRefundRequest.Reason">
            <summary>
            Gets or Sets Reason
            </summary>
            <example>suspected_fraud</example>
        </member>
        <member name="M:Conekta.net.Model.OrderRefundRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRefundRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRefundRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRefundRequest.Equals(Conekta.net.Model.OrderRefundRequest)">
            <summary>
            Returns true if OrderRefundRequest instances are equal
            </summary>
            <param name="input">Instance of OrderRefundRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRefundRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRefundRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderRequest">
            <summary>
            a order
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderRequest.#ctor(System.Collections.Generic.List{Conekta.net.Model.ChargeRequest},Conekta.net.Model.CheckoutRequest,System.String,Conekta.net.Model.OrderRequestCustomerInfo,System.Collections.Generic.List{Conekta.net.Model.OrderDiscountLinesRequest},Conekta.net.Model.OrderFiscalEntityRequest,System.Collections.Generic.List{Conekta.net.Model.Product},System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean,System.String,System.String,Conekta.net.Model.CustomerShippingContacts,System.Collections.Generic.List{Conekta.net.Model.ShippingRequest},System.Collections.Generic.List{Conekta.net.Model.OrderTaxRequest},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderRequest" /> class.
            </summary>
            <param name="charges">List of [charges](https://developers.conekta.com/v2.1.0/reference/orderscreatecharge) that are applied to the order.</param>
            <param name="checkout">checkout.</param>
            <param name="currency">Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217) (required).</param>
            <param name="customerInfo">customerInfo (required).</param>
            <param name="discountLines">List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount..</param>
            <param name="fiscalEntity">fiscalEntity.</param>
            <param name="lineItems">List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product. (required).</param>
            <param name="metadata">Metadata associated with the order.</param>
            <param name="needsShippingContact">Allows you to fill out the shipping information at checkout.</param>
            <param name="preAuthorize">Indicates whether the order charges must be preauthorized (default to false).</param>
            <param name="processingMode">Indicates the processing mode for the order, either ecommerce, recurrent or validation..</param>
            <param name="returnUrl">Indicates the redirection callback upon completion of the 3DS2 flow..</param>
            <param name="shippingContact">shippingContact.</param>
            <param name="shippingLines">List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products..</param>
            <param name="taxLines">List of [taxes](https://developers.conekta.com/v2.1.0/reference/orderscreatetaxes) that are applied to the order..</param>
            <param name="threeDsMode">Indicates the 3DS2 mode for the order, either smart or strict..</param>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.Charges">
            <summary>
            List of [charges](https://developers.conekta.com/v2.1.0/reference/orderscreatecharge) that are applied to the order
            </summary>
            <value>List of [charges](https://developers.conekta.com/v2.1.0/reference/orderscreatecharge) that are applied to the order</value>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.Checkout">
            <summary>
            Gets or Sets Checkout
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.Currency">
            <summary>
            Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
            </summary>
            <value>Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.CustomerInfo">
            <summary>
            Gets or Sets CustomerInfo
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.DiscountLines">
            <summary>
            List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount.
            </summary>
            <value>List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount.</value>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.FiscalEntity">
            <summary>
            Gets or Sets FiscalEntity
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.LineItems">
            <summary>
            List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product.
            </summary>
            <value>List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product.</value>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.Metadata">
            <summary>
            Metadata associated with the order
            </summary>
            <value>Metadata associated with the order</value>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.NeedsShippingContact">
            <summary>
            Allows you to fill out the shipping information at checkout
            </summary>
            <value>Allows you to fill out the shipping information at checkout</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.PreAuthorize">
            <summary>
            Indicates whether the order charges must be preauthorized
            </summary>
            <value>Indicates whether the order charges must be preauthorized</value>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.ProcessingMode">
            <summary>
            Indicates the processing mode for the order, either ecommerce, recurrent or validation.
            </summary>
            <value>Indicates the processing mode for the order, either ecommerce, recurrent or validation.</value>
            <example>ecommerce</example>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.ReturnUrl">
            <summary>
            Indicates the redirection callback upon completion of the 3DS2 flow.
            </summary>
            <value>Indicates the redirection callback upon completion of the 3DS2 flow.</value>
            <example>https://my-website.com</example>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.ShippingContact">
            <summary>
            Gets or Sets ShippingContact
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.ShippingLines">
            <summary>
            List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products.
            </summary>
            <value>List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products.</value>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.TaxLines">
            <summary>
            List of [taxes](https://developers.conekta.com/v2.1.0/reference/orderscreatetaxes) that are applied to the order.
            </summary>
            <value>List of [taxes](https://developers.conekta.com/v2.1.0/reference/orderscreatetaxes) that are applied to the order.</value>
        </member>
        <member name="P:Conekta.net.Model.OrderRequest.ThreeDsMode">
            <summary>
            Indicates the 3DS2 mode for the order, either smart or strict.
            </summary>
            <value>Indicates the 3DS2 mode for the order, either smart or strict.</value>
        </member>
        <member name="M:Conekta.net.Model.OrderRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequest.Equals(Conekta.net.Model.OrderRequest)">
            <summary>
            Returns true if OrderRequest instances are equal
            </summary>
            <param name="input">Instance of OrderRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderRequestCustomerInfo">
            <summary>
            Customer information
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.#ctor(Conekta.net.Model.CustomerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderRequestCustomerInfo" /> class
            with the <see cref="T:Conekta.net.Model.CustomerInfo" /> class
            </summary>
            <param name="actualInstance">An instance of CustomerInfo.</param>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.#ctor(Conekta.net.Model.CustomerInfoJustCustomerId)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderRequestCustomerInfo" /> class
            with the <see cref="T:Conekta.net.Model.CustomerInfoJustCustomerId" /> class
            </summary>
            <param name="actualInstance">An instance of CustomerInfoJustCustomerId.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderRequestCustomerInfo.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.GetCustomerInfo">
            <summary>
            Get the actual instance of `CustomerInfo`. If the actual instance is not `CustomerInfo`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of CustomerInfo</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.GetCustomerInfoJustCustomerId">
            <summary>
            Get the actual instance of `CustomerInfoJustCustomerId`. If the actual instance is not `CustomerInfoJustCustomerId`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of CustomerInfoJustCustomerId</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of OrderRequestCustomerInfo
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of OrderRequestCustomerInfo</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.Equals(Conekta.net.Model.OrderRequestCustomerInfo)">
            <summary>
            Returns true if OrderRequestCustomerInfo instances are equal
            </summary>
            <param name="input">Instance of OrderRequestCustomerInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderRequestCustomerInfoJsonConverter">
            <summary>
            Custom JSON converter for OrderRequestCustomerInfo
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfoJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfoJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderRequestCustomerInfoJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponse">
            <summary>
            order response
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponse.#ctor(System.Int32,System.Int32,Conekta.net.Model.ChargeResponseChannel,Conekta.net.Model.OrderResponseCharges,Conekta.net.Model.OrderResponseCheckout,System.Int64,System.String,Conekta.net.Model.OrderResponseCustomerInfo,Conekta.net.Model.OrderResponseDiscountLines,Conekta.net.Model.OrderFiscalEntityResponse,System.String,System.Boolean,Conekta.net.Model.OrderResponseProducts,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},Conekta.net.Model.OrderNextActionResponse,System.String,System.String,System.String,Conekta.net.Model.OrderResponseShippingContact,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponse" /> class.
            </summary>
            <param name="amount">The total amount to be collected in cents.</param>
            <param name="amountRefunded">The total amount refunded in cents.</param>
            <param name="channel">channel.</param>
            <param name="charges">charges.</param>
            <param name="checkout">checkout.</param>
            <param name="createdAt">The time at which the object was created in seconds since the Unix epoch.</param>
            <param name="currency">The three-letter ISO 4217 currency code. The currency of the order..</param>
            <param name="customerInfo">customerInfo.</param>
            <param name="discountLines">discountLines.</param>
            <param name="fiscalEntity">fiscalEntity.</param>
            <param name="id">id.</param>
            <param name="isRefundable">isRefundable.</param>
            <param name="lineItems">lineItems.</param>
            <param name="livemode">Whether the object exists in live mode or test mode.</param>
            <param name="metadata">Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format..</param>
            <param name="nextAction">nextAction.</param>
            <param name="varObject">String representing the object’s type. Objects of the same type share the same value..</param>
            <param name="paymentStatus">The payment status of the order..</param>
            <param name="processingMode">Indicates the processing mode for the order, either ecommerce, recurrent or validation..</param>
            <param name="shippingContact">shippingContact.</param>
            <param name="updatedAt">The time at which the object was last updated in seconds since the Unix epoch.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.Amount">
            <summary>
            The total amount to be collected in cents
            </summary>
            <value>The total amount to be collected in cents</value>
            <example>21605</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.AmountRefunded">
            <summary>
            The total amount refunded in cents
            </summary>
            <value>The total amount refunded in cents</value>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.Channel">
            <summary>
            Gets or Sets Channel
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.Charges">
            <summary>
            Gets or Sets Charges
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.Checkout">
            <summary>
            Gets or Sets Checkout
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.CreatedAt">
            <summary>
            The time at which the object was created in seconds since the Unix epoch
            </summary>
            <value>The time at which the object was created in seconds since the Unix epoch</value>
            <example>1676328434</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.Currency">
            <summary>
            The three-letter ISO 4217 currency code. The currency of the order.
            </summary>
            <value>The three-letter ISO 4217 currency code. The currency of the order.</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.CustomerInfo">
            <summary>
            Gets or Sets CustomerInfo
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.DiscountLines">
            <summary>
            Gets or Sets DiscountLines
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.FiscalEntity">
            <summary>
            Gets or Sets FiscalEntity
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>ord_2tMtQQpDvfnNjiuFG</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.IsRefundable">
            <summary>
            Gets or Sets IsRefundable
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.LineItems">
            <summary>
            Gets or Sets LineItems
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.Livemode">
            <summary>
            Whether the object exists in live mode or test mode
            </summary>
            <value>Whether the object exists in live mode or test mode</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.Metadata">
            <summary>
            Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
            </summary>
            <value>Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</value>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.NextAction">
            <summary>
            Gets or Sets NextAction
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.VarObject">
            <summary>
            String representing the object’s type. Objects of the same type share the same value.
            </summary>
            <value>String representing the object’s type. Objects of the same type share the same value.</value>
            <example>order</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.PaymentStatus">
            <summary>
            The payment status of the order.
            </summary>
            <value>The payment status of the order.</value>
            <example>paid</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.ProcessingMode">
            <summary>
            Indicates the processing mode for the order, either ecommerce, recurrent or validation.
            </summary>
            <value>Indicates the processing mode for the order, either ecommerce, recurrent or validation.</value>
            <example>ecommerce</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.ShippingContact">
            <summary>
            Gets or Sets ShippingContact
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponse.UpdatedAt">
            <summary>
            The time at which the object was last updated in seconds since the Unix epoch
            </summary>
            <value>The time at which the object was last updated in seconds since the Unix epoch</value>
            <example>1676328434</example>
        </member>
        <member name="M:Conekta.net.Model.OrderResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponse.Equals(Conekta.net.Model.OrderResponse)">
            <summary>
            Returns true if OrderResponse instances are equal
            </summary>
            <param name="input">Instance of OrderResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseCharges">
            <summary>
            The charges associated with the order
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCharges.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseCharges" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCharges.#ctor(System.Boolean,System.String,System.Collections.Generic.List{Conekta.net.Model.ChargesDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseCharges" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCharges.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCharges.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCharges.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCharges.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCharges.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCharges.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCharges.Equals(Conekta.net.Model.OrderResponseCharges)">
            <summary>
            Returns true if OrderResponseCharges instances are equal
            </summary>
            <param name="input">Instance of OrderResponseCharges to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCharges.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCharges.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseChargesAllOf">
            <summary>
            OrderResponseChargesAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseChargesAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.ChargesDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseChargesAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseChargesAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseChargesAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseChargesAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseChargesAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseChargesAllOf.Equals(Conekta.net.Model.OrderResponseChargesAllOf)">
            <summary>
            Returns true if OrderResponseChargesAllOf instances are equal
            </summary>
            <param name="input">Instance of OrderResponseChargesAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseChargesAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseChargesAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseCheckout">
            <summary>
            OrderResponseCheckout
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCheckout.#ctor(System.Collections.Generic.List{System.String},System.Boolean,System.Int32,System.Collections.Generic.List{System.Object},System.Int64,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Collections.Generic.List{System.Int32},System.String,System.Boolean,System.String,System.Nullable{System.Boolean},System.Int32,System.Boolean,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseCheckout" /> class.
            </summary>
            <param name="allowedPaymentMethods">allowedPaymentMethods.</param>
            <param name="canNotExpire">canNotExpire.</param>
            <param name="emailsSent">emailsSent.</param>
            <param name="excludeCardNetworks">excludeCardNetworks.</param>
            <param name="expiresAt">expiresAt.</param>
            <param name="failureUrl">failureUrl.</param>
            <param name="force3dsFlow">force3dsFlow.</param>
            <param name="id">id.</param>
            <param name="isRedirectOnFailure">isRedirectOnFailure.</param>
            <param name="livemode">livemode.</param>
            <param name="metadata">metadata.</param>
            <param name="monthlyInstallmentsEnabled">monthlyInstallmentsEnabled.</param>
            <param name="monthlyInstallmentsOptions">monthlyInstallmentsOptions.</param>
            <param name="name">name.</param>
            <param name="needsShippingContact">needsShippingContact.</param>
            <param name="varObject">varObject.</param>
            <param name="onDemandEnabled">onDemandEnabled.</param>
            <param name="paidPaymentsCount">paidPaymentsCount.</param>
            <param name="recurrent">recurrent.</param>
            <param name="slug">slug.</param>
            <param name="smsSent">smsSent.</param>
            <param name="successUrl">successUrl.</param>
            <param name="startsAt">startsAt.</param>
            <param name="status">status.</param>
            <param name="type">type.</param>
            <param name="url">url.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.AllowedPaymentMethods">
            <summary>
            Gets or Sets AllowedPaymentMethods
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.CanNotExpire">
            <summary>
            Gets or Sets CanNotExpire
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.EmailsSent">
            <summary>
            Gets or Sets EmailsSent
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.ExcludeCardNetworks">
            <summary>
            Gets or Sets ExcludeCardNetworks
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>1676613599</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.FailureUrl">
            <summary>
            Gets or Sets FailureUrl
            </summary>
            <example>http://187.216.228.66:2222/SysVentasPagos/Acceso.aspx</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Force3dsFlow">
            <summary>
            Gets or Sets Force3dsFlow
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>6fca054a-8519-4c43-971e-cea35cc519bb</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.IsRedirectOnFailure">
            <summary>
            Gets or Sets IsRedirectOnFailure
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.MonthlyInstallmentsEnabled">
            <summary>
            Gets or Sets MonthlyInstallmentsEnabled
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.MonthlyInstallmentsOptions">
            <summary>
            Gets or Sets MonthlyInstallmentsOptions
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>ord-2tNDzhA4Akmzj11AS</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.NeedsShippingContact">
            <summary>
            Gets or Sets NeedsShippingContact
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>checkout</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.OnDemandEnabled">
            <summary>
            Gets or Sets OnDemandEnabled
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.PaidPaymentsCount">
            <summary>
            Gets or Sets PaidPaymentsCount
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Recurrent">
            <summary>
            Gets or Sets Recurrent
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Slug">
            <summary>
            Gets or Sets Slug
            </summary>
            <example>6fca054a85194c43971ecea35cc519bb</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.SmsSent">
            <summary>
            Gets or Sets SmsSent
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.SuccessUrl">
            <summary>
            Gets or Sets SuccessUrl
            </summary>
            <example>http://187.216.228.66:2222/SysVentasPagos/Acceso.aspx</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.StartsAt">
            <summary>
            Gets or Sets StartsAt
            </summary>
            <example>1676354400</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Status">
            <summary>
            Gets or Sets Status
            </summary>
            <example>Issued</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Type">
            <summary>
            Gets or Sets Type
            </summary>
            <example>HostedPayment</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCheckout.Url">
            <summary>
            Gets or Sets Url
            </summary>
            <example>https://pay.stg.conekta.io/checkout/6fca054a85194c43971ecea35cc519bb</example>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCheckout.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCheckout.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCheckout.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCheckout.Equals(Conekta.net.Model.OrderResponseCheckout)">
            <summary>
            Returns true if OrderResponseCheckout instances are equal
            </summary>
            <param name="input">Instance of OrderResponseCheckout to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCheckout.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCheckout.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseCustomerInfo">
            <summary>
            OrderResponseCustomerInfo
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseCustomerInfo" /> class.
            </summary>
            <param name="varObject">varObject.</param>
            <param name="customerCustomReference">Custom reference.</param>
            <param name="name">name.</param>
            <param name="email">email.</param>
            <param name="phone">phone.</param>
            <param name="corporate">corporate (default to false).</param>
            <param name="customerId">customerId.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCustomerInfo.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>customer_info</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCustomerInfo.CustomerCustomReference">
            <summary>
            Custom reference
            </summary>
            <value>Custom reference</value>
            <example>custom_reference</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCustomerInfo.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>DevTest</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCustomerInfo.Email">
            <summary>
            Gets or Sets Email
            </summary>
            <example>test@conekta.com</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCustomerInfo.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
            <example>5522997233</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCustomerInfo.Corporate">
            <summary>
            Gets or Sets Corporate
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCustomerInfo.CustomerId">
            <summary>
            Gets or Sets CustomerId
            </summary>
            <example>cus_23874283647</example>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfo.Equals(Conekta.net.Model.OrderResponseCustomerInfo)">
            <summary>
            Returns true if OrderResponseCustomerInfo instances are equal
            </summary>
            <param name="input">Instance of OrderResponseCustomerInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseCustomerInfoAllOf">
            <summary>
            OrderResponseCustomerInfoAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfoAllOf.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseCustomerInfoAllOf" /> class.
            </summary>
            <param name="varObject">varObject.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseCustomerInfoAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>customer_info</example>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfoAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfoAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfoAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfoAllOf.Equals(Conekta.net.Model.OrderResponseCustomerInfoAllOf)">
            <summary>
            Returns true if OrderResponseCustomerInfoAllOf instances are equal
            </summary>
            <param name="input">Instance of OrderResponseCustomerInfoAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfoAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseCustomerInfoAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseDiscountLines">
            <summary>
            OrderResponseDiscountLines
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLines.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseDiscountLines" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLines.#ctor(System.Boolean,System.String,System.Collections.Generic.List{Conekta.net.Model.DiscountLinesDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseDiscountLines" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseDiscountLines.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseDiscountLines.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseDiscountLines.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLines.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLines.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLines.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLines.Equals(Conekta.net.Model.OrderResponseDiscountLines)">
            <summary>
            Returns true if OrderResponseDiscountLines instances are equal
            </summary>
            <param name="input">Instance of OrderResponseDiscountLines to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLines.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLines.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseDiscountLinesAllOf">
            <summary>
            OrderResponseDiscountLinesAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLinesAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.DiscountLinesDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseDiscountLinesAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseDiscountLinesAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLinesAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLinesAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLinesAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLinesAllOf.Equals(Conekta.net.Model.OrderResponseDiscountLinesAllOf)">
            <summary>
            Returns true if OrderResponseDiscountLinesAllOf instances are equal
            </summary>
            <param name="input">Instance of OrderResponseDiscountLinesAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLinesAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseDiscountLinesAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseProducts">
            <summary>
            OrderResponseProducts
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProducts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseProducts" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProducts.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.ProductDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseProducts" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseProducts.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseProducts.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseProducts.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseProducts.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseProducts.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProducts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProducts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProducts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProducts.Equals(Conekta.net.Model.OrderResponseProducts)">
            <summary>
            Returns true if OrderResponseProducts instances are equal
            </summary>
            <param name="input">Instance of OrderResponseProducts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProducts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProducts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseProductsAllOf">
            <summary>
            OrderResponseProductsAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProductsAllOf.#ctor(System.Collections.Generic.List{Conekta.net.Model.ProductDataResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseProductsAllOf" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseProductsAllOf.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProductsAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProductsAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProductsAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProductsAllOf.Equals(Conekta.net.Model.OrderResponseProductsAllOf)">
            <summary>
            Returns true if OrderResponseProductsAllOf instances are equal
            </summary>
            <param name="input">Instance of OrderResponseProductsAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProductsAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseProductsAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseShippingContact">
            <summary>
            OrderResponseShippingContact
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContact.#ctor(System.Int64,System.String,System.String,System.String,System.String,System.String,Conekta.net.Model.CustomerShippingContactsResponseAddress,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseShippingContact" /> class.
            </summary>
            <param name="createdAt">createdAt.</param>
            <param name="id">id.</param>
            <param name="varObject">varObject.</param>
            <param name="phone">phone.</param>
            <param name="receiver">receiver.</param>
            <param name="betweenStreets">betweenStreets.</param>
            <param name="address">address.</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
            <param name="metadata">Metadata associated with the shipping contact.</param>
            <param name="deleted">deleted.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>adr_1234567890</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>shipping_contact</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
            <example>525511223344</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.Receiver">
            <summary>
            Gets or Sets Receiver
            </summary>
            <example>Marvin Fuller</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.BetweenStreets">
            <summary>
            Gets or Sets BetweenStreets
            </summary>
            <example>Ackerman Crescent</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.Metadata">
            <summary>
            Metadata associated with the shipping contact
            </summary>
            <value>Metadata associated with the shipping contact</value>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContact.Deleted">
            <summary>
            Gets or Sets Deleted
            </summary>
            <example>false</example>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContact.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContact.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContact.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContact.Equals(Conekta.net.Model.OrderResponseShippingContact)">
            <summary>
            Returns true if OrderResponseShippingContact instances are equal
            </summary>
            <param name="input">Instance of OrderResponseShippingContact to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContact.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContact.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderResponseShippingContactAllOf">
            <summary>
            OrderResponseShippingContactAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContactAllOf.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderResponseShippingContactAllOf" /> class.
            </summary>
            <param name="createdAt">createdAt.</param>
            <param name="id">id.</param>
            <param name="varObject">varObject.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContactAllOf.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContactAllOf.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderResponseShippingContactAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContactAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContactAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContactAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContactAllOf.Equals(Conekta.net.Model.OrderResponseShippingContactAllOf)">
            <summary>
            Returns true if OrderResponseShippingContactAllOf instances are equal
            </summary>
            <param name="input">Instance of OrderResponseShippingContactAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContactAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderResponseShippingContactAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrdersResponse">
            <summary>
            OrdersResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrdersResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrdersResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrdersResponse.#ctor(System.Collections.Generic.List{Conekta.net.Model.OrderResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrdersResponse" /> class.
            </summary>
            <param name="data">data (required).</param>
        </member>
        <member name="P:Conekta.net.Model.OrdersResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrdersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrdersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrdersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrdersResponse.Equals(Conekta.net.Model.OrdersResponse)">
            <summary>
            Returns true if OrdersResponse instances are equal
            </summary>
            <param name="input">Instance of OrdersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrdersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrdersResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderTaxRequest">
            <summary>
            create new taxes for an existing order
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderTaxRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderTaxRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderTaxRequest.#ctor(System.Int64,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderTaxRequest" /> class.
            </summary>
            <param name="amount">The amount to be collected for tax in cents (required).</param>
            <param name="description">description or tax&#39;s name (required).</param>
            <param name="metadata">metadata.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderTaxRequest.Amount">
            <summary>
            The amount to be collected for tax in cents
            </summary>
            <value>The amount to be collected for tax in cents</value>
            <example>100</example>
        </member>
        <member name="P:Conekta.net.Model.OrderTaxRequest.Description">
            <summary>
            description or tax&#39;s name
            </summary>
            <value>description or tax&#39;s name</value>
            <example>testing</example>
        </member>
        <member name="P:Conekta.net.Model.OrderTaxRequest.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
            <example>{&quot;key&quot;:&quot;value&quot;}</example>
        </member>
        <member name="M:Conekta.net.Model.OrderTaxRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderTaxRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderTaxRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderTaxRequest.Equals(Conekta.net.Model.OrderTaxRequest)">
            <summary>
            Returns true if OrderTaxRequest instances are equal
            </summary>
            <param name="input">Instance of OrderTaxRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderTaxRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderTaxRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderUpdateFiscalEntityRequest">
            <summary>
            Fiscal entity of the order, Currently it is a purely informative field
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateFiscalEntityRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderUpdateFiscalEntityRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateFiscalEntityRequest.#ctor(Conekta.net.Model.FiscalEntityAddress,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderUpdateFiscalEntityRequest" /> class.
            </summary>
            <param name="address">address (required).</param>
            <param name="email">Email of the fiscal entity.</param>
            <param name="name">Name of the fiscal entity.</param>
            <param name="metadata">Metadata associated with the fiscal entity.</param>
            <param name="phone">Phone of the fiscal entity.</param>
            <param name="taxId">Tax ID of the fiscal entity.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateFiscalEntityRequest.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateFiscalEntityRequest.Email">
            <summary>
            Email of the fiscal entity
            </summary>
            <value>Email of the fiscal entity</value>
            <example>test@gmail.com</example>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateFiscalEntityRequest.Name">
            <summary>
            Name of the fiscal entity
            </summary>
            <value>Name of the fiscal entity</value>
            <example>Conekta Inc</example>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateFiscalEntityRequest.Metadata">
            <summary>
            Metadata associated with the fiscal entity
            </summary>
            <value>Metadata associated with the fiscal entity</value>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateFiscalEntityRequest.Phone">
            <summary>
            Phone of the fiscal entity
            </summary>
            <value>Phone of the fiscal entity</value>
            <example>525511223344</example>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateFiscalEntityRequest.TaxId">
            <summary>
            Tax ID of the fiscal entity
            </summary>
            <value>Tax ID of the fiscal entity</value>
            <example>AAA010101AAA</example>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateFiscalEntityRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateFiscalEntityRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateFiscalEntityRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateFiscalEntityRequest.Equals(Conekta.net.Model.OrderUpdateFiscalEntityRequest)">
            <summary>
            Returns true if OrderUpdateFiscalEntityRequest instances are equal
            </summary>
            <param name="input">Instance of OrderUpdateFiscalEntityRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateFiscalEntityRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateFiscalEntityRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderUpdateRequest">
            <summary>
            a order
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequest.#ctor(System.Collections.Generic.List{Conekta.net.Model.ChargeRequest},Conekta.net.Model.CheckoutRequest,System.String,Conekta.net.Model.OrderUpdateRequestCustomerInfo,System.Collections.Generic.List{Conekta.net.Model.OrderDiscountLinesRequest},Conekta.net.Model.OrderUpdateFiscalEntityRequest,System.Collections.Generic.List{Conekta.net.Model.Product},System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,Conekta.net.Model.CustomerShippingContacts,System.Collections.Generic.List{Conekta.net.Model.ShippingRequest},System.Collections.Generic.List{Conekta.net.Model.OrderTaxRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderUpdateRequest" /> class.
            </summary>
            <param name="charges">charges.</param>
            <param name="checkout">checkout.</param>
            <param name="currency">Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217).</param>
            <param name="customerInfo">customerInfo.</param>
            <param name="discountLines">List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount..</param>
            <param name="fiscalEntity">fiscalEntity.</param>
            <param name="lineItems">List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product..</param>
            <param name="metadata">metadata.</param>
            <param name="preAuthorize">Indicates whether the order charges must be preauthorized (default to false).</param>
            <param name="shippingContact">shippingContact.</param>
            <param name="shippingLines">List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products..</param>
            <param name="taxLines">taxLines.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.Charges">
            <summary>
            Gets or Sets Charges
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.Checkout">
            <summary>
            Gets or Sets Checkout
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.Currency">
            <summary>
            Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
            </summary>
            <value>Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.CustomerInfo">
            <summary>
            Gets or Sets CustomerInfo
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.DiscountLines">
            <summary>
            List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount.
            </summary>
            <value>List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount.</value>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.FiscalEntity">
            <summary>
            Gets or Sets FiscalEntity
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.LineItems">
            <summary>
            List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product.
            </summary>
            <value>List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product.</value>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.PreAuthorize">
            <summary>
            Indicates whether the order charges must be preauthorized
            </summary>
            <value>Indicates whether the order charges must be preauthorized</value>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.ShippingContact">
            <summary>
            Gets or Sets ShippingContact
            </summary>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.ShippingLines">
            <summary>
            List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products.
            </summary>
            <value>List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products.</value>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequest.TaxLines">
            <summary>
            Gets or Sets TaxLines
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequest.Equals(Conekta.net.Model.OrderUpdateRequest)">
            <summary>
            Returns true if OrderUpdateRequest instances are equal
            </summary>
            <param name="input">Instance of OrderUpdateRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderUpdateRequestCustomerInfo">
            <summary>
            OrderUpdateRequestCustomerInfo
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.#ctor(Conekta.net.Model.CustomerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderUpdateRequestCustomerInfo" /> class
            with the <see cref="T:Conekta.net.Model.CustomerInfo" /> class
            </summary>
            <param name="actualInstance">An instance of CustomerInfo.</param>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.#ctor(Conekta.net.Model.CustomerInfoJustCustomerId)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.OrderUpdateRequestCustomerInfo" /> class
            with the <see cref="T:Conekta.net.Model.CustomerInfoJustCustomerId" /> class
            </summary>
            <param name="actualInstance">An instance of CustomerInfoJustCustomerId.</param>
        </member>
        <member name="P:Conekta.net.Model.OrderUpdateRequestCustomerInfo.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.GetCustomerInfo">
            <summary>
            Get the actual instance of `CustomerInfo`. If the actual instance is not `CustomerInfo`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of CustomerInfo</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.GetCustomerInfoJustCustomerId">
            <summary>
            Get the actual instance of `CustomerInfoJustCustomerId`. If the actual instance is not `CustomerInfoJustCustomerId`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of CustomerInfoJustCustomerId</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of OrderUpdateRequestCustomerInfo
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of OrderUpdateRequestCustomerInfo</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.Equals(Conekta.net.Model.OrderUpdateRequestCustomerInfo)">
            <summary>
            Returns true if OrderUpdateRequestCustomerInfo instances are equal
            </summary>
            <param name="input">Instance of OrderUpdateRequestCustomerInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.OrderUpdateRequestCustomerInfoJsonConverter">
            <summary>
            Custom JSON converter for OrderUpdateRequestCustomerInfo
            </summary>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfoJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfoJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.OrderUpdateRequestCustomerInfoJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.Page">
            <summary>
            page metadata
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Page.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Page" /> class.
            </summary>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
        </member>
        <member name="P:Conekta.net.Model.Page.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.Page.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="M:Conekta.net.Model.Page.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Page.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Page.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Page.Equals(Conekta.net.Model.Page)">
            <summary>
            Returns true if Page instances are equal
            </summary>
            <param name="input">Instance of Page to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Page.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.Page.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.Pagination">
            <summary>
            pagination metadata
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Pagination.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Pagination" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Pagination.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Pagination" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
        </member>
        <member name="P:Conekta.net.Model.Pagination.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.Pagination.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="M:Conekta.net.Model.Pagination.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Pagination.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Pagination.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Pagination.Equals(Conekta.net.Model.Pagination)">
            <summary>
            Returns true if Pagination instances are equal
            </summary>
            <param name="input">Instance of Pagination to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Pagination.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.Pagination.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethod">
            <summary>
            PaymentMethod
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethod" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethod.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethod" /> class.
            </summary>
            <param name="type">type.</param>
            <param name="varObject">varObject (required).</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethod.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethod.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>payment_source</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethod.Equals(Conekta.net.Model.PaymentMethod)">
            <summary>
            Returns true if PaymentMethod instances are equal
            </summary>
            <param name="input">Instance of PaymentMethod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodBankTransfer">
            <summary>
            PaymentMethodBankTransfer
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodBankTransfer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodBankTransfer" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodBankTransfer.#ctor(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Int64,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Object},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodBankTransfer" /> class.
            </summary>
            <param name="type">type.</param>
            <param name="varObject">varObject (required).</param>
            <param name="bank">bank.</param>
            <param name="clabe">clabe.</param>
            <param name="description">description.</param>
            <param name="executedAt">executedAt.</param>
            <param name="expiresAt">expiresAt.</param>
            <param name="issuingAccountBank">issuingAccountBank.</param>
            <param name="issuingAccountNumber">issuingAccountNumber.</param>
            <param name="issuingAccountHolderName">issuingAccountHolderName.</param>
            <param name="issuingAccountTaxId">issuingAccountTaxId.</param>
            <param name="paymentAttempts">paymentAttempts.</param>
            <param name="receivingAccountHolderName">receivingAccountHolderName.</param>
            <param name="receivingAccountNumber">receivingAccountNumber.</param>
            <param name="receivingAccountBank">receivingAccountBank.</param>
            <param name="receivingAccountTaxId">receivingAccountTaxId.</param>
            <param name="referenceNumber">referenceNumber.</param>
            <param name="trackingCode">trackingCode.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>payment_source</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.Bank">
            <summary>
            Gets or Sets Bank
            </summary>
            <example>STP</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.Clabe">
            <summary>
            Gets or Sets Clabe
            </summary>
            <example>646180111805034237</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.ExecutedAt">
            <summary>
            Gets or Sets ExecutedAt
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>1683053729</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.IssuingAccountBank">
            <summary>
            Gets or Sets IssuingAccountBank
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.IssuingAccountNumber">
            <summary>
            Gets or Sets IssuingAccountNumber
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.IssuingAccountHolderName">
            <summary>
            Gets or Sets IssuingAccountHolderName
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.IssuingAccountTaxId">
            <summary>
            Gets or Sets IssuingAccountTaxId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.PaymentAttempts">
            <summary>
            Gets or Sets PaymentAttempts
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.ReceivingAccountHolderName">
            <summary>
            Gets or Sets ReceivingAccountHolderName
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.ReceivingAccountNumber">
            <summary>
            Gets or Sets ReceivingAccountNumber
            </summary>
            <example>646180111805034237</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.ReceivingAccountBank">
            <summary>
            Gets or Sets ReceivingAccountBank
            </summary>
            <example>STP</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.ReceivingAccountTaxId">
            <summary>
            Gets or Sets ReceivingAccountTaxId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.ReferenceNumber">
            <summary>
            Gets or Sets ReferenceNumber
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodBankTransfer.TrackingCode">
            <summary>
            Gets or Sets TrackingCode
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodBankTransfer.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodBankTransfer.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodBankTransfer.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodBankTransfer.Equals(Conekta.net.Model.PaymentMethodBankTransfer)">
            <summary>
            Returns true if PaymentMethodBankTransfer instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodBankTransfer to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodBankTransfer.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodBankTransfer.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCard">
            <summary>
            PaymentMethodCard
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCard" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCard.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Object},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCard" /> class.
            </summary>
            <param name="type">type.</param>
            <param name="varObject">varObject (required).</param>
            <param name="accountType">accountType.</param>
            <param name="authCode">authCode.</param>
            <param name="brand">brand.</param>
            <param name="contractId">Id sent for recurrent charges..</param>
            <param name="country">country.</param>
            <param name="expMonth">expMonth.</param>
            <param name="expYear">expYear.</param>
            <param name="fraudIndicators">fraudIndicators.</param>
            <param name="issuer">issuer.</param>
            <param name="last4">last4.</param>
            <param name="name">name.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>payment_source</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.AccountType">
            <summary>
            Gets or Sets AccountType
            </summary>
            <example>Credit</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.AuthCode">
            <summary>
            Gets or Sets AuthCode
            </summary>
            <example>867372</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.Brand">
            <summary>
            Gets or Sets Brand
            </summary>
            <example>visa</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.ContractId">
            <summary>
            Id sent for recurrent charges.
            </summary>
            <value>Id sent for recurrent charges.</value>
            <example>S781317595</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.Country">
            <summary>
            Gets or Sets Country
            </summary>
            <example>MX</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.ExpMonth">
            <summary>
            Gets or Sets ExpMonth
            </summary>
            <example>02</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.ExpYear">
            <summary>
            Gets or Sets ExpYear
            </summary>
            <example>30</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.FraudIndicators">
            <summary>
            Gets or Sets FraudIndicators
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.Issuer">
            <summary>
            Gets or Sets Issuer
            </summary>
            <example>BANAMEX</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.Last4">
            <summary>
            Gets or Sets Last4
            </summary>
            <example>4242</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCard.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>Fulanito Perez</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCard.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCard.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCard.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCard.Equals(Conekta.net.Model.PaymentMethodCard)">
            <summary>
            Returns true if PaymentMethodCard instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCard to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCard.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCard.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCardRequest">
            <summary>
            PaymentMethodCardRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCardRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCardRequest" /> class.
            </summary>
            <param name="type">Type of payment method (required).</param>
            <param name="tokenId">Token id that will be used to create a \&quot;card\&quot; type payment method. See the (subscriptions)[https://developers.conekta.com/v2.1.0/reference/createsubscription] tutorial for more information on how to tokenize cards. (required).</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardRequest.Type">
            <summary>
            Type of payment method
            </summary>
            <value>Type of payment method</value>
            <example>card | cash | spei</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardRequest.TokenId">
            <summary>
            Token id that will be used to create a \&quot;card\&quot; type payment method. See the (subscriptions)[https://developers.conekta.com/v2.1.0/reference/createsubscription] tutorial for more information on how to tokenize cards.
            </summary>
            <value>Token id that will be used to create a \&quot;card\&quot; type payment method. See the (subscriptions)[https://developers.conekta.com/v2.1.0/reference/createsubscription] tutorial for more information on how to tokenize cards.</value>
            <example>tok_32hj4g234as</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequest.Equals(Conekta.net.Model.PaymentMethodCardRequest)">
            <summary>
            Returns true if PaymentMethodCardRequest instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCardRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCardRequestAllOf">
            <summary>
            PaymentMethodCardRequestAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequestAllOf.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCardRequestAllOf" /> class.
            </summary>
            <param name="tokenId">Token id that will be used to create a \&quot;card\&quot; type payment method. See the (subscriptions)[https://developers.conekta.com/v2.1.0/reference/createsubscription] tutorial for more information on how to tokenize cards..</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardRequestAllOf.TokenId">
            <summary>
            Token id that will be used to create a \&quot;card\&quot; type payment method. See the (subscriptions)[https://developers.conekta.com/v2.1.0/reference/createsubscription] tutorial for more information on how to tokenize cards.
            </summary>
            <value>Token id that will be used to create a \&quot;card\&quot; type payment method. See the (subscriptions)[https://developers.conekta.com/v2.1.0/reference/createsubscription] tutorial for more information on how to tokenize cards.</value>
            <example>tok_32hj4g234as</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequestAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequestAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequestAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequestAllOf.Equals(Conekta.net.Model.PaymentMethodCardRequestAllOf)">
            <summary>
            Returns true if PaymentMethodCardRequestAllOf instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCardRequestAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequestAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardRequestAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCardResponse">
            <summary>
            PaymentMethodCardResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCardResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponse.#ctor(System.String,System.String,System.String,System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCardResponse" /> class.
            </summary>
            <param name="type">type (required).</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="parentId">parentId.</param>
            <param name="last4">last4.</param>
            <param name="bin">bin.</param>
            <param name="cardType">cardType.</param>
            <param name="expMonth">expMonth.</param>
            <param name="expYear">expYear.</param>
            <param name="brand">brand.</param>
            <param name="name">name.</param>
            <param name="varDefault">varDefault.</param>
            <param name="visibleOnCheckout">visibleOnCheckout.</param>
            <param name="paymentSourceStatus">paymentSourceStatus.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>src_2s8K1B3PBKDontpi9</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>payment_source</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>cus_2s8K1B3PBKDontpi8</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.Last4">
            <summary>
            Gets or Sets Last4
            </summary>
            <example>6410</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.Bin">
            <summary>
            Gets or Sets Bin
            </summary>
            <example>40276657</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.CardType">
            <summary>
            Gets or Sets CardType
            </summary>
            <example>debit</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.ExpMonth">
            <summary>
            Gets or Sets ExpMonth
            </summary>
            <example>10</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.ExpYear">
            <summary>
            Gets or Sets ExpYear
            </summary>
            <example>25</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.Brand">
            <summary>
            Gets or Sets Brand
            </summary>
            <example>visa</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>Fulano Perez&quot;</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.VisibleOnCheckout">
            <summary>
            Gets or Sets VisibleOnCheckout
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponse.PaymentSourceStatus">
            <summary>
            Gets or Sets PaymentSourceStatus
            </summary>
            <example>active</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponse.Equals(Conekta.net.Model.PaymentMethodCardResponse)">
            <summary>
            Returns true if PaymentMethodCardResponse instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCardResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCardResponseAllOf">
            <summary>
            use for card responses
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponseAllOf.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCardResponseAllOf" /> class.
            </summary>
            <param name="last4">last4.</param>
            <param name="bin">bin.</param>
            <param name="cardType">cardType.</param>
            <param name="expMonth">expMonth.</param>
            <param name="expYear">expYear.</param>
            <param name="brand">brand.</param>
            <param name="name">name.</param>
            <param name="varDefault">varDefault.</param>
            <param name="visibleOnCheckout">visibleOnCheckout.</param>
            <param name="paymentSourceStatus">paymentSourceStatus.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.Last4">
            <summary>
            Gets or Sets Last4
            </summary>
            <example>6410</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.Bin">
            <summary>
            Gets or Sets Bin
            </summary>
            <example>40276657</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.CardType">
            <summary>
            Gets or Sets CardType
            </summary>
            <example>debit</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.ExpMonth">
            <summary>
            Gets or Sets ExpMonth
            </summary>
            <example>10</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.ExpYear">
            <summary>
            Gets or Sets ExpYear
            </summary>
            <example>25</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.Brand">
            <summary>
            Gets or Sets Brand
            </summary>
            <example>visa</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>Fulano Perez&quot;</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.VisibleOnCheckout">
            <summary>
            Gets or Sets VisibleOnCheckout
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCardResponseAllOf.PaymentSourceStatus">
            <summary>
            Gets or Sets PaymentSourceStatus
            </summary>
            <example>active</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponseAllOf.Equals(Conekta.net.Model.PaymentMethodCardResponseAllOf)">
            <summary>
            Returns true if PaymentMethodCardResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCardResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCardResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCash">
            <summary>
            PaymentMethodCash
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCash" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCash.#ctor(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCash" /> class.
            </summary>
            <param name="type">type.</param>
            <param name="varObject">varObject (required).</param>
            <param name="authCode">authCode.</param>
            <param name="cashierId">cashierId.</param>
            <param name="reference">reference.</param>
            <param name="barcodeUrl">barcodeUrl.</param>
            <param name="expiresAt">expiresAt.</param>
            <param name="serviceName">serviceName.</param>
            <param name="store">store.</param>
            <param name="storeName">storeName.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>payment_source</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.AuthCode">
            <summary>
            Gets or Sets AuthCode
            </summary>
            <example>542563</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.CashierId">
            <summary>
            Gets or Sets CashierId
            </summary>
            <example>OINM01010</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.Reference">
            <summary>
            Gets or Sets Reference
            </summary>
            <example>93000262276908</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.BarcodeUrl">
            <summary>
            Gets or Sets BarcodeUrl
            </summary>
            <example>https://pt-common-s3-stg.s3.amazonaws.com/644ebf80f2243197aad6cd8810375b905b613dbe.png?X-Amz-Algorithm&#x3D;AWS4-HMAC-SHA256&amp;X-Amz-Credential&#x3D;ASIA3UN6375MP4SLLCWV%2F20230203%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date&#x3D;20230203T215750Z&amp;X-Amz-Expires&#x3D;604800&amp;X-Amz-Security-Token&#x3D;IQoJb3JpZ2luX2VjEH4aCXVzLWVhc3QtMSJGMEQCICd79cu7DYu%2F4%2B3HnVVswydgU9yHcE9kmQIIk2TLoZJrAiBVZ0HxVSeboK5lhdQSqADjwQF62XX35jhC%2F2riB0M8uCqQBAj2%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDc5OTgwMTA4MTY4OCIMXWZds9ZI5hzUdbeGKuQDFreMyeWnWWPqDuGZ2%2BHk6usCr%2Fl096%2FNJh9xtf8htLu56K%2FhWUTx%2BjiqFWM2O%2FF5zTS%2BIV6TqkLDZ%2BQ5Jo1miQrRmR57YDz6uP2Yd1mNZ1ouq5ipnNjUuu5UWCCBAmqyZQsrVmeMQpSV2IB%2BTERCCcW2SukFEYU%2F20%2Fzy5orsoZ8DxOW460IymR3cWBk5u3Xh2cV6Y1RdPEwDEThhqYEF5w%2ByKbLENloMsI%2FUm6sG5PPrO3yQOAP9aK2muLJs9lXQRU%2FL%2FSsmS4FKSUFOqlN6YU%2Bi2Y%2FyGIKAJT2VDkngvz5Sl%2Fadj0j%2BPKftVRV5FcEhySB6Rl%2BSkPN7kVQMJp6pS8hMJ6JCyEA%2BA3eWYdIfKgQhWVXAR4oCBfJ62DH8FU3a7WfSjjpTwfVkiReWen3GGCYfUWETTVKp46MKnJ9PG0CD3KzxKV8VfmEGc5krK%2FI%2F%2BDV2wtSa%2F9qf1%2BK1YYJIK9qZGb25ljUiGhTB4T%2BMUOSQFjetiWUoOJc5Q3Jz%2FXJbiTAMTST39MhdbCgiMgfrc8OGKN5DOVbex33Z7dn0xf%2FOCkSqurhLaG08efKQBdhLNS0RlE9hbg9yZ2ywwtQIF39fI6A7eeH0T11a5HMlvm51u4rAffPHRuEJfwJoIuj%2F2s3QzDg7%2FWeBjqmAbnPOlGfysjrDdvHyG7HVnaX02kdG%2BI3Q4PFOO4Mjaa3ocpjcfPT70%2BZ5a%2FSv5vP0jDLGrLToeM9%2BAUlNepptICRu23a1tLGW4ri0twPA%2FZ4JDTtUUUgdblyG8bKpcUTNp4oOsdmLLBz3FVyr4c2xQbDZSu2zYOtoOxB18W0AC6kIbsMWVU55Bf0mBhPeBWxGrtM4Kw1SgHHlt%2F8vetQi2OwtUcg08c%3D&amp;X-Amz-SignedHeaders&#x3D;host&amp;X-Amz-Signature&#x3D;d06dfa41550003359f2aabc8006063a80dfd806a13a54d244024946a76aa9abc</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.ServiceName">
            <summary>
            Gets or Sets ServiceName
            </summary>
            <example>OxxoPay</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.Store">
            <summary>
            Gets or Sets Store
            </summary>
            <example>10MON50EDI</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCash.StoreName">
            <summary>
            Gets or Sets StoreName
            </summary>
            <example>OXXO</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCash.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCash.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCash.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCash.Equals(Conekta.net.Model.PaymentMethodCash)">
            <summary>
            Returns true if PaymentMethodCash instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCash to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCash.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCash.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCashRequest">
            <summary>
            PaymentMethodCashRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCashRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequest.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCashRequest" /> class.
            </summary>
            <param name="type">Type of payment method (required).</param>
            <param name="expiresAt">expiresAt.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashRequest.Type">
            <summary>
            Type of payment method
            </summary>
            <value>Type of payment method</value>
            <example>card | cash | spei</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashRequest.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>1553273553</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequest.Equals(Conekta.net.Model.PaymentMethodCashRequest)">
            <summary>
            Returns true if PaymentMethodCashRequest instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCashRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCashRequestAllOf">
            <summary>
            PaymentMethodCashRequestAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequestAllOf.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCashRequestAllOf" /> class.
            </summary>
            <param name="expiresAt">expiresAt.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashRequestAllOf.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>1553273553</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequestAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequestAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequestAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequestAllOf.Equals(Conekta.net.Model.PaymentMethodCashRequestAllOf)">
            <summary>
            Returns true if PaymentMethodCashRequestAllOf instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCashRequestAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequestAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashRequestAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCashResponse">
            <summary>
            PaymentMethodCashResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCashResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponse.#ctor(System.String,System.String,System.String,System.Int64,System.String,System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCashResponse" /> class.
            </summary>
            <param name="type">type (required).</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="parentId">parentId.</param>
            <param name="reference">reference.</param>
            <param name="barcode">barcode.</param>
            <param name="barcodeUrl">barcodeUrl.</param>
            <param name="expiresAt">expiresAt.</param>
            <param name="provider">provider.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>src_2s8K1B3PBKDontpi9</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>payment_source</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>cus_2s8K1B3PBKDontpi8</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.Reference">
            <summary>
            Gets or Sets Reference
            </summary>
            <example>93000262276908</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.Barcode">
            <summary>
            Gets or Sets Barcode
            </summary>
            <example>93000262276908</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.BarcodeUrl">
            <summary>
            Gets or Sets BarcodeUrl
            </summary>
            <example>https://pt-common-s3-stg.s3.amazonaws.com/644ebf80f2243197aad6cd8810375b905b613dbe.png?X-Amz-Algorithm&#x3D;AWS4-HMAC-SHA256&amp;X-Amz-Credential&#x3D;ASIA3UN6375MP4SLLCWV%2F20230203%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date&#x3D;20230203T215750Z&amp;X-Amz-Expires&#x3D;604800&amp;X-Amz-Security-Token&#x3D;IQoJb3JpZ2luX2VjEH4aCXVzLWVhc3QtMSJGMEQCICd79cu7DYu%2F4%2B3HnVVswydgU9yHcE9kmQIIk2TLoZJrAiBVZ0HxVSeboK5lhdQSqADjwQF62XX35jhC%2F2riB0M8uCqQBAj2%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDc5OTgwMTA4MTY4OCIMXWZds9ZI5hzUdbeGKuQDFreMyeWnWWPqDuGZ2%2BHk6usCr%2Fl096%2FNJh9xtf8htLu56K%2FhWUTx%2BjiqFWM2O%2FF5zTS%2BIV6TqkLDZ%2BQ5Jo1miQrRmR57YDz6uP2Yd1mNZ1ouq5ipnNjUuu5UWCCBAmqyZQsrVmeMQpSV2IB%2BTERCCcW2SukFEYU%2F20%2Fzy5orsoZ8DxOW460IymR3cWBk5u3Xh2cV6Y1RdPEwDEThhqYEF5w%2ByKbLENloMsI%2FUm6sG5PPrO3yQOAP9aK2muLJs9lXQRU%2FL%2FSsmS4FKSUFOqlN6YU%2Bi2Y%2FyGIKAJT2VDkngvz5Sl%2Fadj0j%2BPKftVRV5FcEhySB6Rl%2BSkPN7kVQMJp6pS8hMJ6JCyEA%2BA3eWYdIfKgQhWVXAR4oCBfJ62DH8FU3a7WfSjjpTwfVkiReWen3GGCYfUWETTVKp46MKnJ9PG0CD3KzxKV8VfmEGc5krK%2FI%2F%2BDV2wtSa%2F9qf1%2BK1YYJIK9qZGb25ljUiGhTB4T%2BMUOSQFjetiWUoOJc5Q3Jz%2FXJbiTAMTST39MhdbCgiMgfrc8OGKN5DOVbex33Z7dn0xf%2FOCkSqurhLaG08efKQBdhLNS0RlE9hbg9yZ2ywwtQIF39fI6A7eeH0T11a5HMlvm51u4rAffPHRuEJfwJoIuj%2F2s3QzDg7%2FWeBjqmAbnPOlGfysjrDdvHyG7HVnaX02kdG%2BI3Q4PFOO4Mjaa3ocpjcfPT70%2BZ5a%2FSv5vP0jDLGrLToeM9%2BAUlNepptICRu23a1tLGW4ri0twPA%2FZ4JDTtUUUgdblyG8bKpcUTNp4oOsdmLLBz3FVyr4c2xQbDZSu2zYOtoOxB18W0AC6kIbsMWVU55Bf0mBhPeBWxGrtM4Kw1SgHHlt%2F8vetQi2OwtUcg08c%3D&amp;X-Amz-SignedHeaders&#x3D;host&amp;X-Amz-Signature&#x3D;d06dfa41550003359f2aabc8006063a80dfd806a13a54d244024946a76aa9abc</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponse.Provider">
            <summary>
            Gets or Sets Provider
            </summary>
            <example>Oxxo</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponse.Equals(Conekta.net.Model.PaymentMethodCashResponse)">
            <summary>
            Returns true if PaymentMethodCashResponse instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCashResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodCashResponseAllOf">
            <summary>
            use for cash responses
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponseAllOf.#ctor(System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodCashResponseAllOf" /> class.
            </summary>
            <param name="reference">reference.</param>
            <param name="barcode">barcode.</param>
            <param name="barcodeUrl">barcodeUrl.</param>
            <param name="expiresAt">expiresAt.</param>
            <param name="provider">provider.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponseAllOf.Reference">
            <summary>
            Gets or Sets Reference
            </summary>
            <example>93000262276908</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponseAllOf.Barcode">
            <summary>
            Gets or Sets Barcode
            </summary>
            <example>93000262276908</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponseAllOf.BarcodeUrl">
            <summary>
            Gets or Sets BarcodeUrl
            </summary>
            <example>https://pt-common-s3-stg.s3.amazonaws.com/644ebf80f2243197aad6cd8810375b905b613dbe.png?X-Amz-Algorithm&#x3D;AWS4-HMAC-SHA256&amp;X-Amz-Credential&#x3D;ASIA3UN6375MP4SLLCWV%2F20230203%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date&#x3D;20230203T215750Z&amp;X-Amz-Expires&#x3D;604800&amp;X-Amz-Security-Token&#x3D;IQoJb3JpZ2luX2VjEH4aCXVzLWVhc3QtMSJGMEQCICd79cu7DYu%2F4%2B3HnVVswydgU9yHcE9kmQIIk2TLoZJrAiBVZ0HxVSeboK5lhdQSqADjwQF62XX35jhC%2F2riB0M8uCqQBAj2%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDc5OTgwMTA4MTY4OCIMXWZds9ZI5hzUdbeGKuQDFreMyeWnWWPqDuGZ2%2BHk6usCr%2Fl096%2FNJh9xtf8htLu56K%2FhWUTx%2BjiqFWM2O%2FF5zTS%2BIV6TqkLDZ%2BQ5Jo1miQrRmR57YDz6uP2Yd1mNZ1ouq5ipnNjUuu5UWCCBAmqyZQsrVmeMQpSV2IB%2BTERCCcW2SukFEYU%2F20%2Fzy5orsoZ8DxOW460IymR3cWBk5u3Xh2cV6Y1RdPEwDEThhqYEF5w%2ByKbLENloMsI%2FUm6sG5PPrO3yQOAP9aK2muLJs9lXQRU%2FL%2FSsmS4FKSUFOqlN6YU%2Bi2Y%2FyGIKAJT2VDkngvz5Sl%2Fadj0j%2BPKftVRV5FcEhySB6Rl%2BSkPN7kVQMJp6pS8hMJ6JCyEA%2BA3eWYdIfKgQhWVXAR4oCBfJ62DH8FU3a7WfSjjpTwfVkiReWen3GGCYfUWETTVKp46MKnJ9PG0CD3KzxKV8VfmEGc5krK%2FI%2F%2BDV2wtSa%2F9qf1%2BK1YYJIK9qZGb25ljUiGhTB4T%2BMUOSQFjetiWUoOJc5Q3Jz%2FXJbiTAMTST39MhdbCgiMgfrc8OGKN5DOVbex33Z7dn0xf%2FOCkSqurhLaG08efKQBdhLNS0RlE9hbg9yZ2ywwtQIF39fI6A7eeH0T11a5HMlvm51u4rAffPHRuEJfwJoIuj%2F2s3QzDg7%2FWeBjqmAbnPOlGfysjrDdvHyG7HVnaX02kdG%2BI3Q4PFOO4Mjaa3ocpjcfPT70%2BZ5a%2FSv5vP0jDLGrLToeM9%2BAUlNepptICRu23a1tLGW4ri0twPA%2FZ4JDTtUUUgdblyG8bKpcUTNp4oOsdmLLBz3FVyr4c2xQbDZSu2zYOtoOxB18W0AC6kIbsMWVU55Bf0mBhPeBWxGrtM4Kw1SgHHlt%2F8vetQi2OwtUcg08c%3D&amp;X-Amz-SignedHeaders&#x3D;host&amp;X-Amz-Signature&#x3D;d06dfa41550003359f2aabc8006063a80dfd806a13a54d244024946a76aa9abc</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponseAllOf.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodCashResponseAllOf.Provider">
            <summary>
            Gets or Sets Provider
            </summary>
            <example>Oxxo</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponseAllOf.Equals(Conekta.net.Model.PaymentMethodCashResponseAllOf)">
            <summary>
            Returns true if PaymentMethodCashResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodCashResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodCashResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodResponse">
            <summary>
            PaymentMethodResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodResponse.#ctor(System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodResponse" /> class.
            </summary>
            <param name="type">type (required).</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="parentId">parentId.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodResponse.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>src_2s8K1B3PBKDontpi9</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>payment_source</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>cus_2s8K1B3PBKDontpi8</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodResponse.Equals(Conekta.net.Model.PaymentMethodResponse)">
            <summary>
            Returns true if PaymentMethodResponse instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodSpeiRecurrent">
            <summary>
            PaymentMethodSpeiRecurrent
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRecurrent" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrent.#ctor(System.String,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRecurrent" /> class.
            </summary>
            <param name="type">type (required).</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="parentId">parentId.</param>
            <param name="reference">reference.</param>
            <param name="expiresAt">expiresAt.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRecurrent.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRecurrent.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>src_2s8K1B3PBKDontpi9</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRecurrent.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>payment_source</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRecurrent.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRecurrent.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>cus_2s8K1B3PBKDontpi8</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRecurrent.Reference">
            <summary>
            Gets or Sets Reference
            </summary>
            <example>93000262276908</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRecurrent.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>none</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrent.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrent.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrent.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrent.Equals(Conekta.net.Model.PaymentMethodSpeiRecurrent)">
            <summary>
            Returns true if PaymentMethodSpeiRecurrent instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodSpeiRecurrent to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrent.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrent.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf">
            <summary>
            use for spei responses
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf" /> class.
            </summary>
            <param name="reference">reference.</param>
            <param name="expiresAt">expiresAt.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf.Reference">
            <summary>
            Gets or Sets Reference
            </summary>
            <example>93000262276908</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>none</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf.Equals(Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf)">
            <summary>
            Returns true if PaymentMethodSpeiRecurrentAllOf instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodSpeiRecurrentAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRecurrentAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PaymentMethodSpeiRequest">
            <summary>
            PaymentMethodSpeiRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRequest.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRequest" /> class.
            </summary>
            <param name="type">Type of payment method (required).</param>
            <param name="expiresAt">expiresAt.</param>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRequest.Type">
            <summary>
            Type of payment method
            </summary>
            <value>Type of payment method</value>
            <example>card | cash | spei</example>
        </member>
        <member name="P:Conekta.net.Model.PaymentMethodSpeiRequest.ExpiresAt">
            <summary>
            Gets or Sets ExpiresAt
            </summary>
            <example>1553273553</example>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRequest.Equals(Conekta.net.Model.PaymentMethodSpeiRequest)">
            <summary>
            Returns true if PaymentMethodSpeiRequest instances are equal
            </summary>
            <param name="input">Instance of PaymentMethodSpeiRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PaymentMethodSpeiRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PlanRequest">
            <summary>
            a plan
            </summary>
        </member>
        <member name="T:Conekta.net.Model.PlanRequest.IntervalEnum">
            <summary>
            The interval of time between each charge.
            </summary>
            <value>The interval of time between each charge.</value>
        </member>
        <member name="F:Conekta.net.Model.PlanRequest.IntervalEnum.Week">
            <summary>
            Enum Week for value: week
            </summary>
        </member>
        <member name="F:Conekta.net.Model.PlanRequest.IntervalEnum.HalfMonth">
            <summary>
            Enum HalfMonth for value: half_month
            </summary>
        </member>
        <member name="F:Conekta.net.Model.PlanRequest.IntervalEnum.Month">
            <summary>
            Enum Month for value: month
            </summary>
        </member>
        <member name="F:Conekta.net.Model.PlanRequest.IntervalEnum.Year">
            <summary>
            Enum Year for value: year
            </summary>
        </member>
        <member name="P:Conekta.net.Model.PlanRequest.Interval">
            <summary>
            The interval of time between each charge.
            </summary>
            <value>The interval of time between each charge.</value>
        </member>
        <member name="M:Conekta.net.Model.PlanRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PlanRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PlanRequest.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.String,Conekta.net.Model.PlanRequest.IntervalEnum,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PlanRequest" /> class.
            </summary>
            <param name="amount">The amount in cents that will be charged on the interval specified. (required).</param>
            <param name="currency">ISO 4217 for currencies, for the Mexican peso it is MXN/USD.</param>
            <param name="expiryCount">Number of repetitions of the frequency NUMBER OF CHARGES TO BE MADE, considering the interval and frequency, this evolves over time, but is subject to the expiration count..</param>
            <param name="frequency">Frequency of the charge, which together with the interval, can be every 3 weeks, every 4 months, every 2 years, every 5 fortnights (required).</param>
            <param name="id">internal reference id.</param>
            <param name="interval">The interval of time between each charge. (required).</param>
            <param name="name">The name of the plan. (required).</param>
            <param name="trialPeriodDays">The number of days the customer will have a free trial..</param>
        </member>
        <member name="P:Conekta.net.Model.PlanRequest.Amount">
            <summary>
            The amount in cents that will be charged on the interval specified.
            </summary>
            <value>The amount in cents that will be charged on the interval specified.</value>
            <example>10000</example>
        </member>
        <member name="P:Conekta.net.Model.PlanRequest.Currency">
            <summary>
            ISO 4217 for currencies, for the Mexican peso it is MXN/USD
            </summary>
            <value>ISO 4217 for currencies, for the Mexican peso it is MXN/USD</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.PlanRequest.ExpiryCount">
            <summary>
            Number of repetitions of the frequency NUMBER OF CHARGES TO BE MADE, considering the interval and frequency, this evolves over time, but is subject to the expiration count.
            </summary>
            <value>Number of repetitions of the frequency NUMBER OF CHARGES TO BE MADE, considering the interval and frequency, this evolves over time, but is subject to the expiration count.</value>
            <example>12</example>
        </member>
        <member name="P:Conekta.net.Model.PlanRequest.Frequency">
            <summary>
            Frequency of the charge, which together with the interval, can be every 3 weeks, every 4 months, every 2 years, every 5 fortnights
            </summary>
            <value>Frequency of the charge, which together with the interval, can be every 3 weeks, every 4 months, every 2 years, every 5 fortnights</value>
            <example>1</example>
        </member>
        <member name="P:Conekta.net.Model.PlanRequest.Id">
            <summary>
            internal reference id
            </summary>
            <value>internal reference id</value>
            <example>plan_24234</example>
        </member>
        <member name="P:Conekta.net.Model.PlanRequest.Name">
            <summary>
            The name of the plan.
            </summary>
            <value>The name of the plan.</value>
            <example>Extra Plan3</example>
        </member>
        <member name="P:Conekta.net.Model.PlanRequest.TrialPeriodDays">
            <summary>
            The number of days the customer will have a free trial.
            </summary>
            <value>The number of days the customer will have a free trial.</value>
            <example>0</example>
        </member>
        <member name="M:Conekta.net.Model.PlanRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanRequest.Equals(Conekta.net.Model.PlanRequest)">
            <summary>
            Returns true if PlanRequest instances are equal
            </summary>
            <param name="input">Instance of PlanRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PlanResponse">
            <summary>
            plans model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PlanResponse.#ctor(System.Int32,System.Int64,System.String,System.Nullable{System.Int32},System.Int32,System.String,System.String,System.Boolean,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PlanResponse" /> class.
            </summary>
            <param name="amount">amount.</param>
            <param name="createdAt">createdAt.</param>
            <param name="currency">currency.</param>
            <param name="expiryCount">expiryCount.</param>
            <param name="frequency">frequency.</param>
            <param name="id">id.</param>
            <param name="interval">interval.</param>
            <param name="livemode">livemode.</param>
            <param name="name">name.</param>
            <param name="varObject">varObject.</param>
            <param name="trialPeriodDays">trialPeriodDays.</param>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
            <example>10000</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1666900846</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.Currency">
            <summary>
            Gets or Sets Currency
            </summary>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.ExpiryCount">
            <summary>
            Gets or Sets ExpiryCount
            </summary>
            <example>12</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.Frequency">
            <summary>
            Gets or Sets Frequency
            </summary>
            <example>1</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>gold-plan</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.Interval">
            <summary>
            Gets or Sets Interval
            </summary>
            <example>month</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>Extra Plan3</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>plan</example>
        </member>
        <member name="P:Conekta.net.Model.PlanResponse.TrialPeriodDays">
            <summary>
            Gets or Sets TrialPeriodDays
            </summary>
            <example>0</example>
        </member>
        <member name="M:Conekta.net.Model.PlanResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanResponse.Equals(Conekta.net.Model.PlanResponse)">
            <summary>
            Returns true if PlanResponse instances are equal
            </summary>
            <param name="input">Instance of PlanResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.PlanUpdateRequest">
            <summary>
            a plan
            </summary>
        </member>
        <member name="M:Conekta.net.Model.PlanUpdateRequest.#ctor(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.PlanUpdateRequest" /> class.
            </summary>
            <param name="amount">The amount in cents that will be charged on the interval specified..</param>
            <param name="currency">ISO 4217 for currencies, for the Mexican peso it is MXN/USD.</param>
            <param name="expiryCount">Number of repetitions of the frequency NUMBER OF CHARGES TO BE MADE, considering the interval and frequency, this evolves over time, but is subject to the expiration count..</param>
            <param name="name">The name of the plan..</param>
        </member>
        <member name="P:Conekta.net.Model.PlanUpdateRequest.Amount">
            <summary>
            The amount in cents that will be charged on the interval specified.
            </summary>
            <value>The amount in cents that will be charged on the interval specified.</value>
            <example>10000</example>
        </member>
        <member name="P:Conekta.net.Model.PlanUpdateRequest.Currency">
            <summary>
            ISO 4217 for currencies, for the Mexican peso it is MXN/USD
            </summary>
            <value>ISO 4217 for currencies, for the Mexican peso it is MXN/USD</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.PlanUpdateRequest.ExpiryCount">
            <summary>
            Number of repetitions of the frequency NUMBER OF CHARGES TO BE MADE, considering the interval and frequency, this evolves over time, but is subject to the expiration count.
            </summary>
            <value>Number of repetitions of the frequency NUMBER OF CHARGES TO BE MADE, considering the interval and frequency, this evolves over time, but is subject to the expiration count.</value>
            <example>12</example>
        </member>
        <member name="P:Conekta.net.Model.PlanUpdateRequest.Name">
            <summary>
            The name of the plan.
            </summary>
            <value>The name of the plan.</value>
            <example>Extra Plan3</example>
        </member>
        <member name="M:Conekta.net.Model.PlanUpdateRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanUpdateRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanUpdateRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanUpdateRequest.Equals(Conekta.net.Model.PlanUpdateRequest)">
            <summary>
            Returns true if PlanUpdateRequest instances are equal
            </summary>
            <param name="input">Instance of PlanUpdateRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanUpdateRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.PlanUpdateRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.Product">
            <summary>
            Product
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Product.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Product" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Product.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Product" /> class.
            </summary>
            <param name="antifraudInfo">antifraudInfo.</param>
            <param name="brand">The brand of the item..</param>
            <param name="description">Short description of the item.</param>
            <param name="metadata">It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters..</param>
            <param name="name">The name of the item. It will be displayed in the order. (required).</param>
            <param name="quantity">The quantity of the item in the order. (required).</param>
            <param name="sku">The stock keeping unit for the item. It is used to identify the item in the order..</param>
            <param name="tags">List of tags for the item. It is used to identify the item in the order..</param>
            <param name="unitPrice">The price of the item in cents. (required).</param>
        </member>
        <member name="P:Conekta.net.Model.Product.AntifraudInfo">
            <summary>
            Gets or Sets AntifraudInfo
            </summary>
            <example>{&quot;key&quot;:&quot;value&quot;}</example>
        </member>
        <member name="P:Conekta.net.Model.Product.Brand">
            <summary>
            The brand of the item.
            </summary>
            <value>The brand of the item.</value>
            <example>Cohiba</example>
        </member>
        <member name="P:Conekta.net.Model.Product.Description">
            <summary>
            Short description of the item
            </summary>
            <value>Short description of the item</value>
            <example>Imported From Mex.</example>
        </member>
        <member name="P:Conekta.net.Model.Product.Metadata">
            <summary>
            It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters.
            </summary>
            <value>It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters.</value>
            <example>{&quot;key&quot;:&quot;value&quot;}</example>
        </member>
        <member name="P:Conekta.net.Model.Product.Name">
            <summary>
            The name of the item. It will be displayed in the order.
            </summary>
            <value>The name of the item. It will be displayed in the order.</value>
            <example>Box of Cohiba S1s</example>
        </member>
        <member name="P:Conekta.net.Model.Product.Quantity">
            <summary>
            The quantity of the item in the order.
            </summary>
            <value>The quantity of the item in the order.</value>
            <example>1</example>
        </member>
        <member name="P:Conekta.net.Model.Product.Sku">
            <summary>
            The stock keeping unit for the item. It is used to identify the item in the order.
            </summary>
            <value>The stock keeping unit for the item. It is used to identify the item in the order.</value>
            <example>XYZ12345</example>
        </member>
        <member name="P:Conekta.net.Model.Product.Tags">
            <summary>
            List of tags for the item. It is used to identify the item in the order.
            </summary>
            <value>List of tags for the item. It is used to identify the item in the order.</value>
            <example>[&quot;food&quot;,&quot;mexican food&quot;]</example>
        </member>
        <member name="P:Conekta.net.Model.Product.UnitPrice">
            <summary>
            The price of the item in cents.
            </summary>
            <value>The price of the item in cents.</value>
            <example>20000</example>
        </member>
        <member name="M:Conekta.net.Model.Product.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Product.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Product.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Product.Equals(Conekta.net.Model.Product)">
            <summary>
            Returns true if Product instances are equal
            </summary>
            <param name="input">Instance of Product to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Product.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.Product.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ProductDataResponse">
            <summary>
            ProductDataResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ProductDataResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.String,System.Collections.Generic.List{System.String},System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ProductDataResponse" /> class.
            </summary>
            <param name="antifraudInfo">antifraudInfo.</param>
            <param name="brand">The brand of the item..</param>
            <param name="description">Short description of the item.</param>
            <param name="metadata">It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters..</param>
            <param name="name">The name of the item. It will be displayed in the order. (required).</param>
            <param name="quantity">The quantity of the item in the order. (required).</param>
            <param name="sku">The stock keeping unit for the item. It is used to identify the item in the order..</param>
            <param name="tags">List of tags for the item. It is used to identify the item in the order..</param>
            <param name="unitPrice">The price of the item in cents. (required).</param>
            <param name="id">id.</param>
            <param name="varObject">varObject.</param>
            <param name="parentId">parentId.</param>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.AntifraudInfo">
            <summary>
            Gets or Sets AntifraudInfo
            </summary>
            <example>{key&#x3D;value}</example>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.Brand">
            <summary>
            The brand of the item.
            </summary>
            <value>The brand of the item.</value>
            <example>Cohiba</example>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.Description">
            <summary>
            Short description of the item
            </summary>
            <value>Short description of the item</value>
            <example>Imported From Mex.</example>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.Metadata">
            <summary>
            It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters.
            </summary>
            <value>It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters.</value>
            <example>{key&#x3D;value}</example>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.Name">
            <summary>
            The name of the item. It will be displayed in the order.
            </summary>
            <value>The name of the item. It will be displayed in the order.</value>
            <example>Box of Cohiba S1s</example>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.Quantity">
            <summary>
            The quantity of the item in the order.
            </summary>
            <value>The quantity of the item in the order.</value>
            <example>1</example>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.Sku">
            <summary>
            The stock keeping unit for the item. It is used to identify the item in the order.
            </summary>
            <value>The stock keeping unit for the item. It is used to identify the item in the order.</value>
            <example>XYZ12345</example>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.Tags">
            <summary>
            List of tags for the item. It is used to identify the item in the order.
            </summary>
            <value>List of tags for the item. It is used to identify the item in the order.</value>
            <example>[food, mexican food]</example>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.UnitPrice">
            <summary>
            The price of the item in cents.
            </summary>
            <value>The price of the item in cents.</value>
            <example>20000</example>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponse.Equals(Conekta.net.Model.ProductDataResponse)">
            <summary>
            Returns true if ProductDataResponse instances are equal
            </summary>
            <param name="input">Instance of ProductDataResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ProductDataResponseAllOf">
            <summary>
            ProductDataResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponseAllOf.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ProductDataResponseAllOf" /> class.
            </summary>
            <param name="id">id.</param>
            <param name="varObject">varObject.</param>
            <param name="parentId">parentId.</param>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponseAllOf.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponseAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ProductDataResponseAllOf.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponseAllOf.Equals(Conekta.net.Model.ProductDataResponseAllOf)">
            <summary>
            Returns true if ProductDataResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of ProductDataResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductDataResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ProductOrderResponse">
            <summary>
            ProductOrderResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ProductOrderResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.String,System.Collections.Generic.List{System.String},System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ProductOrderResponse" /> class.
            </summary>
            <param name="antifraudInfo">antifraudInfo.</param>
            <param name="brand">The brand of the item..</param>
            <param name="description">Short description of the item.</param>
            <param name="metadata">It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters..</param>
            <param name="name">The name of the item. It will be displayed in the order. (required).</param>
            <param name="quantity">The quantity of the item in the order. (required).</param>
            <param name="sku">The stock keeping unit for the item. It is used to identify the item in the order..</param>
            <param name="tags">List of tags for the item. It is used to identify the item in the order..</param>
            <param name="unitPrice">The price of the item in cents. (required).</param>
            <param name="id">id.</param>
            <param name="varObject">varObject.</param>
            <param name="parentId">parentId.</param>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.AntifraudInfo">
            <summary>
            Gets or Sets AntifraudInfo
            </summary>
            <example>{key&#x3D;value}</example>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.Brand">
            <summary>
            The brand of the item.
            </summary>
            <value>The brand of the item.</value>
            <example>Cohiba</example>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.Description">
            <summary>
            Short description of the item
            </summary>
            <value>Short description of the item</value>
            <example>Imported From Mex.</example>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.Metadata">
            <summary>
            It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters.
            </summary>
            <value>It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters.</value>
            <example>{key&#x3D;value}</example>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.Name">
            <summary>
            The name of the item. It will be displayed in the order.
            </summary>
            <value>The name of the item. It will be displayed in the order.</value>
            <example>Box of Cohiba S1s</example>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.Quantity">
            <summary>
            The quantity of the item in the order.
            </summary>
            <value>The quantity of the item in the order.</value>
            <example>1</example>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.Sku">
            <summary>
            The stock keeping unit for the item. It is used to identify the item in the order.
            </summary>
            <value>The stock keeping unit for the item. It is used to identify the item in the order.</value>
            <example>XYZ12345</example>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.Tags">
            <summary>
            List of tags for the item. It is used to identify the item in the order.
            </summary>
            <value>List of tags for the item. It is used to identify the item in the order.</value>
            <example>[food, mexican food]</example>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.UnitPrice">
            <summary>
            The price of the item in cents.
            </summary>
            <value>The price of the item in cents.</value>
            <example>20000</example>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponse.Equals(Conekta.net.Model.ProductOrderResponse)">
            <summary>
            Returns true if ProductOrderResponse instances are equal
            </summary>
            <param name="input">Instance of ProductOrderResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ProductOrderResponseAllOf">
            <summary>
            ProductOrderResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponseAllOf.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ProductOrderResponseAllOf" /> class.
            </summary>
            <param name="id">id.</param>
            <param name="varObject">varObject.</param>
            <param name="parentId">parentId.</param>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponseAllOf.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponseAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ProductOrderResponseAllOf.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponseAllOf.Equals(Conekta.net.Model.ProductOrderResponseAllOf)">
            <summary>
            Returns true if ProductOrderResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of ProductOrderResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ProductOrderResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.RiskRules">
            <summary>
            RiskRules
            </summary>
        </member>
        <member name="M:Conekta.net.Model.RiskRules.#ctor(System.Collections.Generic.List{Conekta.net.Model.RiskRulesData})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.RiskRules" /> class.
            </summary>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.RiskRules.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.RiskRules.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRules.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRules.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRules.Equals(Conekta.net.Model.RiskRules)">
            <summary>
            Returns true if RiskRules instances are equal
            </summary>
            <param name="input">Instance of RiskRules to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRules.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRules.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.RiskRulesData">
            <summary>
            RiskRulesData
            </summary>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesData.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.RiskRulesData" /> class.
            </summary>
            <param name="id">rule id.</param>
            <param name="field">field to be used for the rule.</param>
            <param name="createdAt">rule creation date.</param>
            <param name="value">value to be used for the rule.</param>
            <param name="isGlobal">if the rule is global.</param>
            <param name="isTest">if the rule is test.</param>
            <param name="description">description of the rule.</param>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesData.Id">
            <summary>
            rule id
            </summary>
            <value>rule id</value>
            <example>618c3f2fdb8b8da9be376af9</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesData.Field">
            <summary>
            field to be used for the rule
            </summary>
            <value>field to be used for the rule</value>
            <example>email</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesData.CreatedAt">
            <summary>
            rule creation date
            </summary>
            <value>rule creation date</value>
            <example>2021-11-10T21:52:47.339Z</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesData.Value">
            <summary>
            value to be used for the rule
            </summary>
            <value>value to be used for the rule</value>
            <example>email@example.com</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesData.IsGlobal">
            <summary>
            if the rule is global
            </summary>
            <value>if the rule is global</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesData.IsTest">
            <summary>
            if the rule is test
            </summary>
            <value>if the rule is test</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesData.Description">
            <summary>
            description of the rule
            </summary>
            <value>description of the rule</value>
            <example>secure customer example@example.com</example>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesData.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesData.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesData.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesData.Equals(Conekta.net.Model.RiskRulesData)">
            <summary>
            Returns true if RiskRulesData instances are equal
            </summary>
            <param name="input">Instance of RiskRulesData to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesData.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.RiskRulesList">
            <summary>
            RiskRulesList
            </summary>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.RiskRulesList" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesList.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.RiskRulesData})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.RiskRulesList" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesList.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesList.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesList.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesList.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.RiskRulesList.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesList.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesList.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesList.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesList.Equals(Conekta.net.Model.RiskRulesList)">
            <summary>
            Returns true if RiskRulesList instances are equal
            </summary>
            <param name="input">Instance of RiskRulesList to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesList.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.RiskRulesList.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ShippingOrderResponse">
            <summary>
            ShippingOrderResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ShippingOrderResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ShippingOrderResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ShippingOrderResponse.#ctor(System.Int64,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ShippingOrderResponse" /> class.
            </summary>
            <param name="amount">Shipping amount in cents (required).</param>
            <param name="carrier">Carrier name for the shipment.</param>
            <param name="trackingNumber">Tracking number can be used to track the shipment.</param>
            <param name="method">Method of shipment.</param>
            <param name="metadata">Hash where the user can send additional information for each &#39;shipping&#39;..</param>
            <param name="id">id.</param>
            <param name="varObject">varObject.</param>
            <param name="parentId">parentId.</param>
        </member>
        <member name="P:Conekta.net.Model.ShippingOrderResponse.Amount">
            <summary>
            Shipping amount in cents
            </summary>
            <value>Shipping amount in cents</value>
            <example>100</example>
        </member>
        <member name="P:Conekta.net.Model.ShippingOrderResponse.Carrier">
            <summary>
            Carrier name for the shipment
            </summary>
            <value>Carrier name for the shipment</value>
            <example>FEDEX</example>
        </member>
        <member name="P:Conekta.net.Model.ShippingOrderResponse.TrackingNumber">
            <summary>
            Tracking number can be used to track the shipment
            </summary>
            <value>Tracking number can be used to track the shipment</value>
            <example>TRACK123</example>
        </member>
        <member name="P:Conekta.net.Model.ShippingOrderResponse.Method">
            <summary>
            Method of shipment
            </summary>
            <value>Method of shipment</value>
            <example>Same day</example>
        </member>
        <member name="P:Conekta.net.Model.ShippingOrderResponse.Metadata">
            <summary>
            Hash where the user can send additional information for each &#39;shipping&#39;.
            </summary>
            <value>Hash where the user can send additional information for each &#39;shipping&#39;.</value>
            <example>{key&#x3D;value}</example>
        </member>
        <member name="P:Conekta.net.Model.ShippingOrderResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ShippingOrderResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
        </member>
        <member name="P:Conekta.net.Model.ShippingOrderResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ShippingOrderResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingOrderResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingOrderResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingOrderResponse.Equals(Conekta.net.Model.ShippingOrderResponse)">
            <summary>
            Returns true if ShippingOrderResponse instances are equal
            </summary>
            <param name="input">Instance of ShippingOrderResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingOrderResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingOrderResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.ShippingRequest">
            <summary>
            ShippingRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ShippingRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ShippingRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.ShippingRequest.#ctor(System.Int64,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.ShippingRequest" /> class.
            </summary>
            <param name="amount">Shipping amount in cents (required).</param>
            <param name="carrier">Carrier name for the shipment.</param>
            <param name="trackingNumber">Tracking number can be used to track the shipment.</param>
            <param name="method">Method of shipment.</param>
            <param name="metadata">Hash where the user can send additional information for each &#39;shipping&#39;..</param>
        </member>
        <member name="P:Conekta.net.Model.ShippingRequest.Amount">
            <summary>
            Shipping amount in cents
            </summary>
            <value>Shipping amount in cents</value>
            <example>100</example>
        </member>
        <member name="P:Conekta.net.Model.ShippingRequest.Carrier">
            <summary>
            Carrier name for the shipment
            </summary>
            <value>Carrier name for the shipment</value>
            <example>FEDEX</example>
        </member>
        <member name="P:Conekta.net.Model.ShippingRequest.TrackingNumber">
            <summary>
            Tracking number can be used to track the shipment
            </summary>
            <value>Tracking number can be used to track the shipment</value>
            <example>TRACK123</example>
        </member>
        <member name="P:Conekta.net.Model.ShippingRequest.Method">
            <summary>
            Method of shipment
            </summary>
            <value>Method of shipment</value>
            <example>Same day</example>
        </member>
        <member name="P:Conekta.net.Model.ShippingRequest.Metadata">
            <summary>
            Hash where the user can send additional information for each &#39;shipping&#39;.
            </summary>
            <value>Hash where the user can send additional information for each &#39;shipping&#39;.</value>
            <example>{&quot;key&quot;:&quot;value&quot;}</example>
        </member>
        <member name="M:Conekta.net.Model.ShippingRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingRequest.Equals(Conekta.net.Model.ShippingRequest)">
            <summary>
            Returns true if ShippingRequest instances are equal
            </summary>
            <param name="input">Instance of ShippingRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.ShippingRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.SmsCheckoutRequest">
            <summary>
            SmsCheckoutRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.SmsCheckoutRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.SmsCheckoutRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.SmsCheckoutRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.SmsCheckoutRequest" /> class.
            </summary>
            <param name="phonenumber">phonenumber (required).</param>
        </member>
        <member name="P:Conekta.net.Model.SmsCheckoutRequest.Phonenumber">
            <summary>
            Gets or Sets Phonenumber
            </summary>
            <example>5566982090</example>
        </member>
        <member name="M:Conekta.net.Model.SmsCheckoutRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SmsCheckoutRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SmsCheckoutRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SmsCheckoutRequest.Equals(Conekta.net.Model.SmsCheckoutRequest)">
            <summary>
            Returns true if SmsCheckoutRequest instances are equal
            </summary>
            <param name="input">Instance of SmsCheckoutRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SmsCheckoutRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.SmsCheckoutRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.SubscriptionEventsResponse">
            <summary>
            SubscriptionEventsResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionEventsResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.SubscriptionEventsResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionEventsResponse.#ctor(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{Conekta.net.Model.EventResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.SubscriptionEventsResponse" /> class.
            </summary>
            <param name="hasMore">Indicates if there are more pages to be requested (required).</param>
            <param name="varObject">Object type, in this case is list (required).</param>
            <param name="nextPageUrl">URL of the next page..</param>
            <param name="previousPageUrl">Url of the previous page..</param>
            <param name="data">data.</param>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionEventsResponse.HasMore">
            <summary>
            Indicates if there are more pages to be requested
            </summary>
            <value>Indicates if there are more pages to be requested</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionEventsResponse.VarObject">
            <summary>
            Object type, in this case is list
            </summary>
            <value>Object type, in this case is list</value>
            <example>list</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionEventsResponse.NextPageUrl">
            <summary>
            URL of the next page.
            </summary>
            <value>URL of the next page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;next&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionEventsResponse.PreviousPageUrl">
            <summary>
            Url of the previous page.
            </summary>
            <value>Url of the previous page.</value>
            <example>https://api.conekta.io/resources?limit&#x3D;10&amp;previous&#x3D;chrg_1</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionEventsResponse.Data">
            <summary>
            Gets or Sets Data
            </summary>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionEventsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionEventsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionEventsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionEventsResponse.Equals(Conekta.net.Model.SubscriptionEventsResponse)">
            <summary>
            Returns true if SubscriptionEventsResponse instances are equal
            </summary>
            <param name="input">Instance of SubscriptionEventsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionEventsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionEventsResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.SubscriptionRequest">
            <summary>
            It is a parameter that allows to identify in the response, the detailed content of the plans to which the client has subscribed
            </summary>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.SubscriptionRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionRequest.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.SubscriptionRequest" /> class.
            </summary>
            <param name="planId">planId (required).</param>
            <param name="cardId">cardId.</param>
            <param name="trialEnd">trialEnd.</param>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionRequest.PlanId">
            <summary>
            Gets or Sets PlanId
            </summary>
            <example>f84gdgf5g48r15fd21g8w424fd1</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionRequest.CardId">
            <summary>
            Gets or Sets CardId
            </summary>
            <example>src_2qUCNd5AyQqfPMBuV</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionRequest.TrialEnd">
            <summary>
            Gets or Sets TrialEnd
            </summary>
            <example>1484040996</example>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionRequest.Equals(Conekta.net.Model.SubscriptionRequest)">
            <summary>
            Returns true if SubscriptionRequest instances are equal
            </summary>
            <param name="input">Instance of SubscriptionRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.SubscriptionResponse">
            <summary>
            subscription model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionResponse.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.Int64,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.String,System.String,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.SubscriptionResponse" /> class.
            </summary>
            <param name="billingCycleStart">billingCycleStart.</param>
            <param name="billingCycleEnd">billingCycleEnd.</param>
            <param name="canceledAt">canceledAt.</param>
            <param name="cardId">cardId.</param>
            <param name="chargeId">chargeId.</param>
            <param name="createdAt">createdAt.</param>
            <param name="customerCustomReference">customerCustomReference.</param>
            <param name="customerId">customerId.</param>
            <param name="id">id.</param>
            <param name="lastBillingCycleOrderId">lastBillingCycleOrderId.</param>
            <param name="varObject">varObject.</param>
            <param name="pausedAt">pausedAt.</param>
            <param name="planId">planId.</param>
            <param name="status">status.</param>
            <param name="subscriptionStart">subscriptionStart.</param>
            <param name="trialStart">trialStart.</param>
            <param name="trialEnd">trialEnd.</param>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.BillingCycleStart">
            <summary>
            Gets or Sets BillingCycleStart
            </summary>
            <example>1677626827</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.BillingCycleEnd">
            <summary>
            Gets or Sets BillingCycleEnd
            </summary>
            <example>1677626827</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.CanceledAt">
            <summary>
            Gets or Sets CanceledAt
            </summary>
            <example>1678258162</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.CardId">
            <summary>
            Gets or Sets CardId
            </summary>
            <example>src_2tKcHxhTz7xU5SymL</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.ChargeId">
            <summary>
            Gets or Sets ChargeId
            </summary>
            <example>2tKcHxhTz7xU5SymL</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1677626837</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.CustomerCustomReference">
            <summary>
            Gets or Sets CustomerCustomReference
            </summary>
            <example>dotnet_123456</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.CustomerId">
            <summary>
            Gets or Sets CustomerId
            </summary>
            <example>cus_2tKcHxhTz7xU5SymF</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>gold-plan</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.LastBillingCycleOrderId">
            <summary>
            Gets or Sets LastBillingCycleOrderId
            </summary>
            <example>ord_2tSoMP7bZJbLiq4z8</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>subscription</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.PausedAt">
            <summary>
            Gets or Sets PausedAt
            </summary>
            <example>1678258162</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.PlanId">
            <summary>
            Gets or Sets PlanId
            </summary>
            <example>plan_2tXx672QLQ68CkmMn</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.Status">
            <summary>
            Gets or Sets Status
            </summary>
            <example>past_due</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.SubscriptionStart">
            <summary>
            Gets or Sets SubscriptionStart
            </summary>
            <example>1677626837</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.TrialStart">
            <summary>
            Gets or Sets TrialStart
            </summary>
            <example>1677626837</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionResponse.TrialEnd">
            <summary>
            Gets or Sets TrialEnd
            </summary>
            <example>1677626837</example>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionResponse.Equals(Conekta.net.Model.SubscriptionResponse)">
            <summary>
            Returns true if SubscriptionResponse instances are equal
            </summary>
            <param name="input">Instance of SubscriptionResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.SubscriptionUpdateRequest">
            <summary>
            You can modify the subscription to change the plan used by your customers.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionUpdateRequest.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.SubscriptionUpdateRequest" /> class.
            </summary>
            <param name="planId">planId.</param>
            <param name="cardId">cardId.</param>
            <param name="trialEnd">trialEnd.</param>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionUpdateRequest.PlanId">
            <summary>
            Gets or Sets PlanId
            </summary>
            <example>f84gdgf5g48r15fd21g8w424fd1</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionUpdateRequest.CardId">
            <summary>
            Gets or Sets CardId
            </summary>
            <example>src_2qUCNd5AyQqfPMBuV</example>
        </member>
        <member name="P:Conekta.net.Model.SubscriptionUpdateRequest.TrialEnd">
            <summary>
            Gets or Sets TrialEnd
            </summary>
            <example>1484040996</example>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionUpdateRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionUpdateRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionUpdateRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionUpdateRequest.Equals(Conekta.net.Model.SubscriptionUpdateRequest)">
            <summary>
            Returns true if SubscriptionUpdateRequest instances are equal
            </summary>
            <param name="input">Instance of SubscriptionUpdateRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionUpdateRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.SubscriptionUpdateRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.Token">
            <summary>
            a token
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Token.#ctor(Conekta.net.Model.TokenCard,Conekta.net.Model.TokenCheckout)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.Token" /> class.
            </summary>
            <param name="card">card.</param>
            <param name="checkout">checkout.</param>
        </member>
        <member name="P:Conekta.net.Model.Token.Card">
            <summary>
            Gets or Sets Card
            </summary>
        </member>
        <member name="P:Conekta.net.Model.Token.Checkout">
            <summary>
            Gets or Sets Checkout
            </summary>
        </member>
        <member name="M:Conekta.net.Model.Token.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Token.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.Token.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Token.Equals(Conekta.net.Model.Token)">
            <summary>
            Returns true if Token instances are equal
            </summary>
            <param name="input">Instance of Token to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.Token.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.Token.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.TokenCard">
            <summary>
            TokenCard
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TokenCard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TokenCard" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TokenCard.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TokenCard" /> class.
            </summary>
            <param name="cvc">It is a value that allows identifying the security code of the card. (required).</param>
            <param name="deviceFingerprint">It is a value that allows identifying the device fingerprint..</param>
            <param name="expMonth">It is a value that allows identifying the expiration month of the card. (required).</param>
            <param name="expYear">It is a value that allows identifying the expiration year of the card. (required).</param>
            <param name="name">It is a value that allows identifying the name of the cardholder. (required).</param>
            <param name="number">It is a value that allows identifying the number of the card. (required).</param>
        </member>
        <member name="P:Conekta.net.Model.TokenCard.Cvc">
            <summary>
            It is a value that allows identifying the security code of the card.
            </summary>
            <value>It is a value that allows identifying the security code of the card.</value>
            <example>123</example>
        </member>
        <member name="P:Conekta.net.Model.TokenCard.DeviceFingerprint">
            <summary>
            It is a value that allows identifying the device fingerprint.
            </summary>
            <value>It is a value that allows identifying the device fingerprint.</value>
            <example>zptcxk4p6w1ijwz85snf1l3bqe5g09ie</example>
        </member>
        <member name="P:Conekta.net.Model.TokenCard.ExpMonth">
            <summary>
            It is a value that allows identifying the expiration month of the card.
            </summary>
            <value>It is a value that allows identifying the expiration month of the card.</value>
            <example>12</example>
        </member>
        <member name="P:Conekta.net.Model.TokenCard.ExpYear">
            <summary>
            It is a value that allows identifying the expiration year of the card.
            </summary>
            <value>It is a value that allows identifying the expiration year of the card.</value>
            <example>26</example>
        </member>
        <member name="P:Conekta.net.Model.TokenCard.Name">
            <summary>
            It is a value that allows identifying the name of the cardholder.
            </summary>
            <value>It is a value that allows identifying the name of the cardholder.</value>
            <example>Miguel</example>
        </member>
        <member name="P:Conekta.net.Model.TokenCard.Number">
            <summary>
            It is a value that allows identifying the number of the card.
            </summary>
            <value>It is a value that allows identifying the number of the card.</value>
            <example>4242424242424242</example>
        </member>
        <member name="M:Conekta.net.Model.TokenCard.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCard.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCard.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCard.Equals(Conekta.net.Model.TokenCard)">
            <summary>
            Returns true if TokenCard instances are equal
            </summary>
            <param name="input">Instance of TokenCard to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCard.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCard.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.TokenCheckout">
            <summary>
            TokenCheckout
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TokenCheckout.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TokenCheckout" /> class.
            </summary>
            <param name="returnsControlOn">It is a value that allows identifying the returns control on..</param>
        </member>
        <member name="P:Conekta.net.Model.TokenCheckout.ReturnsControlOn">
            <summary>
            It is a value that allows identifying the returns control on.
            </summary>
            <value>It is a value that allows identifying the returns control on.</value>
            <example>Token</example>
        </member>
        <member name="M:Conekta.net.Model.TokenCheckout.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCheckout.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCheckout.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCheckout.Equals(Conekta.net.Model.TokenCheckout)">
            <summary>
            Returns true if TokenCheckout instances are equal
            </summary>
            <param name="input">Instance of TokenCheckout to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCheckout.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenCheckout.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.TokenResponse">
            <summary>
            token response
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TokenResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TokenResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TokenResponse.#ctor(Conekta.net.Model.TokenResponseCheckout,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TokenResponse" /> class.
            </summary>
            <param name="checkout">checkout.</param>
            <param name="id">Unique identifier for the token generated by Conekta. (required).</param>
            <param name="livemode">Indicates whether the token is in live mode or test mode. (required).</param>
            <param name="varObject">Indicates the type of object, in this case token (required).</param>
            <param name="used">Indicates if the token has been used (required).</param>
        </member>
        <member name="P:Conekta.net.Model.TokenResponse.Checkout">
            <summary>
            Gets or Sets Checkout
            </summary>
        </member>
        <member name="P:Conekta.net.Model.TokenResponse.Id">
            <summary>
            Unique identifier for the token generated by Conekta.
            </summary>
            <value>Unique identifier for the token generated by Conekta.</value>
            <example>cus_2tHJfJ79KyUwpxTik</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponse.Livemode">
            <summary>
            Indicates whether the token is in live mode or test mode.
            </summary>
            <value>Indicates whether the token is in live mode or test mode.</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponse.VarObject">
            <summary>
            Indicates the type of object, in this case token
            </summary>
            <value>Indicates the type of object, in this case token</value>
            <example>token</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponse.Used">
            <summary>
            Indicates if the token has been used
            </summary>
            <value>Indicates if the token has been used</value>
            <example>false</example>
        </member>
        <member name="M:Conekta.net.Model.TokenResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponse.Equals(Conekta.net.Model.TokenResponse)">
            <summary>
            Returns true if TokenResponse instances are equal
            </summary>
            <param name="input">Instance of TokenResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.TokenResponseCheckout">
            <summary>
            TokenResponseCheckout
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TokenResponseCheckout.#ctor(System.Collections.Generic.List{System.String},System.Boolean,System.Int32,System.Collections.Generic.List{System.String},System.Int64,System.String,System.Boolean,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Collections.Generic.List{System.Int32},System.String,System.Boolean,System.String,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TokenResponseCheckout" /> class.
            </summary>
            <param name="allowedPaymentMethods">allowedPaymentMethods.</param>
            <param name="canNotExpire">Indicates if the checkout can not expire..</param>
            <param name="emailsSent">emailsSent.</param>
            <param name="excludeCardNetworks">excludeCardNetworks.</param>
            <param name="expiresAt">Date and time when the checkout expires..</param>
            <param name="failureUrl">URL to redirect the customer to if the payment process fails..</param>
            <param name="force3dsFlow">Indicates if the checkout forces the 3DS flow..</param>
            <param name="id">id.</param>
            <param name="livemode">livemode.</param>
            <param name="metadata">metadata.</param>
            <param name="monthlyInstallmentsEnabled">Indicates if the checkout allows monthly installments..</param>
            <param name="monthlyInstallmentsOptions">List of monthly installments options..</param>
            <param name="name">name.</param>
            <param name="needsShippingContact">needsShippingContact.</param>
            <param name="varObject">Indicates the type of object, in this case checkout..</param>
            <param name="onDemandEnabled">Indicates if the checkout allows on demand payments..</param>
            <param name="paidPaymentsCount">Number of payments that have been paid..</param>
            <param name="recurrent">Indicates if the checkout is recurrent..</param>
            <param name="smsSent">smsSent.</param>
            <param name="startsAt">Date and time when the checkout starts..</param>
            <param name="status">Status of the checkout..</param>
            <param name="successUrl">URL to redirect the customer to after the payment process is completed..</param>
            <param name="type">Type of checkout..</param>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.AllowedPaymentMethods">
            <summary>
            Gets or Sets AllowedPaymentMethods
            </summary>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.CanNotExpire">
            <summary>
            Indicates if the checkout can not expire.
            </summary>
            <value>Indicates if the checkout can not expire.</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.EmailsSent">
            <summary>
            Gets or Sets EmailsSent
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.ExcludeCardNetworks">
            <summary>
            Gets or Sets ExcludeCardNetworks
            </summary>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.ExpiresAt">
            <summary>
            Date and time when the checkout expires.
            </summary>
            <value>Date and time when the checkout expires.</value>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.FailureUrl">
            <summary>
            URL to redirect the customer to if the payment process fails.
            </summary>
            <value>URL to redirect the customer to if the payment process fails.</value>
            <example>https://example.com/failure</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.Force3dsFlow">
            <summary>
            Indicates if the checkout forces the 3DS flow.
            </summary>
            <value>Indicates if the checkout forces the 3DS flow.</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>524f9d2f-8c2e-4e64-a33d-6006711a91bd</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
            <example>{&quot;key&quot;:&quot;value&quot;}</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.MonthlyInstallmentsEnabled">
            <summary>
            Indicates if the checkout allows monthly installments.
            </summary>
            <value>Indicates if the checkout allows monthly installments.</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.MonthlyInstallmentsOptions">
            <summary>
            List of monthly installments options.
            </summary>
            <value>List of monthly installments options.</value>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>tok-2toNoPZpJgRU4PvgZ</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.NeedsShippingContact">
            <summary>
            Gets or Sets NeedsShippingContact
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.VarObject">
            <summary>
            Indicates the type of object, in this case checkout.
            </summary>
            <value>Indicates the type of object, in this case checkout.</value>
            <example>checkout</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.OnDemandEnabled">
            <summary>
            Indicates if the checkout allows on demand payments.
            </summary>
            <value>Indicates if the checkout allows on demand payments.</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.PaidPaymentsCount">
            <summary>
            Number of payments that have been paid.
            </summary>
            <value>Number of payments that have been paid.</value>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.Recurrent">
            <summary>
            Indicates if the checkout is recurrent.
            </summary>
            <value>Indicates if the checkout is recurrent.</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.SmsSent">
            <summary>
            Gets or Sets SmsSent
            </summary>
            <example>0</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.StartsAt">
            <summary>
            Date and time when the checkout starts.
            </summary>
            <value>Date and time when the checkout starts.</value>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.Status">
            <summary>
            Status of the checkout.
            </summary>
            <value>Status of the checkout.</value>
            <example>Issued</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.SuccessUrl">
            <summary>
            URL to redirect the customer to after the payment process is completed.
            </summary>
            <value>URL to redirect the customer to after the payment process is completed.</value>
            <example>https://example.com/success</example>
        </member>
        <member name="P:Conekta.net.Model.TokenResponseCheckout.Type">
            <summary>
            Type of checkout.
            </summary>
            <value>Type of checkout.</value>
            <example>Integration</example>
        </member>
        <member name="M:Conekta.net.Model.TokenResponseCheckout.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponseCheckout.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponseCheckout.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponseCheckout.Equals(Conekta.net.Model.TokenResponseCheckout)">
            <summary>
            Returns true if TokenResponseCheckout instances are equal
            </summary>
            <param name="input">Instance of TokenResponseCheckout to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponseCheckout.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.TokenResponseCheckout.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.TransactionResponse">
            <summary>
            The Transaction object represents the actions or steps of an order. Statuses can be: unprocessed, pending, available, owen, paid_out, voided, capture, capture_reversal, liquidation, liquidation_reversal, payout, payout_reversal, refund, refund_reversal, chargeback, chargeback_reversal, rounding_adjustment, won_chargeback, transferred, and transferred.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TransactionResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TransactionResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TransactionResponse.#ctor(System.Int64,System.String,System.Int64,System.String,System.Int64,System.String,System.Boolean,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TransactionResponse" /> class.
            </summary>
            <param name="amount">The amount of the transaction. (required).</param>
            <param name="charge">Randomly assigned unique order identifier associated with the charge. (required).</param>
            <param name="createdAt">Date and time of creation of the transaction in Unix format. (required).</param>
            <param name="currency">The currency of the transaction. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217) (required).</param>
            <param name="fee">The amount to be deducted for taxes and commissions. (required).</param>
            <param name="id">Unique identifier of the transaction. (required).</param>
            <param name="livemode">Indicates whether the transaction was created in live mode or test mode. (required).</param>
            <param name="net">The net amount after deducting commissions and taxes. (required).</param>
            <param name="varObject">Object name, which is transaction. (required).</param>
            <param name="status">Code indicating transaction status. (required).</param>
            <param name="type">Transaction Type (required).</param>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.Amount">
            <summary>
            The amount of the transaction.
            </summary>
            <value>The amount of the transaction.</value>
            <example>1000</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.Charge">
            <summary>
            Randomly assigned unique order identifier associated with the charge.
            </summary>
            <value>Randomly assigned unique order identifier associated with the charge.</value>
            <example>5ee7ec58885a45585e6d9f8m</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.CreatedAt">
            <summary>
            Date and time of creation of the transaction in Unix format.
            </summary>
            <value>Date and time of creation of the transaction in Unix format.</value>
            <example>1553273553</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.Currency">
            <summary>
            The currency of the transaction. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
            </summary>
            <value>The currency of the transaction. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.Fee">
            <summary>
            The amount to be deducted for taxes and commissions.
            </summary>
            <value>The amount to be deducted for taxes and commissions.</value>
            <example>560</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.Id">
            <summary>
            Unique identifier of the transaction.
            </summary>
            <value>Unique identifier of the transaction.</value>
            <example>5ee7ec5b8dea41085erb7f9e</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.Livemode">
            <summary>
            Indicates whether the transaction was created in live mode or test mode.
            </summary>
            <value>Indicates whether the transaction was created in live mode or test mode.</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.Net">
            <summary>
            The net amount after deducting commissions and taxes.
            </summary>
            <value>The net amount after deducting commissions and taxes.</value>
            <example>440</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.VarObject">
            <summary>
            Object name, which is transaction.
            </summary>
            <value>Object name, which is transaction.</value>
            <example>transaction</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.Status">
            <summary>
            Code indicating transaction status.
            </summary>
            <value>Code indicating transaction status.</value>
            <example>pending</example>
        </member>
        <member name="P:Conekta.net.Model.TransactionResponse.Type">
            <summary>
            Transaction Type
            </summary>
            <value>Transaction Type</value>
            <example>capture</example>
        </member>
        <member name="M:Conekta.net.Model.TransactionResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransactionResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransactionResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransactionResponse.Equals(Conekta.net.Model.TransactionResponse)">
            <summary>
            Returns true if TransactionResponse instances are equal
            </summary>
            <param name="input">Instance of TransactionResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransactionResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.TransactionResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.TransferDestinationResponse">
            <summary>
            Method used to make the transfer.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TransferDestinationResponse.#ctor(System.String,System.String,System.String,System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TransferDestinationResponse" /> class.
            </summary>
            <param name="accountHolder">Name of the account holder..</param>
            <param name="accountNumber">Account number of the bank account..</param>
            <param name="bank">Name of the bank..</param>
            <param name="createdAt">Date and time of creation of the transfer..</param>
            <param name="id">Unique identifier of the transfer..</param>
            <param name="varObject">Object name, which is bank_transfer_payout_method..</param>
            <param name="payeeId">Unique identifier of the payee..</param>
            <param name="type">Type of the payee..</param>
        </member>
        <member name="P:Conekta.net.Model.TransferDestinationResponse.AccountHolder">
            <summary>
            Name of the account holder.
            </summary>
            <value>Name of the account holder.</value>
            <example>John Doe</example>
        </member>
        <member name="P:Conekta.net.Model.TransferDestinationResponse.AccountNumber">
            <summary>
            Account number of the bank account.
            </summary>
            <value>Account number of the bank account.</value>
            <example>012180023547896764</example>
        </member>
        <member name="P:Conekta.net.Model.TransferDestinationResponse.Bank">
            <summary>
            Name of the bank.
            </summary>
            <value>Name of the bank.</value>
            <example>BBVA Bancomer</example>
        </member>
        <member name="P:Conekta.net.Model.TransferDestinationResponse.CreatedAt">
            <summary>
            Date and time of creation of the transfer.
            </summary>
            <value>Date and time of creation of the transfer.</value>
            <example>1553273553</example>
        </member>
        <member name="P:Conekta.net.Model.TransferDestinationResponse.Id">
            <summary>
            Unique identifier of the transfer.
            </summary>
            <value>Unique identifier of the transfer.</value>
            <example>pytmtd_2ide3qwTdDvNBosEC</example>
        </member>
        <member name="P:Conekta.net.Model.TransferDestinationResponse.VarObject">
            <summary>
            Object name, which is bank_transfer_payout_method.
            </summary>
            <value>Object name, which is bank_transfer_payout_method.</value>
            <example>bank_transfer_payout_method</example>
        </member>
        <member name="P:Conekta.net.Model.TransferDestinationResponse.PayeeId">
            <summary>
            Unique identifier of the payee.
            </summary>
            <value>Unique identifier of the payee.</value>
            <example>payee_2icdDewRxDENBos85</example>
        </member>
        <member name="P:Conekta.net.Model.TransferDestinationResponse.Type">
            <summary>
            Type of the payee.
            </summary>
            <value>Type of the payee.</value>
            <example>BankTransferPayoutMethod</example>
        </member>
        <member name="M:Conekta.net.Model.TransferDestinationResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferDestinationResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferDestinationResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferDestinationResponse.Equals(Conekta.net.Model.TransferDestinationResponse)">
            <summary>
            Returns true if TransferDestinationResponse instances are equal
            </summary>
            <param name="input">Instance of TransferDestinationResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferDestinationResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferDestinationResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.TransferMethodResponse">
            <summary>
            Method used to make the transfer.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TransferMethodResponse.#ctor(System.String,System.String,System.String,System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TransferMethodResponse" /> class.
            </summary>
            <param name="accountHolder">Name of the account holder..</param>
            <param name="accountNumber">Account number of the bank account..</param>
            <param name="bank">Name of the bank..</param>
            <param name="createdAt">Date and time of creation of the transfer..</param>
            <param name="id">Unique identifier of the transfer..</param>
            <param name="varObject">Object name, which is bank_transfer_payout_method..</param>
            <param name="payeeId">Unique identifier of the payee..</param>
            <param name="type">Type of the payee..</param>
        </member>
        <member name="P:Conekta.net.Model.TransferMethodResponse.AccountHolder">
            <summary>
            Name of the account holder.
            </summary>
            <value>Name of the account holder.</value>
            <example>John Doe</example>
        </member>
        <member name="P:Conekta.net.Model.TransferMethodResponse.AccountNumber">
            <summary>
            Account number of the bank account.
            </summary>
            <value>Account number of the bank account.</value>
            <example>012180023547896764</example>
        </member>
        <member name="P:Conekta.net.Model.TransferMethodResponse.Bank">
            <summary>
            Name of the bank.
            </summary>
            <value>Name of the bank.</value>
            <example>BBVA Bancomer</example>
        </member>
        <member name="P:Conekta.net.Model.TransferMethodResponse.CreatedAt">
            <summary>
            Date and time of creation of the transfer.
            </summary>
            <value>Date and time of creation of the transfer.</value>
            <example>1553273553</example>
        </member>
        <member name="P:Conekta.net.Model.TransferMethodResponse.Id">
            <summary>
            Unique identifier of the transfer.
            </summary>
            <value>Unique identifier of the transfer.</value>
            <example>pytmtd_2ide3qwTdDvNBosEC</example>
        </member>
        <member name="P:Conekta.net.Model.TransferMethodResponse.VarObject">
            <summary>
            Object name, which is bank_transfer_payout_method.
            </summary>
            <value>Object name, which is bank_transfer_payout_method.</value>
            <example>bank_transfer_payout_method</example>
        </member>
        <member name="P:Conekta.net.Model.TransferMethodResponse.PayeeId">
            <summary>
            Unique identifier of the payee.
            </summary>
            <value>Unique identifier of the payee.</value>
            <example>payee_2icdDewRxDENBos85</example>
        </member>
        <member name="P:Conekta.net.Model.TransferMethodResponse.Type">
            <summary>
            Type of the payee.
            </summary>
            <value>Type of the payee.</value>
            <example>BankTransferPayoutMethod</example>
        </member>
        <member name="M:Conekta.net.Model.TransferMethodResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferMethodResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferMethodResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferMethodResponse.Equals(Conekta.net.Model.TransferMethodResponse)">
            <summary>
            Returns true if TransferMethodResponse instances are equal
            </summary>
            <param name="input">Instance of TransferMethodResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferMethodResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferMethodResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.TransferResponse">
            <summary>
            A transfer represents the action of sending an amount to a business bank account including the status, amount and method used to make the transfer.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TransferResponse.#ctor(System.Int64,System.Int64,System.String,System.String,System.Boolean,Conekta.net.Model.TransferDestinationResponse,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TransferResponse" /> class.
            </summary>
            <param name="amount">Amount in cents of the transfer..</param>
            <param name="createdAt">Date and time of creation of the transfer in Unix format..</param>
            <param name="currency">The currency of the transfer. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217).</param>
            <param name="id">Unique identifier of the transfer..</param>
            <param name="livemode">Indicates whether the transfer was created in live mode or test mode..</param>
            <param name="destination">destination.</param>
            <param name="varObject">Object name, which is transfer..</param>
            <param name="statementDescription">Description of the transfer..</param>
            <param name="statementReference">Reference number of the transfer..</param>
            <param name="status">Code indicating transfer status..</param>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.Amount">
            <summary>
            Amount in cents of the transfer.
            </summary>
            <value>Amount in cents of the transfer.</value>
            <example>10000</example>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.CreatedAt">
            <summary>
            Date and time of creation of the transfer in Unix format.
            </summary>
            <value>Date and time of creation of the transfer in Unix format.</value>
            <example>1553273553</example>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.Currency">
            <summary>
            The currency of the transfer. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
            </summary>
            <value>The currency of the transfer. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.Id">
            <summary>
            Unique identifier of the transfer.
            </summary>
            <value>Unique identifier of the transfer.</value>
            <example>5b0337d4dD344ef954fe1X4b6</example>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.Livemode">
            <summary>
            Indicates whether the transfer was created in live mode or test mode.
            </summary>
            <value>Indicates whether the transfer was created in live mode or test mode.</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.Destination">
            <summary>
            Gets or Sets Destination
            </summary>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.VarObject">
            <summary>
            Object name, which is transfer.
            </summary>
            <value>Object name, which is transfer.</value>
            <example>transfer</example>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.StatementDescription">
            <summary>
            Description of the transfer.
            </summary>
            <value>Description of the transfer.</value>
            <example>Conekta 4401234</example>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.StatementReference">
            <summary>
            Reference number of the transfer.
            </summary>
            <value>Reference number of the transfer.</value>
            <example>4401234</example>
        </member>
        <member name="P:Conekta.net.Model.TransferResponse.Status">
            <summary>
            Code indicating transfer status.
            </summary>
            <value>Code indicating transfer status.</value>
            <example>pending</example>
        </member>
        <member name="M:Conekta.net.Model.TransferResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferResponse.Equals(Conekta.net.Model.TransferResponse)">
            <summary>
            Returns true if TransferResponse instances are equal
            </summary>
            <param name="input">Instance of TransferResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.TransferResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.TransfersResponse">
            <summary>
            A transfer represents the action of sending an amount to a business bank account including the status, amount and method used to make the transfer.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.TransfersResponse.#ctor(System.Int64,System.Int64,System.String,System.String,System.Boolean,Conekta.net.Model.TransferMethodResponse,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.TransfersResponse" /> class.
            </summary>
            <param name="amount">Amount in cents of the transfer..</param>
            <param name="createdAt">Date and time of creation of the transfer..</param>
            <param name="currency">The currency of the transfer. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217).</param>
            <param name="id">Unique identifier of the transfer..</param>
            <param name="livemode">Indicates whether the transfer was created in live mode or test mode..</param>
            <param name="method">method.</param>
            <param name="varObject">Object name, which is transfer..</param>
            <param name="statementDescription">Description of the transfer..</param>
            <param name="statementReference">Reference number of the transfer..</param>
            <param name="status">Code indicating transfer status..</param>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.Amount">
            <summary>
            Amount in cents of the transfer.
            </summary>
            <value>Amount in cents of the transfer.</value>
            <example>10000</example>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.CreatedAt">
            <summary>
            Date and time of creation of the transfer.
            </summary>
            <value>Date and time of creation of the transfer.</value>
            <example>1553273553</example>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.Currency">
            <summary>
            The currency of the transfer. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
            </summary>
            <value>The currency of the transfer. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)</value>
            <example>MXN</example>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.Id">
            <summary>
            Unique identifier of the transfer.
            </summary>
            <value>Unique identifier of the transfer.</value>
            <example>5b0337d4dD344ef954fe1X4b6</example>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.Livemode">
            <summary>
            Indicates whether the transfer was created in live mode or test mode.
            </summary>
            <value>Indicates whether the transfer was created in live mode or test mode.</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.Method">
            <summary>
            Gets or Sets Method
            </summary>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.VarObject">
            <summary>
            Object name, which is transfer.
            </summary>
            <value>Object name, which is transfer.</value>
            <example>transfer</example>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.StatementDescription">
            <summary>
            Description of the transfer.
            </summary>
            <value>Description of the transfer.</value>
            <example>Conekta 4401234</example>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.StatementReference">
            <summary>
            Reference number of the transfer.
            </summary>
            <value>Reference number of the transfer.</value>
            <example>4401234</example>
        </member>
        <member name="P:Conekta.net.Model.TransfersResponse.Status">
            <summary>
            Code indicating transfer status.
            </summary>
            <value>Code indicating transfer status.</value>
            <example>pending</example>
        </member>
        <member name="M:Conekta.net.Model.TransfersResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransfersResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.TransfersResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransfersResponse.Equals(Conekta.net.Model.TransfersResponse)">
            <summary>
            Returns true if TransfersResponse instances are equal
            </summary>
            <param name="input">Instance of TransfersResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.TransfersResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.TransfersResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateCustomer">
            <summary>
            update customer
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomer.#ctor(Conekta.net.Model.UpdateCustomerAntifraudInfo,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.List{Conekta.net.Model.CustomerFiscalEntitiesRequest},System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{Conekta.net.Model.CustomerPaymentMethodsRequest},System.Collections.Generic.List{Conekta.net.Model.CustomerShippingContacts},Conekta.net.Model.SubscriptionRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateCustomer" /> class.
            </summary>
            <param name="antifraudInfo">antifraudInfo.</param>
            <param name="defaultPaymentSourceId">It is a parameter that allows to identify in the response, the Conekta ID of a payment method (payment_id).</param>
            <param name="email">An email address is a series of customizable characters followed by a universal Internet symbol, the at symbol (@), the name of a host server, and a web domain ending (.mx, .com, .org, . net, etc)..</param>
            <param name="name">Client&#39;s name.</param>
            <param name="phone">Is the customer&#39;s phone number.</param>
            <param name="planId">Contains the ID of a plan, which could together with name, email and phone create a client directly to a subscription.</param>
            <param name="defaultShippingContactId">It is a parameter that allows to identify in the response, the Conekta ID of the shipping address (shipping_contact).</param>
            <param name="corporate">It is a value that allows identifying if the email is corporate or not. (default to false).</param>
            <param name="customReference">It is an undefined value..</param>
            <param name="fiscalEntities">fiscalEntities.</param>
            <param name="metadata">metadata.</param>
            <param name="paymentSources">Contains details of the payment methods that the customer has active or has used in Conekta.</param>
            <param name="shippingContacts">Contains the detail of the shipping addresses that the client has active or has used in Conekta.</param>
            <param name="subscription">subscription.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.AntifraudInfo">
            <summary>
            Gets or Sets AntifraudInfo
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.DefaultPaymentSourceId">
            <summary>
            It is a parameter that allows to identify in the response, the Conekta ID of a payment method (payment_id)
            </summary>
            <value>It is a parameter that allows to identify in the response, the Conekta ID of a payment method (payment_id)</value>
            <example>src_1a2b3c4d5e6f7g8h</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.Email">
            <summary>
            An email address is a series of customizable characters followed by a universal Internet symbol, the at symbol (@), the name of a host server, and a web domain ending (.mx, .com, .org, . net, etc).
            </summary>
            <value>An email address is a series of customizable characters followed by a universal Internet symbol, the at symbol (@), the name of a host server, and a web domain ending (.mx, .com, .org, . net, etc).</value>
            <example>miguel@gmail.com</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.Name">
            <summary>
            Client&#39;s name
            </summary>
            <value>Client&#39;s name</value>
            <example>miguel</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.Phone">
            <summary>
            Is the customer&#39;s phone number
            </summary>
            <value>Is the customer&#39;s phone number</value>
            <example>5215555555555</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.PlanId">
            <summary>
            Contains the ID of a plan, which could together with name, email and phone create a client directly to a subscription
            </summary>
            <value>Contains the ID of a plan, which could together with name, email and phone create a client directly to a subscription</value>
            <example>plan_987234823</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.DefaultShippingContactId">
            <summary>
            It is a parameter that allows to identify in the response, the Conekta ID of the shipping address (shipping_contact)
            </summary>
            <value>It is a parameter that allows to identify in the response, the Conekta ID of the shipping address (shipping_contact)</value>
            <example>ship_cont_1a2b3c4d5e6f7g8h</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.Corporate">
            <summary>
            It is a value that allows identifying if the email is corporate or not.
            </summary>
            <value>It is a value that allows identifying if the email is corporate or not.</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.CustomReference">
            <summary>
            It is an undefined value.
            </summary>
            <value>It is an undefined value.</value>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.FiscalEntities">
            <summary>
            Gets or Sets FiscalEntities
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.PaymentSources">
            <summary>
            Contains details of the payment methods that the customer has active or has used in Conekta
            </summary>
            <value>Contains details of the payment methods that the customer has active or has used in Conekta</value>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.ShippingContacts">
            <summary>
            Contains the detail of the shipping addresses that the client has active or has used in Conekta
            </summary>
            <value>Contains the detail of the shipping addresses that the client has active or has used in Conekta</value>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomer.Subscription">
            <summary>
            Gets or Sets Subscription
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomer.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomer.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomer.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomer.Equals(Conekta.net.Model.UpdateCustomer)">
            <summary>
            Returns true if UpdateCustomer instances are equal
            </summary>
            <param name="input">Instance of UpdateCustomer to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomer.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomer.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateCustomerAntifraudInfo">
            <summary>
            UpdateCustomerAntifraudInfo
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerAntifraudInfo.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateCustomerAntifraudInfo" /> class.
            </summary>
            <param name="accountCreatedAt">accountCreatedAt.</param>
            <param name="firstPaidAt">firstPaidAt.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerAntifraudInfo.AccountCreatedAt">
            <summary>
            Gets or Sets AccountCreatedAt
            </summary>
            <example>1484040996</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerAntifraudInfo.FirstPaidAt">
            <summary>
            Gets or Sets FirstPaidAt
            </summary>
            <example>1485151007</example>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerAntifraudInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerAntifraudInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerAntifraudInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerAntifraudInfo.Equals(Conekta.net.Model.UpdateCustomerAntifraudInfo)">
            <summary>
            Returns true if UpdateCustomerAntifraudInfo instances are equal
            </summary>
            <param name="input">Instance of UpdateCustomerAntifraudInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerAntifraudInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerAntifraudInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse">
            <summary>
            UpdateCustomerFiscalEntitiesResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.#ctor(Conekta.net.Model.CustomerFiscalEntitiesRequestAddress,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Int64,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse" /> class.
            </summary>
            <param name="address">address (required).</param>
            <param name="taxId">taxId.</param>
            <param name="email">email.</param>
            <param name="phone">phone.</param>
            <param name="metadata">metadata.</param>
            <param name="companyName">companyName.</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.TaxId">
            <summary>
            Gets or Sets TaxId
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.Email">
            <summary>
            Gets or Sets Email
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.Phone">
            <summary>
            Gets or Sets Phone
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.CompanyName">
            <summary>
            Gets or Sets CompanyName
            </summary>
            <example>conekta</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>fis_ent_2tKZsTYcsryyu7Ah8</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>fiscal_entities</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>cus_2tKcHxhTz7xU5SymF</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.Equals(Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse)">
            <summary>
            Returns true if UpdateCustomerFiscalEntitiesResponse instances are equal
            </summary>
            <param name="input">Instance of UpdateCustomerFiscalEntitiesResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf">
            <summary>
            UpdateCustomerFiscalEntitiesResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.#ctor(System.String,System.String,System.Int64,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf" /> class.
            </summary>
            <param name="id">id (required).</param>
            <param name="varObject">varObject (required).</param>
            <param name="createdAt">createdAt (required).</param>
            <param name="parentId">parentId.</param>
            <param name="varDefault">varDefault.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>fis_ent_2tKZsTYcsryyu7Ah8</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>fiscal_entities</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
            <example>1675715413</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>cus_2tKcHxhTz7xU5SymF</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.VarDefault">
            <summary>
            Gets or Sets VarDefault
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.Equals(Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf)">
            <summary>
            Returns true if UpdateCustomerFiscalEntitiesResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of UpdateCustomerFiscalEntitiesResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerFiscalEntitiesResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse">
            <summary>
            UpdateCustomerPaymentMethodsResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.#ctor(Conekta.net.Model.PaymentMethodCashResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCashResponse" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCashResponse.</param>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.#ctor(Conekta.net.Model.PaymentMethodCardResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodCardResponse" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodCardResponse.</param>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.#ctor(Conekta.net.Model.PaymentMethodSpeiRecurrent)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse" /> class
            with the <see cref="T:Conekta.net.Model.PaymentMethodSpeiRecurrent" /> class
            </summary>
            <param name="actualInstance">An instance of PaymentMethodSpeiRecurrent.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.ActualInstance">
            <summary>
            Gets or Sets ActualInstance
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.GetPaymentMethodCashResponse">
            <summary>
            Get the actual instance of `PaymentMethodCashResponse`. If the actual instance is not `PaymentMethodCashResponse`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCashResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.GetPaymentMethodCardResponse">
            <summary>
            Get the actual instance of `PaymentMethodCardResponse`. If the actual instance is not `PaymentMethodCardResponse`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodCardResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.GetPaymentMethodSpeiRecurrent">
            <summary>
            Get the actual instance of `PaymentMethodSpeiRecurrent`. If the actual instance is not `PaymentMethodSpeiRecurrent`,
            the InvalidClassException will be thrown
            </summary>
            <returns>An instance of PaymentMethodSpeiRecurrent</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.FromJson(System.String)">
            <summary>
            Converts the JSON string into an instance of UpdateCustomerPaymentMethodsResponse
            </summary>
            <param name="jsonString">JSON string</param>
            <returns>An instance of UpdateCustomerPaymentMethodsResponse</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.Equals(Conekta.net.Model.UpdateCustomerPaymentMethodsResponse)">
            <summary>
            Returns true if UpdateCustomerPaymentMethodsResponse instances are equal
            </summary>
            <param name="input">Instance of UpdateCustomerPaymentMethodsResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateCustomerPaymentMethodsResponseJsonConverter">
            <summary>
            Custom JSON converter for UpdateCustomerPaymentMethodsResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponseJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To write the JSON string
            </summary>
            <param name="writer">JSON writer</param>
            <param name="value">Object to be converted into a JSON string</param>
            <param name="serializer">JSON Serializer</param>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponseJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            To convert a JSON string into an object
            </summary>
            <param name="reader">JSON reader</param>
            <param name="objectType">Object type</param>
            <param name="existingValue">Existing value</param>
            <param name="serializer">JSON Serializer</param>
            <returns>The object converted from the JSON string</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateCustomerPaymentMethodsResponseJsonConverter.CanConvert(System.Type)">
            <summary>
            Check if the object can be converted
            </summary>
            <param name="objectType">Object type</param>
            <returns>True if the object can be converted</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateOrderDiscountLinesRequest">
            <summary>
            List of discounts that apply to the order.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderDiscountLinesRequest.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateOrderDiscountLinesRequest" /> class.
            </summary>
            <param name="amount">amount.</param>
            <param name="code">Discount code..</param>
            <param name="type">type.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderDiscountLinesRequest.Amount">
            <summary>
            Gets or Sets Amount
            </summary>
            <example>500</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderDiscountLinesRequest.Code">
            <summary>
            Discount code.
            </summary>
            <value>Discount code.</value>
            <example>123</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderDiscountLinesRequest.Type">
            <summary>
            Gets or Sets Type
            </summary>
            <example>loyalty</example>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderDiscountLinesRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderDiscountLinesRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderDiscountLinesRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderDiscountLinesRequest.Equals(Conekta.net.Model.UpdateOrderDiscountLinesRequest)">
            <summary>
            Returns true if UpdateOrderDiscountLinesRequest instances are equal
            </summary>
            <param name="input">Instance of UpdateOrderDiscountLinesRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderDiscountLinesRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderDiscountLinesRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateOrderTaxRequest">
            <summary>
            create new taxes for an existing order
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxRequest.#ctor(System.Int64,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateOrderTaxRequest" /> class.
            </summary>
            <param name="amount">The amount to be collected for tax in cents.</param>
            <param name="description">description or tax&#39;s name.</param>
            <param name="metadata">metadata.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxRequest.Amount">
            <summary>
            The amount to be collected for tax in cents
            </summary>
            <value>The amount to be collected for tax in cents</value>
            <example>100</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxRequest.Description">
            <summary>
            description or tax&#39;s name
            </summary>
            <value>description or tax&#39;s name</value>
            <example>testing</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxRequest.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxRequest.Equals(Conekta.net.Model.UpdateOrderTaxRequest)">
            <summary>
            Returns true if UpdateOrderTaxRequest instances are equal
            </summary>
            <param name="input">Instance of UpdateOrderTaxRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateOrderTaxResponse">
            <summary>
            create new taxes for an existing order response
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateOrderTaxResponse" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponse.#ctor(System.Int64,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateOrderTaxResponse" /> class.
            </summary>
            <param name="amount">The amount to be collected for tax in cents (required).</param>
            <param name="description">description or tax&#39;s name (required).</param>
            <param name="metadata">metadata.</param>
            <param name="id">id (required).</param>
            <param name="varObject">varObject.</param>
            <param name="parentId">parentId.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxResponse.Amount">
            <summary>
            The amount to be collected for tax in cents
            </summary>
            <value>The amount to be collected for tax in cents</value>
            <example>100</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxResponse.Description">
            <summary>
            description or tax&#39;s name
            </summary>
            <value>description or tax&#39;s name</value>
            <example>testing</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxResponse.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
            <example>{key&#x3D;value}</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>tax_lin_2tQ8dC5mg1UADmVPo</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>tax_line</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxResponse.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>ord_2tPAmKCEJqh8RE6nY</example>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponse.Equals(Conekta.net.Model.UpdateOrderTaxResponse)">
            <summary>
            Returns true if UpdateOrderTaxResponse instances are equal
            </summary>
            <param name="input">Instance of UpdateOrderTaxResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateOrderTaxResponseAllOf">
            <summary>
            UpdateOrderTaxResponseAllOf
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponseAllOf.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateOrderTaxResponseAllOf" /> class.
            </summary>
            <param name="id">id.</param>
            <param name="varObject">varObject.</param>
            <param name="parentId">parentId.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxResponseAllOf.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>tax_lin_2tQ8dC5mg1UADmVPo</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxResponseAllOf.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>tax_line</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateOrderTaxResponseAllOf.ParentId">
            <summary>
            Gets or Sets ParentId
            </summary>
            <example>ord_2tPAmKCEJqh8RE6nY</example>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponseAllOf.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponseAllOf.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponseAllOf.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponseAllOf.Equals(Conekta.net.Model.UpdateOrderTaxResponseAllOf)">
            <summary>
            Returns true if UpdateOrderTaxResponseAllOf instances are equal
            </summary>
            <param name="input">Instance of UpdateOrderTaxResponseAllOf to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponseAllOf.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateOrderTaxResponseAllOf.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdatePaymentMethods">
            <summary>
            UpdatePaymentMethods
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdatePaymentMethods.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdatePaymentMethods" /> class.
            </summary>
            <param name="name">name.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdatePaymentMethods.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>name of person</example>
        </member>
        <member name="M:Conekta.net.Model.UpdatePaymentMethods.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdatePaymentMethods.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdatePaymentMethods.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdatePaymentMethods.Equals(Conekta.net.Model.UpdatePaymentMethods)">
            <summary>
            Returns true if UpdatePaymentMethods instances are equal
            </summary>
            <param name="input">Instance of UpdatePaymentMethods to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdatePaymentMethods.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdatePaymentMethods.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.UpdateProduct">
            <summary>
            UpdateProduct
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateProduct.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Int64,System.Int32,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.UpdateProduct" /> class.
            </summary>
            <param name="antifraudInfo">antifraudInfo.</param>
            <param name="description">description.</param>
            <param name="sku">sku.</param>
            <param name="name">name.</param>
            <param name="unitPrice">unitPrice.</param>
            <param name="quantity">quantity.</param>
            <param name="tags">tags.</param>
            <param name="brand">brand.</param>
            <param name="metadata">metadata.</param>
        </member>
        <member name="P:Conekta.net.Model.UpdateProduct.AntifraudInfo">
            <summary>
            Gets or Sets AntifraudInfo
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateProduct.Description">
            <summary>
            Gets or Sets Description
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateProduct.Sku">
            <summary>
            Gets or Sets Sku
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateProduct.Name">
            <summary>
            Gets or Sets Name
            </summary>
            <example>Box of Cohiba S1s</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateProduct.UnitPrice">
            <summary>
            Gets or Sets UnitPrice
            </summary>
            <example>20000</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateProduct.Quantity">
            <summary>
            Gets or Sets Quantity
            </summary>
            <example>1</example>
        </member>
        <member name="P:Conekta.net.Model.UpdateProduct.Tags">
            <summary>
            Gets or Sets Tags
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateProduct.Brand">
            <summary>
            Gets or Sets Brand
            </summary>
        </member>
        <member name="P:Conekta.net.Model.UpdateProduct.Metadata">
            <summary>
            Gets or Sets Metadata
            </summary>
        </member>
        <member name="M:Conekta.net.Model.UpdateProduct.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateProduct.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateProduct.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateProduct.Equals(Conekta.net.Model.UpdateProduct)">
            <summary>
            Returns true if UpdateProduct instances are equal
            </summary>
            <param name="input">Instance of UpdateProduct to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateProduct.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.UpdateProduct.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WebhookKeyCreateResponse">
            <summary>
            webhook keys model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyCreateResponse.#ctor(System.Boolean,System.Int64,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookKeyCreateResponse" /> class.
            </summary>
            <param name="active">Indicates if the webhook key is active.</param>
            <param name="createdAt">Unix timestamp in seconds with the creation date of the webhook key.</param>
            <param name="id">Unique identifier of the webhook key.</param>
            <param name="livemode">Indicates if the webhook key is in live mode.</param>
            <param name="varObject">Object name, value is webhook_key.</param>
            <param name="publicKey">Public key to be used in the webhook.</param>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyCreateResponse.Active">
            <summary>
            Indicates if the webhook key is active
            </summary>
            <value>Indicates if the webhook key is active</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyCreateResponse.CreatedAt">
            <summary>
            Unix timestamp in seconds with the creation date of the webhook key
            </summary>
            <value>Unix timestamp in seconds with the creation date of the webhook key</value>
            <example>1577836800</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyCreateResponse.Id">
            <summary>
            Unique identifier of the webhook key
            </summary>
            <value>Unique identifier of the webhook key</value>
            <example>62730ba6fb7dfd6a712f118e</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyCreateResponse.Livemode">
            <summary>
            Indicates if the webhook key is in live mode
            </summary>
            <value>Indicates if the webhook key is in live mode</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyCreateResponse.VarObject">
            <summary>
            Object name, value is webhook_key
            </summary>
            <value>Object name, value is webhook_key</value>
            <example>webhook_key</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyCreateResponse.PublicKey">
            <summary>
            Public key to be used in the webhook
            </summary>
            <value>Public key to be used in the webhook</value>
            <example>-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqULpUc6D6mSAq5a0yLY/\noOjd1mWm6q+QI8y/FI4STr2F+XgKeNnMxSqnyFrHtKQ/ut4Zi45WFnJLfEQL7aW5\n67yE2dWyo6GaL7yZUfLC0Y3sHPGzaGtvDF36ISW7LliYNoMiA3Bx5/1Sr0G23pGW\n0Mp8IO1Nlz0sJWuU/d7zCz/UN6cl9g/BP4eaQ7deS56YuWcj5sTlwqFTlwN12kpA\nIzMZ7gnvYQnZTpPny5lben6QEuxTvZcPApcyOweiESjMnXfkfWOyuYtgMrbsU6oL\nA6sWa6j0pePW7AYeBqB4tyAlenkCSqzHg8bMk5Bm7hiT6I9Pls774lJbnOYmmuNE\n8QIDAQAB\n-----END PUBLIC KEY-----\n</example>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyCreateResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyCreateResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyCreateResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyCreateResponse.Equals(Conekta.net.Model.WebhookKeyCreateResponse)">
            <summary>
            Returns true if WebhookKeyCreateResponse instances are equal
            </summary>
            <param name="input">Instance of WebhookKeyCreateResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyCreateResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyCreateResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WebhookKeyDeleteResponse">
            <summary>
            webhook keys model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyDeleteResponse.#ctor(System.Boolean,System.Int64,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookKeyDeleteResponse" /> class.
            </summary>
            <param name="active">Indicates if the webhook key is active.</param>
            <param name="createdAt">Unix timestamp in seconds with the creation date of the webhook key.</param>
            <param name="deleted">Indicates if the webhook key is deleted.</param>
            <param name="id">Unique identifier of the webhook key.</param>
            <param name="livemode">Indicates if the webhook key is in live mode.</param>
            <param name="varObject">Object name, value is webhook_key.</param>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyDeleteResponse.Active">
            <summary>
            Indicates if the webhook key is active
            </summary>
            <value>Indicates if the webhook key is active</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyDeleteResponse.CreatedAt">
            <summary>
            Unix timestamp in seconds with the creation date of the webhook key
            </summary>
            <value>Unix timestamp in seconds with the creation date of the webhook key</value>
            <example>1577836800</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyDeleteResponse.Deleted">
            <summary>
            Indicates if the webhook key is deleted
            </summary>
            <value>Indicates if the webhook key is deleted</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyDeleteResponse.Id">
            <summary>
            Unique identifier of the webhook key
            </summary>
            <value>Unique identifier of the webhook key</value>
            <example>62730ba6fb7dfd6a712f118e</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyDeleteResponse.Livemode">
            <summary>
            Indicates if the webhook key is in live mode
            </summary>
            <value>Indicates if the webhook key is in live mode</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyDeleteResponse.VarObject">
            <summary>
            Object name, value is webhook_key
            </summary>
            <value>Object name, value is webhook_key</value>
            <example>webhook_key</example>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyDeleteResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyDeleteResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyDeleteResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyDeleteResponse.Equals(Conekta.net.Model.WebhookKeyDeleteResponse)">
            <summary>
            Returns true if WebhookKeyDeleteResponse instances are equal
            </summary>
            <param name="input">Instance of WebhookKeyDeleteResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyDeleteResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyDeleteResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WebhookKeyRequest">
            <summary>
            WebhookKeyRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyRequest.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookKeyRequest" /> class.
            </summary>
            <param name="active">Indicates if the webhook key is active (default to true).</param>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyRequest.Active">
            <summary>
            Indicates if the webhook key is active
            </summary>
            <value>Indicates if the webhook key is active</value>
            <example>true</example>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyRequest.Equals(Conekta.net.Model.WebhookKeyRequest)">
            <summary>
            Returns true if WebhookKeyRequest instances are equal
            </summary>
            <param name="input">Instance of WebhookKeyRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WebhookKeyResponse">
            <summary>
            webhook keys model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyResponse.#ctor(System.String,System.Boolean,System.Int64,System.Nullable{System.Int64},System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookKeyResponse" /> class.
            </summary>
            <param name="id">Unique identifier of the webhook key.</param>
            <param name="active">Indicates if the webhook key is active.</param>
            <param name="createdAt">Unix timestamp in seconds with the creation date of the webhook key.</param>
            <param name="deactivatedAt">Unix timestamp in seconds with the deactivation date of the webhook key.</param>
            <param name="publicKey">Public key to be used in the webhook.</param>
            <param name="livemode">Indicates if the webhook key is in live mode.</param>
            <param name="varObject">Object name, value is webhook_key.</param>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyResponse.Id">
            <summary>
            Unique identifier of the webhook key
            </summary>
            <value>Unique identifier of the webhook key</value>
            <example>62730ba6fb7dfd6a712f118e</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyResponse.Active">
            <summary>
            Indicates if the webhook key is active
            </summary>
            <value>Indicates if the webhook key is active</value>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyResponse.CreatedAt">
            <summary>
            Unix timestamp in seconds with the creation date of the webhook key
            </summary>
            <value>Unix timestamp in seconds with the creation date of the webhook key</value>
            <example>1577836800</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyResponse.DeactivatedAt">
            <summary>
            Unix timestamp in seconds with the deactivation date of the webhook key
            </summary>
            <value>Unix timestamp in seconds with the deactivation date of the webhook key</value>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyResponse.PublicKey">
            <summary>
            Public key to be used in the webhook
            </summary>
            <value>Public key to be used in the webhook</value>
            <example>-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqULpUc6D6mSAq5a0yLY/\noOjd1mWm6q+QI8y/FI4STr2F+XgKeNnMxSqnyFrHtKQ/ut4Zi45WFnJLfEQL7aW5\n67yE2dWyo6GaL7yZUfLC0Y3sHPGzaGtvDF36ISW7LliYNoMiA3Bx5/1Sr0G23pGW\n0Mp8IO1Nlz0sJWuU/d7zCz/UN6cl9g/BP4eaQ7deS56YuWcj5sTlwqFTlwN12kpA\nIzMZ7gnvYQnZTpPny5lben6QEuxTvZcPApcyOweiESjMnXfkfWOyuYtgMrbsU6oL\nA6sWa6j0pePW7AYeBqB4tyAlenkCSqzHg8bMk5Bm7hiT6I9Pls774lJbnOYmmuNE\n8QIDAQAB\n-----END PUBLIC KEY-----\n</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyResponse.Livemode">
            <summary>
            Indicates if the webhook key is in live mode
            </summary>
            <value>Indicates if the webhook key is in live mode</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyResponse.VarObject">
            <summary>
            Object name, value is webhook_key
            </summary>
            <value>Object name, value is webhook_key</value>
            <example>webhook_key</example>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyResponse.Equals(Conekta.net.Model.WebhookKeyResponse)">
            <summary>
            Returns true if WebhookKeyResponse instances are equal
            </summary>
            <param name="input">Instance of WebhookKeyResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WebhookKeyUpdateRequest">
            <summary>
            WebhookKeyUpdateRequest
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyUpdateRequest.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookKeyUpdateRequest" /> class.
            </summary>
            <param name="active">Indicates if the webhook key is active (default to false).</param>
        </member>
        <member name="P:Conekta.net.Model.WebhookKeyUpdateRequest.Active">
            <summary>
            Indicates if the webhook key is active
            </summary>
            <value>Indicates if the webhook key is active</value>
            <example>false</example>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyUpdateRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyUpdateRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyUpdateRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyUpdateRequest.Equals(Conekta.net.Model.WebhookKeyUpdateRequest)">
            <summary>
            Returns true if WebhookKeyUpdateRequest instances are equal
            </summary>
            <param name="input">Instance of WebhookKeyUpdateRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyUpdateRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookKeyUpdateRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WebhookLog">
            <summary>
            WebhookLog
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookLog.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookLog" /> class.
            </summary>
            <param name="failedAttempts">failedAttempts.</param>
            <param name="id">id.</param>
            <param name="lastAttemptedAt">lastAttemptedAt.</param>
            <param name="lastHttpResponseStatus">lastHttpResponseStatus.</param>
            <param name="varObject">varObject.</param>
            <param name="responseData">responseData.</param>
            <param name="url">url.</param>
        </member>
        <member name="P:Conekta.net.Model.WebhookLog.FailedAttempts">
            <summary>
            Gets or Sets FailedAttempts
            </summary>
            <example>10</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookLog.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>webhl_2svd2sh6GbqzyWBNZ</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookLog.LastAttemptedAt">
            <summary>
            Gets or Sets LastAttemptedAt
            </summary>
            <example>1669651274</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookLog.LastHttpResponseStatus">
            <summary>
            Gets or Sets LastHttpResponseStatus
            </summary>
            <example>200</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookLog.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>webhook_log</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookLog.ResponseData">
            <summary>
            Gets or Sets ResponseData
            </summary>
            <example>{&quot;amount&quot;:3000,&quot;payable&quot;:true}</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookLog.Url">
            <summary>
            Gets or Sets Url
            </summary>
            <example>https://username:password@mockoon.stg.conekta.io/payments-api/cash/merchant_approval</example>
        </member>
        <member name="M:Conekta.net.Model.WebhookLog.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookLog.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookLog.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookLog.Equals(Conekta.net.Model.WebhookLog)">
            <summary>
            Returns true if WebhookLog instances are equal
            </summary>
            <param name="input">Instance of WebhookLog to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookLog.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookLog.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WebhookRequest">
            <summary>
            a webhook
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookRequest.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookRequest" /> class.
            </summary>
            <param name="url">Here you must place the URL of your Webhook remember that you must program what you will do with the events received. Also do not forget to handle the HTTPS protocol for greater security. (required).</param>
            <param name="synchronous">It is a value that allows to decide if the events will be synchronous or asynchronous. We recommend asynchronous &#x3D; false (required) (default to false).</param>
        </member>
        <member name="P:Conekta.net.Model.WebhookRequest.Url">
            <summary>
            Here you must place the URL of your Webhook remember that you must program what you will do with the events received. Also do not forget to handle the HTTPS protocol for greater security.
            </summary>
            <value>Here you must place the URL of your Webhook remember that you must program what you will do with the events received. Also do not forget to handle the HTTPS protocol for greater security.</value>
            <example>https://webhook.site/89277eaa-a8e4-4306-8dc5-f55c80703dc8</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookRequest.Synchronous">
            <summary>
            It is a value that allows to decide if the events will be synchronous or asynchronous. We recommend asynchronous &#x3D; false
            </summary>
            <value>It is a value that allows to decide if the events will be synchronous or asynchronous. We recommend asynchronous &#x3D; false</value>
            <example>false</example>
        </member>
        <member name="M:Conekta.net.Model.WebhookRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookRequest.Equals(Conekta.net.Model.WebhookRequest)">
            <summary>
            Returns true if WebhookRequest instances are equal
            </summary>
            <param name="input">Instance of WebhookRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WebhookResponse">
            <summary>
            webhooks model
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookResponse.#ctor(System.Nullable{System.Boolean},System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookResponse" /> class.
            </summary>
            <param name="deleted">deleted.</param>
            <param name="developmentEnabled">developmentEnabled.</param>
            <param name="id">id.</param>
            <param name="livemode">livemode.</param>
            <param name="varObject">varObject.</param>
            <param name="productionEnabled">productionEnabled.</param>
            <param name="status">status.</param>
            <param name="subscribedEvents">subscribedEvents.</param>
            <param name="synchronous">synchronous.</param>
            <param name="url">url.</param>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.Deleted">
            <summary>
            Gets or Sets Deleted
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.DevelopmentEnabled">
            <summary>
            Gets or Sets DevelopmentEnabled
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.Id">
            <summary>
            Gets or Sets Id
            </summary>
            <example>6307a60c41de27127515a575</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.Livemode">
            <summary>
            Gets or Sets Livemode
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.VarObject">
            <summary>
            Gets or Sets VarObject
            </summary>
            <example>event</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.ProductionEnabled">
            <summary>
            Gets or Sets ProductionEnabled
            </summary>
            <example>true</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.Status">
            <summary>
            Gets or Sets Status
            </summary>
            <example>listening</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.SubscribedEvents">
            <summary>
            Gets or Sets SubscribedEvents
            </summary>
            <example>[&quot;charge.created&quot;,&quot;charge.paid&quot;,&quot;charge.under_fraud_review&quot;,&quot;charge.fraudulent&quot;,&quot;charge.refunded&quot;,&quot;charge.preauthorized&quot;,&quot;charge.declined&quot;,&quot;charge.canceled&quot;,&quot;charge.reversed&quot;,&quot;charge.pending_confirmation&quot;]</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.Synchronous">
            <summary>
            Gets or Sets Synchronous
            </summary>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookResponse.Url">
            <summary>
            Gets or Sets Url
            </summary>
            <example>https://username:password@mockoon.stg.conekta.io/payments-api/cash/merchant_approval</example>
        </member>
        <member name="M:Conekta.net.Model.WebhookResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookResponse.Equals(Conekta.net.Model.WebhookResponse)">
            <summary>
            Returns true if WebhookResponse instances are equal
            </summary>
            <param name="input">Instance of WebhookResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WebhookUpdateRequest">
            <summary>
            an updated webhook
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookUpdateRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookUpdateRequest" /> class.
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WebhookUpdateRequest.#ctor(System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WebhookUpdateRequest" /> class.
            </summary>
            <param name="url">Here you must place the URL of your Webhook remember that you must program what you will do with the events received. Also do not forget to handle the HTTPS protocol for greater security. (required).</param>
            <param name="synchronous">It is a value that allows to decide if the events will be synchronous or asynchronous. We recommend asynchronous &#x3D; false (default to false).</param>
            <param name="events">events.</param>
        </member>
        <member name="P:Conekta.net.Model.WebhookUpdateRequest.Url">
            <summary>
            Here you must place the URL of your Webhook remember that you must program what you will do with the events received. Also do not forget to handle the HTTPS protocol for greater security.
            </summary>
            <value>Here you must place the URL of your Webhook remember that you must program what you will do with the events received. Also do not forget to handle the HTTPS protocol for greater security.</value>
            <example>https://webhook.site/89277eaa-a8e4-4306-8dc5-f55c80703dc8</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookUpdateRequest.Synchronous">
            <summary>
            It is a value that allows to decide if the events will be synchronous or asynchronous. We recommend asynchronous &#x3D; false
            </summary>
            <value>It is a value that allows to decide if the events will be synchronous or asynchronous. We recommend asynchronous &#x3D; false</value>
            <example>false</example>
        </member>
        <member name="P:Conekta.net.Model.WebhookUpdateRequest.Events">
            <summary>
            Gets or Sets Events
            </summary>
            <example>customer.created</example>
        </member>
        <member name="M:Conekta.net.Model.WebhookUpdateRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookUpdateRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookUpdateRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookUpdateRequest.Equals(Conekta.net.Model.WebhookUpdateRequest)">
            <summary>
            Returns true if WebhookUpdateRequest instances are equal
            </summary>
            <param name="input">Instance of WebhookUpdateRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookUpdateRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WebhookUpdateRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Model.WhitelistlistRuleResponse">
            <summary>
            WhitelistlistRuleResponse
            </summary>
        </member>
        <member name="M:Conekta.net.Model.WhitelistlistRuleResponse.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Conekta.net.Model.WhitelistlistRuleResponse" /> class.
            </summary>
            <param name="id">Whitelist rule id.</param>
            <param name="field">field used for whitelists rule.</param>
            <param name="value">value used for whitelists rule.</param>
            <param name="description">use an description for whitelisted rule.</param>
        </member>
        <member name="P:Conekta.net.Model.WhitelistlistRuleResponse.Id">
            <summary>
            Whitelist rule id
            </summary>
            <value>Whitelist rule id</value>
            <example>2fw8EWJusiRrxdPzT</example>
        </member>
        <member name="P:Conekta.net.Model.WhitelistlistRuleResponse.Field">
            <summary>
            field used for whitelists rule
            </summary>
            <value>field used for whitelists rule</value>
            <example>email</example>
        </member>
        <member name="P:Conekta.net.Model.WhitelistlistRuleResponse.Value">
            <summary>
            value used for whitelists rule
            </summary>
            <value>value used for whitelists rule</value>
            <example>email@example.com</example>
        </member>
        <member name="P:Conekta.net.Model.WhitelistlistRuleResponse.Description">
            <summary>
            use an description for whitelisted rule
            </summary>
            <value>use an description for whitelisted rule</value>
            <example>banned customer example@example.com</example>
        </member>
        <member name="M:Conekta.net.Model.WhitelistlistRuleResponse.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WhitelistlistRuleResponse.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Conekta.net.Model.WhitelistlistRuleResponse.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WhitelistlistRuleResponse.Equals(Conekta.net.Model.WhitelistlistRuleResponse)">
            <summary>
            Returns true if WhitelistlistRuleResponse instances are equal
            </summary>
            <param name="input">Instance of WhitelistlistRuleResponse to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Conekta.net.Model.WhitelistlistRuleResponse.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Conekta.net.Model.WhitelistlistRuleResponse.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Conekta.net.Utils.RuntimeInformation">
            <summary>
            This class is used to gather information about the runtime environment. This is actually a
            non-trivial task. The code below is largely borrowed from the
            <a href="https://github.com/dotnet/BenchmarkDotNet">BenchmarkDotNet</a> project.
            </summary>
        </member>
        <member name="P:Conekta.net.Utils.RuntimeInformation.IsCoreRt">
            <summary>
            "The north star for CoreRT is to be a flavor of .NET Core" -> CoreRT reports .NET Core everywhere.
            </summary>
        </member>
        <member name="M:Conekta.net.Utils.RuntimeInformation.GetOsVersion">
            <summary>Returns a string that describes the operating system on which the app is running.</summary>
            <returns>A string that describes the operating system on which the app is running.</returns>
        </member>
        <member name="M:Conekta.net.Utils.RuntimeInformation.GetRuntimeVersion">
            <summary>Returns a string that indicates the name of the .NET installation on which an app is running.</summary>
            <returns>A string that indicates the name of the .NET installation on which an app is running.</returns>
        </member>
        <member name="M:Conekta.net.Utils.RuntimeInformation.GetNewtonsoftJsonVersion">
            <summary>Returns a string with the Newtonsoft.Json assembly version number.</summary>
            <returns>A string with the Newtonsoft.Json assembly version number.</returns>
        </member>
    </members>
</doc>
